﻿<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ include file="ImportsGridController.include.t4" #>
<#
string routePrefix;
if (String.IsNullOrEmpty(AreaName)) 
{
    routePrefix = ControllerRootName;
}
else
{
    routePrefix = AreaName + "/" + ControllerRootName;
}
#>
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
using Kendo.Mvc.Extensions;
using Kendo.Mvc.UI;
<# foreach (var namespaceName in RequiredNamespaces) { #>
using <#= namespaceName #>;
<# } #>

namespace <#= Namespace #>
{
<#
    var entitySetName = ModelMetadata.EntitySetName;
    var entitySetVar = ModelVariable ?? (String.IsNullOrEmpty(entitySetName) ? entitySetName : (entitySetName.Substring(0, length:1).ToLowerInvariant() + entitySetName.Substring(1)));
    var modelTypeName = UseViewModel ? ViewModelTypeName : ModelTypeName;
#>
    public class <#= ControllerName #> : Controller
    {
        public ActionResult <#= ViewPrefix #><#= ViewName #>()
        {
            return View();
        }

        public ActionResult <#= entitySetName #>_Read([DataSourceRequest]DataSourceRequest request)
        {
            using(var db = new <#= ContextTypeName #>())
            {
                IQueryable<<#= ModelTypeName #>> <#= entitySetName.ToLower() #> = db.<#= entitySetName #>;
<# if(UseViewModel) { #>
                DataSourceResult result = <#= entitySetName.ToLower() #>.ToDataSourceResult(request, c => new <#= ViewModelTypeName #> 
                {
<# var last = ViewModelTypeChildren.Item(ViewModelTypeChildren.Count);#>
<# foreach (EnvDTE.CodeElement child in ViewModelTypeChildren) { 
    if (child.Equals(last)) { #>
                    <#= child.Name #> = c.<#= child.Name #>
<# } else { #>
                    <#= child.Name #> = c.<#= child.Name #>,
<# } } #>
                });
<# } else { #>
                DataSourceResult result = <#= entitySetName.ToLower() #>.ToDataSourceResult(request);
<# } #>
                return Json(result);
            }
        }
<# if(EditableCreate) { #>

        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult <#= entitySetName #>_Create([DataSourceRequest]DataSourceRequest request, <#= modelTypeName #> <#= ModelVariable #>)
        {
            if (ModelState.IsValid)
            {
                using(var db = new <#= ContextTypeName #>())
                {
                    var entity = new <#= ModelTypeName #>
                    {
<#
PushIndent(new string(' ', 24));
    if(UseViewModel) {
        ListViewModelEntityProperties();
    } else {
        ListModelEntityProperties();
    }
ClearIndent();
#>
                    };

                    db.<#= entitySetName #>.Add(entity);
                    db.SaveChanges();
                    <#= ModelVariable #>.<#= PrimaryKeyName #> = entity.<#= PrimaryKeyName #>;
                }
            }

            return Json(new[] { <#= ModelVariable #> }.ToDataSourceResult(request, ModelState));
        }
<# } #>
<# if(EditableUpdate) { #>

        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult <#= entitySetName #>_Update([DataSourceRequest]DataSourceRequest request, <#= modelTypeName #> <#= ModelVariable #>)
        {
            if (ModelState.IsValid)
            {
                using(var db = new <#= ContextTypeName #>())
                {
                    var entity = new <#= ModelTypeName #>
                    {
                        <#= PrimaryKeyName #> = <#= ModelVariable #>.<#= PrimaryKeyName #>,
<#
PushIndent(new string(' ', 24));
    if(UseViewModel) {
        ListViewModelEntityProperties();
    } else {
        ListModelEntityProperties();
    }
ClearIndent();
#>
                    };

                    db.<#= entitySetName #>.Attach(entity);
                    db.Entry(entity).State = EntityState.Modified;
                    db.SaveChanges();
                }
            }

            return Json(new[] { <#= ModelVariable #> }.ToDataSourceResult(request, ModelState));
        }
<# } #>
<# if(EditableDestroy) { #>

        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult <#= entitySetName #>_Destroy([DataSourceRequest]DataSourceRequest request, <#= modelTypeName #> <#= ModelVariable #>)
        {
            if (ModelState.IsValid)
            {
                using(var db = new <#= ContextTypeName #>())
                {
                    var entity = new <#= ModelTypeName #>
                    {
                        <#= PrimaryKeyName #> = <#= ModelVariable #>.<#= PrimaryKeyName #>,
<#
PushIndent(new string(' ', 24));
if(UseViewModel) {
    ListViewModelEntityProperties();
} else {
    ListModelEntityProperties();
}
ClearIndent();
#>
                    };

                    db.<#= entitySetName #>.Attach(entity);
                    db.<#= entitySetName #>.Remove(entity);
                    db.SaveChanges();
                }
            }

            return Json(new[] { <#= ModelVariable #> }.ToDataSourceResult(request, ModelState));
        }
<# } #>
<# if(ExcelExport) { #>

        [HttpPost]
        public ActionResult Excel_Export_Save(string contentType, string base64, string fileName)
        {
            var fileContents = Convert.FromBase64String(base64);

            return File(fileContents, contentType, fileName);
        }
<# } #>

<# if(PdfExport) { #>
    
        [HttpPost]
        public ActionResult Pdf_Export_Save(string contentType, string base64, string fileName)
        {
            var fileContents = Convert.FromBase64String(base64);

            return File(fileContents, contentType, fileName);
        }
<# } #>
    }
}
<#+
    private void ListModelEntityProperties()
    {
        IEnumerable<PropertyMetadata> properties = ModelMetadata.Properties;
        var last = properties.Last();
        foreach (PropertyMetadata property in properties) {
            if (property.Scaffold && !property.IsPrimaryKey && !property.IsForeignKey) {
                if (property.Equals(last)) {
#>
<#= property.PropertyName #> = <#= ModelVariable #>.<#= property.PropertyName #>
<#+ } else { #>
<#= property.PropertyName #> = <#= ModelVariable #>.<#= property.PropertyName #>,
<#+
                }
            }
        }
    }
#>
<#+  
    private void ListViewModelEntityProperties()
    {
        var last = ViewModelTypeChildren.Item(ViewModelTypeChildren.Count);
        foreach (EnvDTE.CodeElement child in ViewModelTypeChildren) { 
            PropertyMetadata property = ModelMetadata.Properties.FirstOrDefault(p => p.PropertyName == child.Name);
            if (property.Scaffold && !property.IsPrimaryKey && !property.IsForeignKey) {
                if (child.Equals(last)) {
#>
<#= child.Name #> = <#= ModelVariable #>.<#= child.Name #>
<#+ } else { #>
<#= child.Name #> = <#= ModelVariable #>.<#= child.Name #>,
<#+
              }
            }  
        } 
    }
#>
