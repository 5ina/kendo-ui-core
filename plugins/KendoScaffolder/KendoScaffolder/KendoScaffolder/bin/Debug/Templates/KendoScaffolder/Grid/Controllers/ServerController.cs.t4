﻿<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ include file="ImportsGridController.include.t4" #>
<#
string routePrefix;
if (String.IsNullOrEmpty(AreaName)) 
{
    routePrefix = ControllerRootName;
}
else
{
    routePrefix = AreaName + "/" + ControllerRootName;
}
#>
using System;
using System.Linq;
using System.Collections.Generic;
using System.Web.Mvc;
using System.Web.Routing;
using Kendo.Mvc.Extensions;
<# foreach (var namespaceName in RequiredNamespaces) { #>
using <#= namespaceName #>;
<# } #>

namespace <#= Namespace #>
{
<#
    var entitySetName = ModelMetadata.EntitySetName;
    var entitySetVar = ModelVariable ?? (String.IsNullOrEmpty(entitySetName) ? entitySetName : (entitySetName.Substring(0, length:1).ToLowerInvariant() + entitySetName.Substring(1)));
    var modelTypeName = UseViewModel ? ViewModelTypeName : ModelTypeName;
    var relatedProperties = ModelMetadata.RelatedEntities.ToDictionary(item => item.AssociationPropertyName);
#>
    public class <#= ModelTypeName #>Service : IDisposable
    {
        private <#= ContextTypeName #> db;

        public <#= ModelTypeName #>Service(<#= ContextTypeName #> db)
        {
            this.db = db;
        }

        public IEnumerable<ProductViewModel> Read()
        {
<# if(UseViewModel) { #>
            return db.<#= entitySetName #>.Select(c => new <#= ViewModelTypeName #>
            {
<# var last = ViewModelTypeChildren.Item(ViewModelTypeChildren.Count);#>
<# foreach (EnvDTE.CodeElement child in ViewModelTypeChildren) { 
    if (child.Equals(last)) { #>
                    <#= child.Name #> = c.<#= child.Name #>
<# } else { #>
                    <#= child.Name #> = c.<#= child.Name #>,
<# } } #>
            });
<# } else { #>
            return db.<#= entitySetName #>;  
<# } #>
        }

        public void Dispose()
        {
            db.Dispose();
        }
    }

    public class <#= ControllerName #> : Controller
    {
        private <#= ModelTypeName #>Service <#= ModelVariable #>Service;

        public <#= ControllerName #>()
        {
            <#= ModelVariable #>Service = new <#= ModelTypeName #>Service(new <#= ContextTypeName #>());
        }

        protected override void Dispose(bool disposing)
        {
            <#= ModelVariable #>Service.Dispose();

            base.Dispose(disposing);
        }

        public ActionResult <#= ViewPrefix #>Index()
        {
            return View(<#= ModelVariable #>Service.Read());
        }
<# if(EditableCreate) { #>

        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult <#= entitySetName #>_Create(<#= modelTypeName #> <#= ModelVariable #>)
        {
            if (ModelState.IsValid)
            {
<# if(UseViewModel) { #>
                var entity = new <#= ModelTypeName #>
                {
<#
PushIndent(new string(' ', 20));
    if(UseViewModel) {
        ListViewModelEntityProperties();
    } else {
        ListModelEntityProperties();
    }
ClearIndent();
#>
                };
<# } else { #>

<# } #>

                db.<#= entitySetName #>.Add(entity);
                db.SaveChanges();

                <#= ModelVariable #>.<#= PrimaryKeyName #> = entity.<#= PrimaryKeyName #>;

                RouteValueDictionary routeValues = this.GridRouteValues();
                return RedirectToAction("Index", routeValues);
            }

            
        }
<# } #>      
<# if(EditableUpdate) { #>

        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult <#= entitySetName #>_Update(<#= modelTypeName #> <#= ModelVariable #>)
        {
        }
<# } #>   
<# if(EditableDestroy) { #>

        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult <#= entitySetName #>_Destroy(int idto)
        {
        }
<# } #>   
    }
}
<#+
    private void ListModelEntityProperties()
    {
        IEnumerable<PropertyMetadata> properties = ModelMetadata.Properties;
        var last = properties.Last();
        foreach (PropertyMetadata property in properties) {
            if (property.Scaffold && !property.IsPrimaryKey && !property.IsForeignKey) {
                if (property.Equals(last)) {
#>
<#= property.PropertyName #> = <#= ModelVariable #>.<#= property.PropertyName #>
<#+ } else { #>
<#= property.PropertyName #> = <#= ModelVariable #>.<#= property.PropertyName #>,
<#+
                }
            }
        }
    }
#>
<#+  
    private void ListViewModelEntityProperties()
    {
        var last = ViewModelTypeChildren.Item(ViewModelTypeChildren.Count);
        foreach (EnvDTE.CodeElement child in ViewModelTypeChildren) { 
            PropertyMetadata property = ModelMetadata.Properties.FirstOrDefault(p => p.PropertyName == child.Name);
            if (property.Scaffold && !property.IsPrimaryKey && !property.IsForeignKey) {
                if (child.Equals(last)) {
#>
<#= child.Name #> = <#= ModelVariable #>.<#= child.Name #>
<#+ } else { #>
<#= child.Name #> = <#= ModelVariable #>.<#= child.Name #>,
<#+
              }
            }  
        } 
    }
#>