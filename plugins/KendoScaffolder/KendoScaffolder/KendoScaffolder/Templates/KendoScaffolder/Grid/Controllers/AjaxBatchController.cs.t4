﻿<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ include file="ImportsGridController.include.t4" #>
<#
string routePrefix;
if (String.IsNullOrEmpty(AreaName)) 
{
    routePrefix = ControllerRootName;
}
else
{
    routePrefix = AreaName + "/" + ControllerRootName;
}
#>
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
using Kendo.Mvc.Extensions;
using Kendo.Mvc.UI;
<# foreach (var namespaceName in RequiredNamespaces) { #>
using <#= namespaceName #>;
<# } #>

namespace <#= Namespace #>
{
<#
    var entitySetName = ModelMetadata.EntitySetName;
    var entitySetVar = ModelVariable ?? (String.IsNullOrEmpty(entitySetName) ? entitySetName : (entitySetName.Substring(0, length:1).ToLowerInvariant() + entitySetName.Substring(1)));
    var modelTypeName = UseViewModel ? ViewModelTypeName : ModelTypeName;
#>
    public class <#= ControllerName #> : Controller
    {
        private <#= ContextTypeName #> db = new <#= ContextTypeName #>();

        public ActionResult <#= ViewPrefix #>Index()
        {
            return View();
        }

        public ActionResult <#= entitySetName #>_Read([DataSourceRequest]DataSourceRequest request)
        {
            IQueryable<<#= ModelTypeName #>> <#= entitySetName.ToLower() #> = db.<#= entitySetName #>;
<# if(UseViewModel) { #>
            DataSourceResult result = <#= entitySetName.ToLower() #>.ToDataSourceResult(request, c => new <#= ViewModelTypeName #> 
            {
<# var last = ViewModelTypeChildren.Item(ViewModelTypeChildren.Count);#>
<# foreach (EnvDTE.CodeElement child in ViewModelTypeChildren) { 
    if (child.Equals(last)) { #>
                <#= child.Name #> = c.<#= child.Name #>
<# } else { #>
                <#= child.Name #> = c.<#= child.Name #>,
<# } } #>
            });
<# } else { #>
            DataSourceResult result = <#= entitySetName.ToLower() #>.ToDataSourceResult(request, <#= ModelVariable #> => new {
                <#= PrimaryKeyName #> = <#= ModelVariable #>.<#= PrimaryKeyName #>,
<#
PushIndent(new string(' ', 16));
ListModelEntityProperties();
ClearIndent();
#>
            });
<# } #>

            return Json(result);
        }
<# if(EditableCreate) { #>

        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult <#= entitySetName #>_Create([DataSourceRequest]DataSourceRequest request, [Bind(Prefix = "models")]IEnumerable<<#= modelTypeName #>> <#= entitySetName.ToLower() #>)
        {
            var entities = new List<<#= ModelTypeName #>>();
            if (<#= entitySetName.ToLower() #> != null && ModelState.IsValid)
            {
                foreach(var <#= ModelVariable #> in <#= entitySetName.ToLower() #>)
                {
                    var entity = new <#= ModelTypeName #>
                    {
<#
PushIndent(new string(' ', 28));
if(UseViewModel) {
    ListViewModelEntityProperties();
} else {
    ListModelEntityProperties();
}
ClearIndent();
#>
                    };

                    db.<#= entitySetName #>.Add(entity);
                    entities.Add(entity);
                }
                db.SaveChanges();
            }

<# if(UseViewModel) { #>
            return Json(entities.ToDataSourceResult(request, ModelState, <#= ModelVariable #> => new <#= modelTypeName #>
            {
<#
PushIndent(new string(' ', 16));
ListViewModelEntityProperties();
ClearIndent();
#>
            }));
<# } else { #>
            return Json(entities.ToDataSourceResult(request, ModelState));
<# } #>
        }
<# } #>
<# if(EditableUpdate) { #>

        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult <#= entitySetName #>_Update([DataSourceRequest]DataSourceRequest request, [Bind(Prefix = "models")]IEnumerable<<#= modelTypeName #>> <#= entitySetName.ToLower() #>)
        {
            var entities = new List<<#= ModelTypeName #>>();
            if (<#= entitySetName.ToLower() #> != null && ModelState.IsValid)
            {
                foreach(var <#= ModelVariable #> in <#= entitySetName.ToLower() #>)
                {
                    var entity = new <#= ModelTypeName #>
                    {
                        <#= PrimaryKeyName #> = <#= ModelVariable #>.<#= PrimaryKeyName #>,
<#
PushIndent(new string(' ', 24));
if(UseViewModel) {
    ListViewModelEntityProperties();
} else {
    ListModelEntityProperties();
}
ClearIndent();
#>
                    };

                    entities.Add(entity);
                    db.<#= entitySetName #>.Attach(entity);
                    db.Entry(entity).State = EntityState.Modified;                        
                }
                db.SaveChanges();
            }

<# if(UseViewModel) { #>
            return Json(entities.ToDataSourceResult(request, ModelState, <#= ModelVariable #> => new <#= modelTypeName #>
            {
<#
PushIndent(new string(' ', 16));
ListViewModelEntityProperties();
ClearIndent();
#>
            }));
<# } else { #>
            return Json(entities.ToDataSourceResult(request, ModelState));
<# } #>
        } 
<# } #>
<# if(EditableDestroy) { #>

        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult <#= entitySetName #>_Destroy([DataSourceRequest]DataSourceRequest request, [Bind(Prefix = "models")]IEnumerable<<#= modelTypeName #>> <#= entitySetName.ToLower() #>)
        {
            var entities = new List<<#= ModelTypeName #>>();
            if (ModelState.IsValid)
            {
                foreach(var <#= ModelVariable #> in <#= entitySetName.ToLower() #>)
                {
                    var entity = new <#= ModelTypeName #>
                    {
                        <#= PrimaryKeyName #> = <#= ModelVariable #>.<#= PrimaryKeyName #>,
<#
PushIndent(new string(' ', 24));
if(UseViewModel) {
    ListViewModelEntityProperties();
} else {
    ListModelEntityProperties();
}
ClearIndent();
#>
                    };

                    entities.Add(entity);
                    db.<#= entitySetName #>.Attach(entity);
                    db.<#= entitySetName #>.Remove(entity);
                }
                db.SaveChanges();
            }

<# if(UseViewModel) { #>
            return Json(entities.ToDataSourceResult(request, ModelState, <#= ModelVariable #> => new <#= modelTypeName #>
            {
<#
PushIndent(new string(' ', 16));
ListViewModelEntityProperties();
ClearIndent();
#>
            }));
<# } else { #>
            return Json(entities.ToDataSourceResult(request, ModelState));
<# } #>
        }
<# } #>

        protected override void Dispose(bool disposing)
        {
            db.Dispose();
            base.Dispose(disposing);
        }
    }
}
<#+
    private void ListModelEntityProperties()
    {
        IEnumerable<PropertyMetadata> properties = ModelMetadata.Properties;
        var last = properties.Last();
        foreach (PropertyMetadata property in properties) {
            if (property.Scaffold && !property.IsPrimaryKey && !property.IsForeignKey && !property.IsAssociation) {
                if (property.Equals(last)) {
#>
<#= property.PropertyName #> = <#= ModelVariable #>.<#= property.PropertyName #>
<#+ } else { #>
<#= property.PropertyName #> = <#= ModelVariable #>.<#= property.PropertyName #>,
<#+
                }
            }
        }
    }
#>
<#+  
    private void ListViewModelEntityProperties()
    {
        var last = ViewModelTypeChildren.Item(ViewModelTypeChildren.Count);
        foreach (EnvDTE.CodeElement child in ViewModelTypeChildren) { 
            PropertyMetadata property = ModelMetadata.Properties.FirstOrDefault(p => p.PropertyName == child.Name);
            if (property.Scaffold && !property.IsPrimaryKey && !property.IsForeignKey) {
                if (child.Equals(last)) {
#>
<#= child.Name #> = <#= ModelVariable #>.<#= child.Name #>
<#+ } else { #>
<#= child.Name #> = <#= ModelVariable #>.<#= child.Name #>,
<#+
              }
            }  
        } 
    }
#>