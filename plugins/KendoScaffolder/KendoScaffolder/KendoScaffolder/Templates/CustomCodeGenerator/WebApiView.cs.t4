﻿<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ include file="ImportsGridView.include.t4" #>
<#
    var entitySetName = ModelMetadata.EntitySetName;
    var batchEditMode = "InCell";
#>
@* Important! Register the following route if it's not existing in the RouteTable
config.Routes.MapHttpRoute(
    name: "DefaultApi",
    routeTemplate: "api/{controller}/{id}",
    defaults: new { id = RouteParameter.Optional }
);
*@

@(Html.Kendo().Grid<<#= ViewDataTypeName #>>()
      .Name("grid")
      .Columns(columns =>
      {
<#
IEnumerable<PropertyMetadata> properties = ModelMetadata.Properties;
foreach (PropertyMetadata property in properties) {
    if (property.Scaffold && !property.IsPrimaryKey && !property.IsForeignKey) {
#>
<#
        if (property.IsAssociation) { continue; }
            if (UseViewModel) {
                foreach (EnvDTE.CodeElement child in ViewModelTypeChildren) { 
                    if(child.Name.Equals(property.PropertyName)) {
#>
        columns.Bound(c => c.<#= property.PropertyName#>).Width(140);
<#
                        break;
                    }
                }  
            }  else {
#>
        columns.Bound(c => c.<#= property.PropertyName#>).Width(140);
<#
            }
    }
}
if(Editable) {
#>
        columns.Command(command => { <# if (EditMode != batchEditMode) { #> command.Edit(); <# } #> <# if (EditableDestroy) { #> command.Destroy(); <# } #> }).Width(172);
<#
}
#>
      })
<#
if(Editable) {
        if(EditableCreate || EditMode.Equals(batchEditMode)) {
#>
      .ToolBar(toolbar => {
<#
        if(EditableCreate){
#>
            toolbar.Create();
<#
        }
        if(EditMode.Equals(batchEditMode)){
#>
            toolbar.Save();
<#
        }
#>
      }) 
<#       
    }
#>
      .Editable(editable => editable.Mode(GridEditMode.<#= EditMode #>))
<#
}
#>
      .Pageable()
      .DataSource(dataSource => dataSource
          .WebApi()
          .Model(model => model.Id(p => p.<#= PrimaryKeyName #>))
          .Read(read => read.Url(Url.HttpRouteUrl("DefaultApi", new { controller = "<#= entitySetName #>" })))
          //.Read(read => read.Url(Url.Content("~/api/<#= entitySetName #>")))
<#
if(Editable) {
    if(EditableCreate) {
#>
          .Create(create => create.Url(Url.HttpRouteUrl("DefaultApi", new { controller = "<#= entitySetName #>" })))  
          //.Create(create => create.Url(Url.Content("~/api/<#= entitySetName #>")))
<#
    }
    if(EditableUpdate) {
#>
          .Update(update => update.Url(Url.HttpRouteUrl("DefaultApi", new { controller = "<#= entitySetName #>", id = "{0}" })))
          //.Update(update => update.Url(Url.Content("~/api/<#= entitySetName #>/{0}")))
<#
    }
    if(EditableDestroy) {
#>
          .Destroy(destroy => destroy.Url(Url.HttpRouteUrl("DefaultApi", new { controller = "<#= entitySetName #>", id = "{0}" })))
          //.Destroy(destroy => destroy.Url(Url.Content("~/api/<#= entitySetName #>/{0}")))
<#
    }
}
#>
      )
)