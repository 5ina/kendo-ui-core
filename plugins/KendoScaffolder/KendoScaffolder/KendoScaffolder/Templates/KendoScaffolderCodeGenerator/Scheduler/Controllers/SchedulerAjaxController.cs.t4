﻿<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ include file="ImportsSchedulerController.include.t4" #>
<#
string routePrefix;
if (String.IsNullOrEmpty(AreaName)) 
{
    routePrefix = ControllerRootName;
}
else
{
    routePrefix = AreaName + "/" + ControllerRootName;
}
#>
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
using Kendo.Mvc.Extensions;
using Kendo.Mvc.UI;
<# foreach (var namespaceName in RequiredNamespaces) { #>
using <#= namespaceName #>;
<# } #>

namespace <#= Namespace #>
{
<#
    var entitySetName = ModelMetadata.EntitySetName;
    var entitySetVar = ModelVariable ?? (String.IsNullOrEmpty(entitySetName) ? entitySetName : (entitySetName.Substring(0, length:1).ToLowerInvariant() + entitySetName.Substring(1)));
#>
    public class <#= ControllerName #> : Controller
    {
        private <#= ContextTypeName #> db = new <#= ContextTypeName #>();

        public ActionResult <#= ViewPrefix #><#= ViewName #>()
        {
            return View();
        }

<# if(PdfExport) { #>
        public ActionResult Pdf_Export_Save(string contentType, string base64, string fileName)
        {
            var fileContents = Convert.FromBase64String(base64);

            return File(fileContents, contentType, fileName);
        }
<# } #>

        public ActionResult <#= entitySetName #>_Read([DataSourceRequest] DataSourceRequest request)
        {
            var data = db.<#= entitySetName #>.ToList()
                        .Select(<#= ModelVariable #> => new <#= WidgetViewModelName #>(<#= ModelVariable #>))
                        .AsQueryable();

            return Json(data.ToDataSourceResult(request));
        }

<#
    if(EditableCreate || EditableResize || EditableMove) {
#>
        public virtual JsonResult <#= entitySetName #>_Create([DataSourceRequest] DataSourceRequest request, <#= WidgetViewModelName #> <#= ModelVariable #>)
        {
            if (ModelState.IsValid)
            {
                if (string.IsNullOrEmpty( <#= ModelVariable #>.Title))
                {
                     <#= ModelVariable #>.Title = "";
                }

                var entity = <#= ModelVariable #>.ToEntity();
                db.<#= entitySetName #>.Add(entity);
                db.SaveChanges();
                <#= ModelVariable #>.<#= PrimaryKeyName #> = entity.<#= PrimaryKeyName #>;
            }

            return Json(new[] { <#= ModelVariable #> }.ToDataSourceResult(request, ModelState));
        }
<#
    }
    if(EditableUpdate || EditableResize || EditableMove) {
#>
        public virtual JsonResult <#= entitySetName #>_Update([DataSourceRequest] DataSourceRequest request, <#= WidgetViewModelName #> <#= ModelVariable #>)
        {
            if (ModelState.IsValid)
            {
                if (string.IsNullOrEmpty( <#= ModelVariable #>.Title))
                {
                     <#= ModelVariable #>.Title = "";
                }

                var entity = <#= ModelVariable #>.ToEntity();
                db.<#= entitySetName #>.Attach(entity);
                db.Entry(entity).State = EntityState.Modified;
                db.SaveChanges();
            }

            return Json(new[] { <#= ModelVariable #> }.ToDataSourceResult(request, ModelState));
        }
<#
    }
    if(EditableDestroy) {
#>
        public virtual JsonResult <#= entitySetName #>_Destroy([DataSourceRequest] DataSourceRequest request, <#= WidgetViewModelName #> <#= ModelVariable #>)
        {
            if (ModelState.IsValid)
            {
                var entity = <#= ModelVariable #>.ToEntity();
                db.<#= entitySetName #>.Attach(entity);
                db.<#= entitySetName #>.Remove(entity);
                db.SaveChanges();
            }

            return Json(new[] { <#= ModelVariable #> }.ToDataSourceResult(request, ModelState));
        }
<#
    }
#>

        protected override void Dispose(bool disposing)
        {
            db.Dispose();
            base.Dispose(disposing);
        }
    }
}