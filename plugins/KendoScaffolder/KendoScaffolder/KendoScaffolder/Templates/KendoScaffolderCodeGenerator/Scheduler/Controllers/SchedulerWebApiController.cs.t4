﻿<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ include file="ImportsSchedulerController.include.t4" #>
<#
string routePrefix;
if (String.IsNullOrEmpty(AreaName)) 
{
    routePrefix = ControllerRootName;
}
else
{
    routePrefix = AreaName + "/" + ControllerRootName;
}
#>
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web;
using System.Web.Http;
using System.Web.Mvc;
using Kendo.Mvc.UI;
using Kendo.Mvc.Extensions;
<# foreach (var namespaceName in RequiredNamespaces) { #>
using <#= namespaceName #>;
<# } #>

namespace <#= Namespace #>
{
<#
    var entitySetName = ModelMetadata.EntitySetName;
    var entitySetVar = ModelVariable ?? (String.IsNullOrEmpty(entitySetName) ? entitySetName : (entitySetName.Substring(0, length:1).ToLowerInvariant() + entitySetName.Substring(1)));
#>
    public class <#= ControllerName #> : Controller
    {
        public ActionResult <#= ViewPrefix #>Index()
        {
            return View();
        }

<# if(PdfExport) { #>

        public ActionResult Pdf_Export_Save(string contentType, string base64, string fileName)
        {
            var fileContents = Convert.FromBase64String(base64);

            return File(fileContents, contentType, fileName);
        }
<# } #>
    }

    public class <#= entitySetName #>Controller : ApiController
    {
        private <#= ContextTypeName #> db = new <#= ContextTypeName #>();

        public DataSourceResult Get<#= entitySetName #>([System.Web.Http.ModelBinding.ModelBinder(typeof(WebApiDataSourceRequestModelBinder))]DataSourceRequest request)
        {
            return db.<#= entitySetName #>.ToList()
                        .Select(<#= ModelVariable #> => new <#= WidgetViewModelName #>(<#= ModelVariable #>))
                        .AsQueryable()
                        .ToDataSourceResult(request);
        }

        public <#= WidgetViewModelName #> Get<#= WidgetViewModelName #>(int id)
        {
            <#= ModelTypeName #> <#= ModelVariable #> = db.<#= entitySetName #>.Find(id);
            if(<#= ModelVariable #> == null)
            {
                throw new HttpResponseException(Request.CreateResponse(HttpStatusCode.NotFound));
            }

            return new <#= WidgetViewModelName #>(<#= ModelVariable #>);
        }

<#
    if(EditableCreate || EditableResize || EditableMove) {
#>
        public HttpResponseMessage Post<#= ModelTypeName #>(<#= WidgetViewModelName #> <#= ModelVariable #>)
        {
            if (ModelState.IsValid)
            {
                if (string.IsNullOrEmpty( <#= ModelVariable #>.Title))
                {
                     <#= ModelVariable #>.Title = "";
                }

                var entity = <#= ModelVariable #>.ToEntity();
                db.<#= entitySetName #>.Add(entity);
                db.SaveChanges();
                <#= ModelVariable #>.<#= PrimaryKeyName #> = entity.<#= PrimaryKeyName #>;

                DataSourceResult result = new DataSourceResult
                {
                    Data = new[] { <#= ModelVariable #> },
                    Total = 1
                };

                HttpResponseMessage response = Request.CreateResponse(HttpStatusCode.Created, result);
                response.Headers.Location = new Uri(Url.Link("DefaultApi", new { id = <#= ModelVariable #>.<#= PrimaryKeyName #> }));

                return response;
            }

            return Request.CreateErrorResponse(HttpStatusCode.BadRequest, ModelState);
        }
<#
    }
    if(EditableUpdate || EditableResize || EditableMove) {
#>
        public HttpResponseMessage Put<#= ModelTypeName #>(<#= PrimaryKeyType #> id, <#= WidgetViewModelName #> <#= ModelVariable #>)
        {
            if (!ModelState.IsValid)
            {
                return Request.CreateErrorResponse(HttpStatusCode.BadRequest, ModelState);
            }

            if (id != <#= ModelVariable #>.<#= PrimaryKeyName #>)
            {
                return Request.CreateResponse(HttpStatusCode.BadRequest);
            }

            try
            {
                if (string.IsNullOrEmpty( <#= ModelVariable #>.Title))
                {
                     <#= ModelVariable #>.Title = "";
                }

                var entity = <#= ModelVariable #>.ToEntity();
                db.<#= entitySetName #>.Attach(entity);
                db.Entry(entity).State = EntityState.Modified;
                db.SaveChanges();
            }
            catch (DbUpdateConcurrencyException ex)
            {
                return Request.CreateErrorResponse(HttpStatusCode.NotFound, ex);
            }

            return Request.CreateResponse(HttpStatusCode.OK);
        }
<#
    }
    if(EditableDestroy) {
#>
        public HttpResponseMessage Delete<#= ModelTypeName #>(int id)
        {
            if (ModelState.IsValid)
            {
                var entity = db.<#= entitySetName #>.Find(id);

                if (entity == null)
                {
                    return Request.CreateResponse(HttpStatusCode.NotFound);
                }

                db.<#= entitySetName #>.Remove(entity);
                db.SaveChanges();
            }

            return Request.CreateResponse(HttpStatusCode.OK);
        }
<#
    }
#>

        protected override void Dispose(bool disposing)
        {
            db.Dispose();
            base.Dispose(disposing);
        }
    }
}