﻿<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ include file="ImportsSchedulerController.include.t4" #>
<#
string routePrefix;
if (String.IsNullOrEmpty(AreaName)) 
{
    routePrefix = ControllerRootName;
}
else
{
    routePrefix = AreaName + "/" + ControllerRootName;
}
#>
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web;
using System.Web.Http;
using System.Web.Mvc;
using Kendo.Mvc.UI;
using Kendo.Mvc.Extensions;
<# foreach (var namespaceName in RequiredNamespaces) { #>
using <#= namespaceName #>;
<# } #>

namespace <#= Namespace #>
{
<#
    var entitySetName = ModelMetadata.EntitySetName;
    var entitySetVar = ModelVariable ?? (String.IsNullOrEmpty(entitySetName) ? entitySetName : (entitySetName.Substring(0, length:1).ToLowerInvariant() + entitySetName.Substring(1)));
#>
    public class <#= ControllerName #> : Controller
    {
        public ActionResult <#= ViewPrefix #>Index()
        {
            return View();
        }

<# if(PdfExport) { #>

        public ActionResult Pdf_Export_Save(string contentType, string base64, string fileName)
        {
            var fileContents = Convert.FromBase64String(base64);

            return File(fileContents, contentType, fileName);
        }
<# } #>
    }

    public class <#= entitySetName #>Controller : ApiController
    {
        private <#= ContextTypeName #> db = new <#= ContextTypeName #>();

        public DataSourceResult Get<#= entitySetName #>([System.Web.Http.ModelBinding.ModelBinder(typeof(WebApiDataSourceRequestModelBinder))]DataSourceRequest request)
        {
            return db.<#= entitySetName #>.Select(<#= entitySetName.ToLower() #> => new <#= WidgetViewModelName #>
            {
                <#= PrimaryKeyName #> = <#= entitySetName.ToLower() #>.<#= PrimaryKeyName #>,
                Title = <#= entitySetName.ToLower() #>.<#= SelectedEventTitleField #>,
                Start = DateTime.SpecifyKind(<#= entitySetName.ToLower() #>.<#= SelectedEventStartField #>, DateTimeKind.Utc),
                End = DateTime.SpecifyKind(<#= entitySetName.ToLower() #>.<#= SelectedEventEndField #>, DateTimeKind.Utc),
                StartTimezone = <#= entitySetName.ToLower() #>.<#= SelectedEventStartTimezoneField #>,
                EndTimezone = <#= entitySetName.ToLower() #>.<#= SelectedEventEndTimezoneField #>,
                Description = <#= entitySetName.ToLower() #>.<#= SelectedEventDescriptionField #>,
                IsAllDay = <#= entitySetName.ToLower() #>.<#= SelectedEventIsAllDayField #>,
                RecurrenceRule = <#= entitySetName.ToLower() #>.<#= SelectedEventRecurrenceRuleField #>,
                RecurrenceException = <#= entitySetName.ToLower() #>.<#= SelectedEventRecurrenceExceptionField #>,
                RecurrenceID = <#= entitySetName.ToLower() #>.<#= SelectedEventRecurrenceIDField #>
            }).ToDataSourceResult(request);

        }

        public <#= WidgetViewModelName #> Get<#= WidgetViewModelName #>(int id)
        {
            <#= ModelTypeName #> <#= entitySetName.ToLower() #> = db.<#= entitySetName #>.Find(id);
            if(<#= entitySetName.ToLower() #> == null)
            {
                throw new HttpResponseException(Request.CreateResponse(HttpStatusCode.NotFound));
            }

            return new <#= WidgetViewModelName #>()
            {
                <#= PrimaryKeyName #> = <#= entitySetName.ToLower() #>.<#= PrimaryKeyName #>,
                Title = <#= entitySetName.ToLower() #>.<#= SelectedEventTitleField #>,
                Start = DateTime.SpecifyKind(<#= entitySetName.ToLower() #>.<#= SelectedEventStartField #>, DateTimeKind.Utc),
                End = DateTime.SpecifyKind(<#= entitySetName.ToLower() #>.<#= SelectedEventEndField #>, DateTimeKind.Utc),
                StartTimezone = <#= entitySetName.ToLower() #>.<#= SelectedEventStartTimezoneField #>,
                EndTimezone = <#= entitySetName.ToLower() #>.<#= SelectedEventEndTimezoneField #>,
                Description = <#= entitySetName.ToLower() #>.<#= SelectedEventDescriptionField #>,
                IsAllDay = <#= entitySetName.ToLower() #>.<#= SelectedEventIsAllDayField #>,
                RecurrenceRule = <#= entitySetName.ToLower() #>.<#= SelectedEventRecurrenceRuleField #>,
                RecurrenceException = <#= entitySetName.ToLower() #>.<#= SelectedEventRecurrenceExceptionField #>,
                RecurrenceID = <#= entitySetName.ToLower() #>.<#= SelectedEventRecurrenceIDField #>
            };
        }

<#
    if(EditableCreate || EditableResize || EditableMove) {
#>
        ////////////////////////
<#
    }
    if(EditableUpdate || EditableResize || EditableMove) {
#>
        ////////////////////////
<#
    }
    if(EditableDestroy) {
#>
        ////////////////////////
<#
    }
#>

        protected override void Dispose(bool disposing)
        {
            db.Dispose();
            base.Dispose(disposing);
        }
    }
}