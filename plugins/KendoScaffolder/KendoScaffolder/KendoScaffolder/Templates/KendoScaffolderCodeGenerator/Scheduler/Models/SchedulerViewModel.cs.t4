﻿<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ include file="ImportsSchedulerViewModel.include.t4" #>
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
using Kendo.Mvc.Extensions;
using Kendo.Mvc.UI;
<# foreach (var namespaceName in RequiredNamespaces) { #>
using <#= namespaceName #>;
<# } #>

namespace <#= Namespace #>
{
    public class <#= WidgetViewModelName #>: ISchedulerEvent
    {
        public <#= WidgetViewModelName #>()
        {
        }

        public <#= WidgetViewModelName #>(<#= ModelTypeName #> <#= ModelVariable #>)
        {
                <#= PrimaryKeyName #> = <#= ModelVariable #>.<#= PrimaryKeyName #>;
                Title = <#= ModelVariable #>.<#= SelectedEventTitleField #>;
                Start = DateTime.SpecifyKind(<#= ModelVariable #>.<#= SelectedEventStartField #>, DateTimeKind.Utc);
                End = DateTime.SpecifyKind(<#= ModelVariable #>.<#= SelectedEventEndField #>, DateTimeKind.Utc);
                StartTimezone = <#= ModelVariable #>.<#= SelectedEventStartTimezoneField #>;
                EndTimezone = <#= ModelVariable #>.<#= SelectedEventEndTimezoneField #>;
                Description = <#= ModelVariable #>.<#= SelectedEventDescriptionField #>;
                IsAllDay = <#= ModelVariable #>.<#= SelectedEventIsAllDayField #>;
                RecurrenceRule = <#= ModelVariable #>.<#= SelectedEventRecurrenceRuleField #>;
                RecurrenceException = <#= ModelVariable #>.<#= SelectedEventRecurrenceExceptionField #>;
                RecurrenceID = <#= ModelVariable #>.<#= SelectedEventRecurrenceIDField #>;
        }

        public <#= PrimaryKeyType #> <#= PrimaryKeyName #> { get; set; }
        public string Title { get; set; }
        public string Description { get; set; }

        private DateTime start;
        public DateTime Start
        {
            get
            {
                return start;
            }
            set
            {
                start = value.ToUniversalTime();
            }
        }

        private DateTime end;
        public DateTime End
        {
            get
            {
                return end;
            }
            set
            {
                end = value.ToUniversalTime();
            }
        }

        public string StartTimezone { get; set; }
        public string EndTimezone { get; set; }

        public string RecurrenceRule { get; set; }
        public <#= RecurrenceIDType #> RecurrenceID { get; set; }
        public string RecurrenceException { get; set; }
        public bool IsAllDay { get; set; }

<# if(UseResources) { #>
        public <#= SelectedModelResourceFieldType #> <#= SelectedModelResourceField #> { get; set; }
<# } #>

        public <#= ModelTypeName #> ToEntity()
        {
            return new <#= ModelTypeName #>
            {
                <#= PrimaryKeyName #> = <#= PrimaryKeyName #>,
                <#= SelectedEventTitleField #> = Title,
                <#= SelectedEventStartField #> = Start,
                <#= SelectedEventEndField #> = End,
                <#= SelectedEventStartTimezoneField #> = StartTimezone,
                <#= SelectedEventEndTimezoneField #> = EndTimezone,
                <#= SelectedEventDescriptionField #> = Description,
                <#= SelectedEventIsAllDayField #> = IsAllDay,
                <#= SelectedEventRecurrenceRuleField #> = RecurrenceRule,
                <#= SelectedEventRecurrenceExceptionField #> = RecurrenceException,
                <#= SelectedEventRecurrenceIDField #> = RecurrenceID
            };
        }
    }
}
