<#@ template language="C#" HostSpecific="True"#>
<#@ output extension=".cshtml"#>
<#@include file="..\ImportsGridView.include.t4"#>
<#
    var entitySetName = ModelMetadata.EntitySetName;
    var batchEditMode = "InCell";
#>
@(Html.Kendo().Grid<<#= ViewDataTypeName #>>()
      .Name("grid")
      .Columns(columns =>
      {
<#
IEnumerable<PropertyMetadata> properties = ModelMetadata.Properties;
foreach (PropertyMetadata property in properties) {
    if (property.Scaffold && !property.IsPrimaryKey && !property.IsForeignKey) {
#>
<#
        if (property.IsAssociation) { continue; }
            if (UseViewModel) {
                foreach (EnvDTE.CodeElement child in ViewModelTypeChildren) {
                    if(child.Name.Equals(property.PropertyName)) {
#>
        columns.Bound(c => c.<#= property.PropertyName#>);
<#
                        break;
                    }
                }
            }  else {
#>
        columns.Bound(c => c.<#= property.PropertyName#>);
<#
            }
    }
}
if(Editable && (EditableCreate || EditableUpdate || EditableDestroy)) {
#>
        columns.Command(command => {<# if (EditMode != batchEditMode && (EditableCreate||EditableUpdate)) { #> command.Edit(); <# } #><# if (EditableDestroy) { #>command.Destroy(); <# } #>}).Width(180);
<#
}
#>
      })
<#
if(EditableCreate || ExcelExport || PdfExport) {
#>
      .ToolBar(toolbar => {
<#
        if(EditableCreate){
#>
            toolbar.Create();
<#
        }
        if(Editable && EditMode.Equals(batchEditMode)){
#>
            toolbar.Save();
<#
        }
        if(ExcelExport) {
#>
            toolbar.Excel();
<#
        }
        if(PdfExport) {
#>
            toolbar.Pdf();
<#
        }
#>
      })
<#
    }
    if(ColumnMenu) {
#>
      .ColumnMenu()
<#
    }
    if(Editable){
#>
      .Editable(editable => editable.Mode(GridEditMode.<#= EditMode #>))
<#
    }
    if(Pageable){
#>
      .Pageable()
<#
    }
    if(Navigatable){
#>
      .Navigatable()
<#
    }
    if(Selectable){
#>
      .Selectable(selectable => {
            selectable.Mode(GridSelectionMode.<#= SelectionMode #>);
            selectable.Type(GridSelectionType.<#= SelectionType #>);
      })
<#
    }
    if(Sortable) {
#>
      .Sortable(sortable => {
          sortable.SortMode(GridSortMode.<#= SortMode #>);
<#
        if(!AllowUnsort){
#>
          sortable.AllowUnsort(false);
<#
        }
#>
      })
<#
    }
    if(Filterable){
#>
      .Filterable(<# if (FilterMode.ToString() == "Row") { #>filterable => filterable.Mode(GridFilterMode.Row)<# } #>)
<#
    }
#>
      .Scrollable(<# if(!Scrollable) { #>scrollable => scrollable.Enabled(false)<# } #>)
<#
    if(GridEvents.Count > 0){
#>
      .Events(events => {
<#
       foreach (string ev in GridEvents)
       {
#>
            events.<#= ev #>("on<#= ev #>");
<#
       }
#>
      })
<#
    }
#>
      .DataSource(dataSource => dataSource
          .Ajax()
<#
if(!ServerOperation){
#>
          .ServerOperation(false)
<#
}
if(Editable) {
   if(EditMode.Equals(batchEditMode)) {
#>
          .Batch(true)
<#
}
#>
          .Model(model => model.Id(p => p.<#= PrimaryKeyName #>))
<#
}
#>
          .Read(read => read.Action("<#= entitySetName #>_Read", "<#= ControllerRootName #>"))
<#
if(Editable) {
    if(EditableCreate) {
#>
          .Create(create => create.Action("<#= entitySetName #>_Create", "<#= ControllerRootName #>"))
<#
    }
    if(EditableUpdate) {
#>
          .Update(update => update.Action("<#= entitySetName #>_Update", "<#= ControllerRootName #>"))
<#
    }
    if(EditableDestroy) {
#>
          .Destroy(destroy => destroy.Action("<#= entitySetName #>_Destroy", "<#= ControllerRootName #>"))
<#
    }
}
#>
      )
)
<# if(GridEvents.Count > 0){ #>

<script>

<#
    foreach (string ev in GridEvents)
    {
#>
    function on<#= ev #>(e){
        //Implement the event handler for <#= ev #>
    }

<#
    }
#>
</script>
<# } #>
