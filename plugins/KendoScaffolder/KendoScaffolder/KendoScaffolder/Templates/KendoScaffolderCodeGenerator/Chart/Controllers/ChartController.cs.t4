﻿<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ include file="ImportsChartController.include.t4" #>
<#
string routePrefix;
if (String.IsNullOrEmpty(AreaName)) 
{
    routePrefix = ControllerRootName;
}
else
{
    routePrefix = AreaName + "/" + ControllerRootName;
}
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Web;
using System.Web.Mvc;
<# foreach (var namespaceName in RequiredNamespaces) { #>
using <#= namespaceName #>;
<# } #>


namespace <#= Namespace #>
{
<#
    var entitySetName = ModelMetadata.EntitySetName;
    var entitySetVar = ModelVariable ?? (String.IsNullOrEmpty(entitySetName) ? entitySetName : (entitySetName.Substring(0, length:1).ToLowerInvariant() + entitySetName.Substring(1)));
    var modelTypeName = UseViewModel ? ViewModelTypeName : ModelTypeName;
#>
    public class <#= ControllerName #> : Controller
    {
        private <#= ContextTypeName #> db = new <#= ContextTypeName #>();

        public ActionResult <#= ViewPrefix #><#= ViewName #>()
        {
<# if(UseRemoteBinding) { #>
            return View();
<# } else { 
if(UseViewModel) { #>
            return View(db.<#= entitySetName #>.Select(<#= ModelVariable #> => new <#= ViewModelTypeName #> {
<#
PushIndent(new string(' ', 16));
ListViewModelEntityProperties();
ClearIndent();
#>
            }));
<# } else { #>
            return View(db.<#= entitySetName #>);
<# } } #>
        }
<# if(UseRemoteBinding) { #>

        [HttpPost]
        public ActionResult <#= entitySetName #>_Read()
        {
<# if(UseViewModel) { #>
            return Json(db.<#= entitySetName #>.Select(<#= ModelVariable #> => new <#= ViewModelTypeName #> {
<#
PushIndent(new string(' ', 16));
ListViewModelEntityProperties();
ClearIndent();
#>
            }));
<# } else { #>
            return Json(db.<#= entitySetName #>.Select(<#= ModelVariable #> => new {
<#
PushIndent(new string(' ', 16));
ListModelEntityProperties();
ClearIndent();
#>
            }));
<# } #>
        }
<# } #>

        protected override void Dispose(bool disposing)
        {
            db.Dispose();
            base.Dispose(disposing);
        }
    }
}
<#+
    private void ListModelEntityProperties()
    {
        IEnumerable<PropertyMetadata> properties = ModelMetadata.Properties;
        var last = properties.Last();
        foreach (PropertyMetadata property in properties) {
            if (property.Scaffold && !property.IsPrimaryKey && !property.IsForeignKey && !property.IsAssociation) {
                if (property.Equals(last)) {
#>
<#= property.PropertyName #> = <#= ModelVariable #>.<#= property.PropertyName #>
<#+ } else { #>
<#= property.PropertyName #> = <#= ModelVariable #>.<#= property.PropertyName #>,
<#+
                }
            }
        }
    }
#>
<#+  
    private void ListViewModelEntityProperties()
    {
        var last = ViewModelTypeChildren.Item(ViewModelTypeChildren.Count);
        foreach (EnvDTE.CodeElement child in ViewModelTypeChildren) { 
            PropertyMetadata property = ModelMetadata.Properties.FirstOrDefault(p => p.PropertyName == child.Name);
            if (property.Scaffold && !property.IsPrimaryKey && !property.IsForeignKey) {
                if (child.Equals(last)) {
#>
<#= child.Name #> = <#= ModelVariable #>.<#= child.Name #>
<#+ } else { #>
<#= child.Name #> = <#= ModelVariable #>.<#= child.Name #>,
<#+
              }
            }  
        } 
    }
#>