
        /// <summary>
        /// Defines <%= series[:name] %> series bound to model member(s).
        /// </summary>
% fields.each do |field|
        /// <param name="<%= field[:expression] %>">
        /// The expression used to extract the <%= field[:description] %> from the model.
        /// </param>
% end
        public virtual ChartSeriesBuilder<T>  <%= series[:type] %><<%= (unique_generic_types(fields).map { |generic| generic }).join(', ') %>>(
            <%= fields.map { |field| "Expression<Func<T, #{field[:generic]}>> #{field[:expression]}" }.join(',
            ') %>)
        {
            if (typeof(T).IsPlainType() && (<%= fields.map { |field| "!#{field[:expression]}.IsBindable()" }.join(' || ') %>))
            {
                throw new InvalidOperationException(Exceptions.MemberExpressionRequired);
            }

            var item = new ChartSeries<T>()
            {
                Chart = Chart,
                Type = "<%= series[:name] %>",
                <%= fields.map { |field|
                    "#{field[:name]} = #{field[:expression]}.MemberWithoutInstance()" }.join(',
                ')
                %>
            };

            Container.Add(item);

            return new ChartSeriesBuilder<T>(item);
        }
