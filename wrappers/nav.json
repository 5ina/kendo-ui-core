[
    {
        "text": "AutoComplete",
        "name": "autocomplete",
        "api": "web/autocomplete",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/autocomplete/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/autocomplete"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/autocomplete"
        },
        "spriteCssClass": "autoCompleteIcon",
        "items": [
            {
                "text": "Basic usage",
                "url": "autocomplete/index",
                "title": {
                    "aspnet-mvc": "Demo and source code for  Telerik ASP.NET MVC Autocomplete"
                },
                "meta": {
                    "aspnet-mvc": "See how the Telerik ASP.NET MVC Autocomplete control works and view the demo source code."
                }
            },
            {
                "text": "Server filtering",
                "url": "autocomplete/serverfiltering",
                "title": {
                    "aspnet-mvc": "Server filtering in ASP.NET MVC Autocomplete control"
                },
                "meta": {
                    "aspnet-mvc": "This demo of ASP.NET MVC Autocomplete control shows how autocomplete suggestions are given upon typing and the data is loaded from OData remote data source."
                }
            },
            {
                "text": "Virtualization",
                "url": "autocomplete/virtualization",
                "title": {
                    "aspnet-mvc": "Virtualization in ASP.NET MVC Autocomplete control"
                },
                "meta": {
                    "aspnet-mvc": "This demo of Kendo UI Autocomplete control shows how load large amount of data in the autocomplete widget"
                }
            },
            {
                "text": "Grouping",
                "url": "autocomplete/grouping",
                "title": {
                    "aspnet-mvc": "Grouping in ASP.NET MVC Autocomplete control"
                },
                "meta": {
                    "aspnet-mvc": "This demo of Kendo UI Autocomplete control shows how load grouped data in the autocomplete widget"
                }
            },
            {
                "text": "Client filtering",
                "url": "autocomplete/clientfiltering"
            },
            {
                "text": "Customizing templates",
                "url": "autocomplete/template",
                "new": true,
                "title": {
                    "aspnet-mvc": "Templates customization in ASP.NET MVC AutoComplete"
                },
                "meta": {
                    "aspnet-mvc": "With this ASP.NET MVC AutoComplete demo, you can learn how to customize the template of the control."
                }
            },
            {
                "text": "Custom data source",
                "url": "autocomplete/custom-datasource"
            },
            {
                "text": "Events",
                "url": "autocomplete/events",
                "title": {
                    "aspnet-mvc": "Events in MVC AutoComplete component | UI for ASP.NET MVC demos"
                },
                "meta": {
                    "aspnet-mvc": "Take a look at this ASP.NET MVC AutoComplete example to find out how events are triggered in the AutoComplete control."
                }
            },
            {
                "text": "API",
                "url": "autocomplete/api",
                "title": {
                    "aspnet-mvc": "Example of ASP.NET MVC Autocomplete component API"
                },
                "meta": {
                    "aspnet-mvc": "The API Functions of ASP.NET MVC Autocomplete give you the option to set a specific value, attribute a value for the string, starting with a symbol or a digit."
                }
            },
            {
                "text": "RTL support",
                "url": "autocomplete/right-to-left-support",
                "title": {
                    "aspnet-mvc": "Right-to-left support in ASP.NET MVC AutoComplete component"
                },
                "meta": {
                    "aspnet-mvc": "We will demonstrate how the right-to-left typing feature is implemented in the text input field of the ASP.NET MVC AutoComplete control."
                }
            },
            {
                "text": "Keyboard navigation",
                "url": "autocomplete/keyboard-navigation",
                "title": {
                    "aspnet-mvc": "Keyboard navigation in ASP.NET MVC AutoComplete control"
                },
                "meta": {
                    "aspnet-mvc": "Look at this ASP.NET MVC demo which illustrates how the keyboard navigation feature is supported in Telerik AutoComplete."
                }
            }
        ],
        "category": "Editors"
    },
    {
        "text": "Button",
        "name": "button",
        "api": "web/button",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/button/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/buttonw"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/button"
        },
        "spriteCssClass": "buttonIcon",
        "items": [
            {
                "text": "Basic usage",
                "url": "button/index",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Button HTMLHelper extension sample"
                },
                "meta": {
                    "aspnet-mvc": "This demo illustrates how to configure Kendo UI jQuery-based button in ASP.NET MVC."
                }
            },
            {
                "text": "Images",
                "url": "button/images",
                "title": {
                    "aspnet-mvc": "Using ASP.NET MVC Buttons with images and icons"
                },
                "meta": {
                    "aspnet-mvc": "This online demo will show you how to embed images and icons in your ASP.NET MVC Button."
                }
            },
            {
                "text": "Events",
                "url": "button/events",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Button events demo"
                },
                "meta": {
                    "aspnet-mvc": "Take a look at this ASP.NET MVC Button example to find out how events are triggered in the Button control."
                }
            },
            {
                "text": "API",
                "url": "button/api",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Button component API"
                },
                "meta": {
                    "aspnet-mvc": "See how the API functions of ASP.NET MVC Button give you the option to enable and disable it."
                }
            },
            {
                "text": "RTL support",
                "url": "button/right-to-left-support",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Button Component RTL Support Demo"
                },
                "meta": {
                    "aspnet-mvc": "We will demonstrate how the right-to-left feature is implemented in the ASP.NET MVC Button control."
                }
            },
            {
                "text": "Keyboard navigation",
                "url": "button/keyboard-navigation",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Button Control Keyboard Navigation"
                },
                "meta": {
                    "aspnet-mvc": "Look at this ASP.NET MVC demo which illustrates how the keyboard navigation feature is supported in Telerik Button."
                }
            },
            {
                "text": "Tag Helper",
                "url": "button/tag-helper",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Button Tag Helper sample"
                },
                "packages": [
                    "mvc-core"
                ]
            }
        ],
        "category": "Navigation"
    },
    {
        "text": "Calendar",
        "name": "calendar",
        "api": "web/calendar",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/calendar/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/calendar"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/calendar"
        },
        "spriteCssClass": "calendarIcon",
        "items": [
            {
                "text": "Basic usage",
                "url": "calendar/index",
                "title": {
                    "aspnet-mvc": "Example of ASP.NET MVC Calendar"
                },
                "meta": {
                    "aspnet-mvc": "Explore the example of ASP.NET MVC calendar control to find how easy it is to add a calendar to your website or web app."
                }
            },
            {
                "text": "Customizing templates",
                "url": "calendar/template",
                "title": {
                    "aspnet-mvc": "Custom templates for ASP.NET MVC Calendar | ASP.NET MVC demos"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how ASP.NET MVC Calendar allows you to customize the content in your template."
                }
            },
            {
                "text": "Disable dates",
                "url": "calendar/disable-dates",
                "title": {
                    "aspnet-mvc": "Disable dates in the ASP.NET MVC Calendar | ASP.NET MVC demos"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how ASP.NET MVC Calendar allows you to disable dates"
                }
            },
            {
                "text": "Events",
                "url": "calendar/events",
                "title": {
                    "aspnet-mvc": "Events, triggered in ASP.NET MVC Calendar | ASP.NET MVC Demos"
                },
                "meta": {
                    "aspnet-mvc": "This example of ASP.NET MVC Calendar control shows events which are available in the component."
                }
            },
            {
                "text": "API",
                "url": "calendar/api",
                "title": {
                    "aspnet-mvc": "Demo for ASP.NET MVC Calendar Control API"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how the ASP.NET MVC Calendar API works and what kind of functions it supports."
                }
            },
            {
                "text": "Globalization",
                "url": "calendar/globalization"
            },
            {
                "text": "RTL support",
                "url": "calendar/right-to-left-support",
                "title": {
                    "aspnet-mvc": "Right-to-left functionality, enabled in ASP.NET MVC Calendar"
                },
                "meta": {
                    "aspnet-mvc": "ASP.NET MVC Calendar component supports RTL functionality. Look at the demo to see how to easily apply RTL support to the control."
                }
            },
            {
                "text": "Keyboard navigation",
                "url": "calendar/keyboard-navigation",
                "title": {
                    "aspnet-mvc": "Keyboard navigation demo for ASP.NET MVC Calendar"
                },
                "meta": {
                    "aspnet-mvc": "You can easily navigate in ASP.NET MVC Calendar by using the keyboard. This demo shows the functionality, just look at the notes and play with the example."
                }
            }
        ],
        "category": "Scheduling"
    },
    {
        "text": "ColorPicker",
        "name": "colorpicker",
        "api": "web/colorpicker",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/colorpicker/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/color-picker"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/colorpicker"
        },
        "spriteCssClass": "colorPickerIcon",
        "items": [
            {
                "text": "Basic usage",
                "url": "colorpicker/index",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Color Picker extension demo"
                },
                "meta": {
                    "aspnet-mvc": "This demo illustrates the basic functionality of ASP.NET MVC HTML Helper for Kendo UI ColorPicker widget."
                }
            },
            {
                "text": "Flat color picker",
                "url": "colorpicker/flatcolorpicker",
                "title": {
                    "aspnet-mvc": "Flat color picker demo for ASP.NET MVC ColorPicker extension"
                },
                "meta": {
                    "aspnet-mvc": "This sample demonstrates how Telerik ASP.NET MVC helper could be used for your flat color picker scenario."
                }
            },
            {
                "text": "Standalone Palette",
                "url": "colorpicker/palette",
                "title": {
                    "aspnet-mvc": "Standalone Palette Demo in ASP.NET MVC ColorPicker control"
                },
                "meta": {
                    "aspnet-mvc": "In this demo you will take a look at the rich standalone palette of ASP.NET MVC ColorPicker component. Grab the source code and play with the demo!"
                }
            },
            {
                "text": "Palette presets",
                "url": "colorpicker/palette-presets",
                "title": {
                    "aspnet-mvc": "Palette presets in ASP.NET MVC ColorPicker"
                },
                "meta": {
                    "aspnet-mvc": "This example shows how to easily use  palette presents of Telerik ASP.NET MVC ColorPicker extension. Look at the code and implement it for  user scenario."
                }
            },
            {
                "text": "Keyboard support",
                "url": "colorpicker/keyboard-navigation",
                "title": {
                    "aspnet-mvc": "Keyboard support of ASP.NET MVC ColorPicker extension"
                },
                "meta": {
                    "aspnet-mvc": "This example demonstrates the keyboard support functionality of Telerik ASP.NET MVC ColorPicker control."
                }
            },
            {
                "text": "Events",
                "url": "colorpicker/events",
                "title": {
                    "aspnet-mvc": "Events in ASP.NET MVC ColorPicker control"
                },
                "meta": {
                    "aspnet-mvc": "In this example we will examine the events that are fired in ASP.NET MVC ColorPicker component."
                }
            },
            {
                "text": "API",
                "url": "colorpicker/api",
                "title": {
                    "aspnet-mvc": "API for ASP.NET MVC ColorPicker | UI for ASP.NET MVC demos"
                },
                "meta": {
                    "aspnet-mvc": "This example for using Kendo UI ColorPicker widget in ASP.NET MVC shows how you can set values, enable/disable, open/close them by using ColorPicker API."
                }
            }
        ],
        "category": "Editors"
    },
    {
        "text": "ComboBox",
        "name": "combobox",
        "api": "web/combobox",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/combobox/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/combobox"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/combobox"
        },
        "spriteCssClass": "comboBoxIcon",
        "items": [
            {
                "text": "Basic usage",
                "url": "combobox/index",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Combobox control Demo | UI for ASP.NET MVC Demos"
                },
                "meta": {
                    "aspnet-mvc": "This ASP.NET MVC Combobox UI demo shows how to easily apply an editable text box with flexible auto-searchable functionality of the dropdown list into your web app."
                }
            },
            {
                "text": "Server filtering",
                "url": "combobox/serverfiltering",
                "title": {
                    "aspnet-mvc": "Server filtering in ASP.NET MVC ComboBox"
                },
                "meta": {
                    "aspnet-mvc": "Check out this demo to see how the server filtering functionality works in ASP.NET MVC ComboBox."
                }
            },
            {
                "text": "Virtualization",
                "url": "combobox/virtualization",
                "title": {
                    "aspnet-mvc": "Virtualization in ASP.NET MVC ComboBox"
                },
                "meta": {
                    "aspnet-mvc": "Check out this demo to see how the virtualization functionality works in ASP.NET MVC ComboBox."
                }
            },
            {
                "text": "Grouping",
                "url": "combobox/grouping",
                "title": {
                    "aspnet-mvc": "Grouping in ASP.NET MVC ComboBox"
                },
                "meta": {
                    "aspnet-mvc": "Check out this demo to see how the grouping functionality works in ASP.NET MVC ComboBox."
                }
            },
            {
                "text": "Client filtering",
                "url": "combobox/clientfiltering"
            },
            {
                "text": "Customizing templates",
                "url": "combobox/template",
                "new": true,
                "title": {
                    "aspnet-mvc": "Demo for customizing ASP.NET MVC ComboBox Templates"
                },
                "meta": {
                    "aspnet-mvc": "This ASP.NET MVC ComboBox demo shows how the template of the control can be customized to change the appearance of items in the auto-searchable list."
                }
            },
            {
                "text": "Cascading ComboBox",
                "url": "combobox/cascadingcombobox",
                "title": {
                    "aspnet-mvc": "Cascading ASP.NET MVC ComboBox sample | UI for ASP.NET MVC demos"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how the cascading ASP.NET MVC ComboBox control would fit any web application or website."
                }
            },
            {
                "text": "Custom data source",
                "url": "combobox/custom-datasource"
            },
            {
                "text": "Events",
                "url": "combobox/events",
                "title": {
                    "aspnet-mvc": "Examples of events in ASP.NET MVC ComboBox component"
                },
                "meta": {
                    "aspnet-mvc": "This demo demonstrates useful events which are triggered in ASP.NET MVC ComboBox upon user's selection of an item from the drop-down list."
                }
            },
            {
                "text": "API",
                "url": "combobox/api",
                "title": {
                    "aspnet-mvc": "Demo for ASP.NET MVC ComboBox control API"
                },
                "meta": {
                    "aspnet-mvc": "This sample shows all API functions for Telerik ASP.NET MVC ComboBox control."
                }
            },
            {
                "text": "RTL support",
                "url": "combobox/right-to-left-support",
                "title": {
                    "aspnet-mvc": "Right-to-left support in ASP.NET MVC ComboBox control"
                },
                "meta": {
                    "aspnet-mvc": "Build your app with ASP.NET MVC ComboBox. This demo shows how RTL feature is supported in the component."
                }
            },
            {
                "text": "Keyboard navigation",
                "url": "combobox/keyboard-navigation",
                "title": {
                    "aspnet-mvc": "Keyboard nagivation in ASP.NET MVC ComboBox | ASP.NET MVC demos"
                },
                "meta": {
                    "aspnet-mvc": "ASP.NET MVC ComboBox control for web app development supports easy keyboard navigation. Play with the demo to explore the functionality."
                }
            }
        ],
        "category": "Editors"
    },
    {
        "text": "DatePicker",
        "name": "datepicker",
        "api": "web/datepicker",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/datepicker/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/date-time-pickers"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/datetime"
        },
        "spriteCssClass": "datePickerIcon",
        "items": [
            {
                "text": "Basic usage",
                "url": "datepicker/index",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC DatePicker sample"
                },
                "meta": {
                    "aspnet-mvc": "This example shows Telerik DatePicker basic features to select dates and times in ASP.NET MVC application."
                }
            },
            {
                "text": "Range selection",
                "url": "datepicker/rangeselection",
                "title": {
                    "aspnet-mvc": "Range selection in ASP.NET MVC DatePicker | ASP.NET MVC Demos"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how the ASP.NET MVC Datepicker component works for range selections. You can easily enable users to select a date range in a handy manner."
                }
            },
            {
                "text": "Customizing templates",
                "url": "datepicker/template",
                "title": {
                    "aspnet-mvc": "Demo for customizing the template of ASP.NET MVC DatePicker"
                },
                "meta": {
                    "aspnet-mvc": "This example demonstrates how you can use a custom template for your ASP.NET MVC DatePicker control in your web app. Easily apply a special style for your template."
                }
            },
            {
                "text": "Events",
                "url": "datepicker/events",
                "title": {
                    "aspnet-mvc": "Attach an event to ASP.NET MVC DatePicker | ASP.NET MVC Demos"
                },
                "meta": {
                    "aspnet-mvc": "This sample shows how to access the events, attached to a date, as well as use ASP.NET MVC Date Picker to pick a date or change it manually from a dropdown calendar."
                }
            },
            {
                "text": "Disable dates",
                "url": "datepicker/disable-dates",
                "title": {
                    "aspnet-mvc": "Disable dates in the ASP.NET MVC DatePicker | ASP.NET MVC demos"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how ASP.NET MVC DatePicker allows you to disable dates"
                }
            },
            {
                "text": "API",
                "url": "datepicker/api",
                "title": {
                    "aspnet-mvc": "API ASP.NET MVC Datepicker example"
                },
                "meta": {
                    "aspnet-mvc": "This example demonstrates how the API of Telerik ASP.NET MVC Datepicker can be configured to modify the features of the extension."
                }
            },
            {
                "text": "Globalization",
                "url": "datepicker/globalization"
            },
            {
                "text": "RTL support",
                "url": "datepicker/right-to-left-support",
                "title": {
                    "aspnet-mvc": "RTL support in ASP.NET MVC DatePicker control | ASP.NET MVC Demo"
                },
                "meta": {
                    "aspnet-mvc": "See how ASP.NET MVC DatePicker component supports RTL functionality."
                }
            },
            {
                "text": "Keyboard navigation",
                "url": "datepicker/keyboard-navigation",
                "title": {
                    "aspnet-mvc": "Keyboard navigation in ASP.NET MVC DatePicker"
                },
                "meta": {
                    "aspnet-mvc": "This example shows how the keyboard navigation functionality is supported in ASP.NET MVC DatePicker control."
                }
            },
            {
                "text": "Tag Helper",
                "url": "datepicker/tag-helper",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC DatePicker Tag Helper sample"
                },
                "packages": [
                    "mvc-core"
                ]
            }
        ],
        "category": "Editors"
    },
    {
        "text": "DateTimePicker",
        "name": "datetimepicker",
        "api": "web/datetimepicker",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/datetimepicker/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/date-time-pickers"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/datetime"
        },
        "spriteCssClass": "dateTimePickerIcon",
        "items": [
            {
                "text": "Basic usage",
                "url": "datetimepicker/index",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Date and Time picker example"
                },
                "meta": {
                    "aspnet-mvc": "ASP.NET MVC DateTimePicker control handles both dates and times. Learn more about the time/date selection functionality by playing with this demo."
                }
            },
            {
                "text": "Range selection",
                "url": "datetimepicker/rangeselection",
                "title": {
                    "aspnet-mvc": "Date range selection functionality in ASP.NET MVC DateTimePicker"
                },
                "meta": {
                    "aspnet-mvc": "In ASP.NET MVC DateTimePicker control, dates and times are handled in two different input boxes so that the user can easily select different date ranges."
                }
            },
            {
                "text": "Customizing templates",
                "url": "datetimepicker/template",
                "title": {
                    "aspnet-mvc": "Templates customization example | ASP.NET MVC DateTimePicker demo"
                },
                "meta": {
                    "aspnet-mvc": "This example shows how templates of ASP.NET MVC DateTimePicker control can be customized to fit your application."
                }
            },
            {
                "text": "Events",
                "url": "datetimepicker/events",
                "title": {
                    "aspnet-mvc": "Events in ASP.NET MVC Date and Timepicker component"
                },
                "meta": {
                    "aspnet-mvc": "This example shows which events are triggered when you change the date and time in ASP.NET MVC DateTimePicker component."
                }
            },
            {
                "text": "Disable dates",
                "url": "datetimepicker/disable-dates",
                "title": {
                    "aspnet-mvc": "Disable dates in the ASP.NET MVC DateTimePicker | ASP.NET MVC demos"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how ASP.NET MVC DateTImePicker allows you to disable dates"
                }
            },
            {
                "text": "API",
                "url": "datetimepicker/api",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC DateTimePicker API Demo"
                },
                "meta": {
                    "aspnet-mvc": "Play with the demo to explore ASP.NET MVC DateTimePicker API and all API functions."
                }
            },
            {
                "text": "Globalization",
                "url": "datetimepicker/globalization"
            },
            {
                "text": "RTL support",
                "url": "datetimepicker/right-to-left-support",
                "title": {
                    "aspnet-mvc": "Right-to-left support in ASP.NET MVC DateTimePicker control"
                },
                "meta": {
                    "aspnet-mvc": "Choose a date and see how the date and the time are displayed from right to left in ASP.NET MVC DateTimePicker component."
                }
            },
            {
                "text": "Keyboard navigation",
                "url": "datetimepicker/keyboard-navigation",
                "title": {
                    "aspnet-mvc": "Keyboard navigation in ASP.NET MVC DateTimePicker component"
                },
                "meta": {
                    "aspnet-mvc": "By using the keyboard, you can easily select date and time in ASP.NET MVC DateTimePicker, trigger an event or highlight a specific day."
                }
            },
            {
                "text": "Tag Helper",
                "url": "datetimepicker/tag-helper",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC DateTimePicker Tag Helper sample"
                },
                "packages": [
                    "mvc-core"
                ]
            }
        ],
        "category": "Editors"
    },
    {
        "text": "DropDownList",
        "name": "dropdownlist",
        "api": "web/dropdownlist",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/dropdownlist/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/dropdownlist"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/dropdownlist"
        },
        "spriteCssClass": "dropDownListIcon",
        "items": [
            {
                "text": "Basic usage",
                "url": "dropdownlist/index",
                "title": {
                    "aspnet-mvc": "Demo for ASP.NET MVC DropDownList control"
                },
                "meta": {
                    "aspnet-mvc": "How to easily implement an interactive DropDownlist with user-friendly UI - look at the demo and play with ASP.NET MVC DropDownList."
                }
            },
            {
                "text": "Binding to remote data",
                "url": "dropdownlist/remotedatasource",
                "title": {
                    "aspnet-mvc": "Remote Data binding demo | ASP.NET MVC DropDownList control"
                },
                "meta": {
                    "aspnet-mvc": "The dropdown list of ASP.NET MVC drop down list control can load data from a remote source. This example shows binding to remote data functionality of the component."
                }
            },
            {
                "text": "Server filtering",
                "url": "dropdownlist/serverfiltering",
                "title": {
                    "aspnet-mvc": "Example of Server filtering in Kendo UI DropDownList widget"
                },
                "meta": {
                    "aspnet-mvc": "See how the auto-searchable dropdown list of Kendo UI DropDownList is filtered on the the server based on the input."
                }
            },
            {
                "text": "Virtualization",
                "url": "dropdownlist/virtualization",
                "title": {
                    "aspnet-mvc": "Example of virtualization in Kendo UI DropDownList widget"
                },
                "meta": {
                    "aspnet-mvc": "See how the virtual dropdown list of Kendo UI DropDownList is filtered on the the server based on the input."
                }
            },
            {
                "text": "Grouping",
                "url": "dropdownlist/grouping",
                "title": {
                    "aspnet-mvc": "Example of grouping in Kendo UI DropDownList widget"
                },
                "meta": {
                    "aspnet-mvc": "See how the virtual dropdown list of Kendo UI DropDownList is grouped."
                }
            },
            {
                "text": "Client filtering",
                "url": "dropdownlist/clientfiltering"
            },
            {
                "text": "Customizing templates",
                "url": "dropdownlist/template",
                "new": true,
                "title": {
                    "aspnet-mvc": "Customize items in ASP.NET MVC DropDownList component"
                },
                "meta": {
                    "aspnet-mvc": "This example shows how you can customize the appearance of the items and easily customize templates in ASP.NET MVC DropDownList control."
                }
            },
            {
                "text": "Cascading DropDownList",
                "url": "dropdownlist/cascadingdropdownlist",
                "title": {
                    "aspnet-mvc": "Example of cascading DropDownList | ASP.NET MVC Dropdownlist Demo"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how the cascading ASP.NET MVC dropdown works in UI for ASP.NET MVC DropDownList control."
                }
            },
            {
                "text": "Custom data source",
                "url": "dropdownlist/custom-datasource"
            },
            {
                "text": "Events",
                "url": "dropdownlist/events",
                "title": {
                    "aspnet-mvc": "Demo for events in ASP.NET MVC DropDownList component"
                },
                "meta": {
                    "aspnet-mvc": "Take a look at this ASP.NET MVC DropDownList example to find out how events are triggered in the drop down listcontrol."
                }
            },
            {
                "text": "API",
                "url": "dropdownlist/api",
                "title": {
                    "aspnet-mvc": "Example of ASP.NET MVC DropDownList API"
                },
                "meta": {
                    "aspnet-mvc": "Explore API functions of ASP.NET MVC DropDownList to find how to enable or disable the dropdown list, open and close it or just manipulate the items."
                }
            },
            {
                "text": "RTL support",
                "url": "dropdownlist/right-to-left-support",
                "title": {
                    "aspnet-mvc": "RTL feature in ASP.NET MVC DropDownList"
                },
                "meta": {
                    "aspnet-mvc": "In this ASP.NET MVC demo, we illustrate how the RTL support is enabled in ASP.NET MVC DropDownList component."
                }
            },
            {
                "text": "Keyboard navigation",
                "url": "dropdownlist/keyboard-navigation",
                "title": {
                    "aspnet-mvc": "Keyboard navigation in ASP.NET MVC DropDownList control"
                },
                "meta": {
                    "aspnet-mvc": "Look at this ASP.NET MVC demo which illustrates how the keyboard navigation feature is supported in ASP.NET MVC DropDownList component."
                }
            }
        ],
        "category": "Editors"
    },
    {
      "text": "Dialog",
      "name": "dialog",
      "api": "web/dialog",
      "isNew":  true,
      "documentation": {
        "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/dialog/overview"
      },
      "forum": {
        "aspnet-mvc": "aspnet-mvc/dialog"
      },
      "codelibrary": {
        "aspnet-mvc": "aspnet-mvc/dialog"
      },
      "spriteCssClass": "dialogIcon",
      "items": [
        {
          "text": "Basic usage",
          "url": "dialog/index",
          "title": {
            "aspnet-mvc": "Basic usage demo for ASP.NET MVC Dialog | UI for ASP.NET MVC Demos"
          },
          "description": {
            "aspnet-mvc": "<p>The <strong>Telerik Dialog for ASP.NET MVC</strong> is a modal popup that brings information to the user. It also provides actions through the action buttons to prompt the user for input or to ask for a decision. The component can also contain more complex UI elements that require the focus of the user. The Dialog control is a subset of the <a href=\"http://www.telerik.com/kendo-ui/window\" target=\"_blank\">Window</a> one where the most prominent difference is the added functionality for actions.</p><br /><p><strong>Key Features</strong></p> <ul style=\"list-style-type: disc;\"><li>Fully customizable visual appearance of the dialog title and body</li><li>Support for rich text content</li><li>Predefined Alert, Confirm, and Prompt Dialogs</li><li>Built-in modality and animations</li><li>Ability to create and add custom actions (buttons) at the bottom of the dialog</li><li>Rich API for maximum flexibility</li><li>Built-in themes</li><li>Accessibility, keyboard navigation and RTL Support</li><li>Rich cross-browser and mobile support</li></ul>"
          },
          "meta": {
            "aspnet-mvc": "This example demonstrates the basic usage of ASP.NET MVC Dialog control"
          }
        },
        {
          "text": "Events",
          "url": "dialog/events",
          "title": {
            "aspnet-mvc": "Events in ASP.NET MVC Dialog demo"
          },
          "meta": {
            "aspnet-mvc": "This demo shows how to fire events in ASP.NET MVC dialog control. Open and close are some of the events which you can trigger."
          },
          "requiresServer": "true"
        },
        {
          "text": "API",
          "url": "dialog/api",
          "title": {
            "aspnet-mvc": "Example of ASP.NET MVC Dialog API"
          },
          "meta": {
            "kendo-ui": "This sample shows how you can use the API of kendoDialog widget to refresh the content of the dialog, open and close it.",
            "aspnet-mvc": "This sample shows how you can use the API of ASP.NET MVC Dialog control to refresh the content of the dialog, open and close it."
          },
          "requiresServer": "true"
        },
        {
          "text": "RTL support",
          "url": "dialog/right-to-left-support",
          "title": {
            "aspnet-mvc": "Right-to-Left dialog position of ASP.NET MVC Dialog control"
          },
          "meta": {
            "aspnet-mvc": "This demo shows how ASP.NET MVC Dialog control supports right-to-left direction of the dialog to provide best end-user experience."
          }
        },
        {
          "text": "Keyboard navigation",
          "url": "dialog/keyboard-navigation",
          "title": {
            "aspnet-mvc": "Keyboard navigation support | ASP.NET MVC Dialog Demo"
          },
          "meta": {
            "aspnet-mvc": "The sample demonstrates how the keyboard navigation feature is integrated in the ASP.NET MVC Dialog control."
          }
        }
      ],
      "category": "Layout"
    },
    {
        "text": "Editor",
        "name": "editor",
        "api": "web/editor",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/editor/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/editor"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/editor"
        },
        "spriteCssClass": "editorIcon",
        "items": [
            {
                "text": "Basic usage",
                "url": "editor/index",
                "title": {
                    "aspnet-mvc": "Basic usage demo for ASP.NET MVC Editor"
                },
                "description": {
                    "aspnet-mvc": "<p>The Kendo UI Editor for ASP.NET MVC is a powerful WYSIWYG component, which allows you and your users to create rich text content in a familiar and user friendly way. It provides a variety of tools for creating, editing and formatting text, paragraphs, lists, images, tables, hyperlinks and other HTML elements. The component outputs identical HTML across all major browsers, follows accessibility standards and provides API for content manipulation and export to PDF.</p> <p>You can find additional information on how to use the Kendo UI MVC Editor in <a href=\"http://docs.telerik.com/KENDO-UI/aspnet-mvc/helpers/editor/overview\" target=\"_blank\">this section</a> of the product documentation.</p> <p><strong>Key Features</strong></p> <ul> <li>Intuitive UI for Rich Text Editing, Formatting and Styling</li> <li>UI for lists, tables, images and hyperlinks creation and formatting</li> <li>File attachment support</li> <li>Simple-to-Customize Look and Feel</li> <li>Ability to create and add custom buttons</li> <li>Rich API for maximum flexibility</li> <li>High performance</li> <li>Export to PDF</li> <li>Built-in themes</li> <li>Accessibility, keyboard navigation and RTL Support</li> <li>Rich cross-browser and mobile support</li> <li>Responsive HTML 5 Rendering</li> </ul> <p>More about <a href=\"http://www.telerik.com/aspnet-mvc/editor\">Editor for ASP.NET MVC</a></p>"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how you can use Telerik editor extension in ASP.NET MVC."
                }
            },
            {
                "text": "Inline editing",
                "url": "editor/inline-editing",
                "title": {
                    "aspnet-mvc": "Inline editing functionality of ASP.NET MVC WYSIWYG Editor"
                },
                "group": "Functionality",
                "description": {
                    "aspnet-mvc": "<p>This example shows how you can use the MVC Editor to edit parts of the page inline and at the same time to have an overview of the real layout and appearance.</p> <p>All you need to do to enable the inline editing is to set the .Tag(\"param\") setting, where the \"param\" parameter should be a valid <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Content_Editable\">contentEditable element</a> as the \"div\" used in this demo. If the Tag attribute is not set, the WYSIWYG editor will be rendered in its default TextArea mode.</p>"
                },
                "meta": {
                    "aspnet-mvc": "This example shows how to use the ASP.NET MVC Editor to edit parts of the page inline, allowing authors to see the page in its final state."
                }
            },
            {
                "text": "Custom tools",
                "url": "editor/custom-tools",
                "title": {
                    "aspnet-mvc": "Custom tools for ASP.NET MVC WYSIWYG Editor"
                },
                "meta": {
                    "aspnet-mvc": "This example shows how you can easily customize some of ASP.NET MVC Editor native tools. You can also create completely custom tools for the component."
                },
                "description": {
                    "aspnet-mvc": "<p>This example shows how to customize some of the native Editor tools (font size, font name and block format) by modifying the tools' item collections, as well as how to create completely custom tools (Content Area Background Color and Insert a Horizontal Ruler).</p> <p>You can use the Add method of the FontName, FontSize and Formatting settings to modify the default font size, font name and formatblock options set.</p> <p>To add a new custom button on the toolbar: set the Tools -&gt; CustomButton:</p> <p>.CustomButton(cb =&gt; cb.Name(\"custom\").ToolTip(\"horizontal rule\").Exec(\"execFunction\"))</p> <p>Where the Exec param should be the name of a JavaScript function that will be fired when the custom button is clicked.</p> <p>If you want to create a custom dropdown with a label next to it, you can set the Tools -&gt; CustomTemplate and specify the HTML markup that will be rendered on the toolbar.</p>"
                }
            },
            {
                "text": "File and image browser",
                "url": "editor/imagebrowser",
                "title": {
                    "aspnet-mvc": "Image browser in ASP.NET MVC Editor | ASP.NET MVC demo"
                },
                "meta": {
                    "aspnet-mvc": "In this demo we will see how the sleek image browser is nicely implemented in ASP.NET MVC Editor control."
                },
                "description": {
                    "aspnet-mvc": "<p>You can use the Insert Image and Insert File Browser managers to upload and insert Image and Hyperlink objects into the content area of the MVC Editor. Both dialogs consist of Address and Search fields, File Browser panel which shows the available files, File Upload, Create a New Folder and Delete features. In addition there is a file properties section with fields suitable for images: web address, alternate text, width and height as well as for hyperlinks: web address and title.</p> <p>You can configure the Image browser tool through the ImageBrowser configuration option and the Insert File browser through the FileBrowser one. You can find more information about the Image dialog in this Kendo UI documentation article: <a href=\"http://docs.telerik.com/kendo-ui/web/editor/imagebrowser\">Image Browser</a>.</p>"
                },
                "sources": {
                    "aspnet-mvc": [
                        {
                            "name": "FileBrowserController.cs",
                            "url": "~/src/aspnetmvc/controllers/Editor/FileBrowserController.cs"
                        }
                    ]
                }
            },
            {
                "text": "All tools",
                "url": "editor/all-tools",
                "title": {
                    "aspnet-mvc": "All tools demo in ASP.NET MVC Editor control"
                },
                "meta": {
                    "aspnet-mvc": "This example shows the core editing engine in ASP.NET MVC Editor control. Get familiar with all features of the component for any ASP.NET MVC website or web app."
                },
                "description": {
                    "aspnet-mvc": "<p>You can see in this demo the whole set of tools supported by the Telerik MVC Editor. You can easily add or hide each of them through the Tools collection option of the component:</p> <p>.Tools(tools =&gt; tools. Clear().Bold().Italic().Underline().Strikethrough()...FontName().FontSize().FontColor().BackColor().Print())</p> <p>If you remove the Clear() option, the default toolbar will be shown along with the specified by you buttons.</p>"
                }
            },
            {
                "text": "Snippets",
                "url": "editor/snippets",
                "title": {
                    "aspnet-mvc": "Demo for snippets feature of ASP.NET MVC Editor control"
                },
                "meta": {
                    "aspnet-mvc": "This example demonstrates the snippet feature of ASP.NET MVC Editor. See how you can quickly insert HTML code snippet into web-based editor in your app."
                },
                "description": {
                    "aspnet-mvc": "<p>The snippets feature of the MVC Editor allows you to quickly insert predefined HTML code snippets in the content area.</p> <p>The snippet tool can insert plain text or HTML content which you can configure using the Tools -&gt; Snippets -&gt; Add(\"Snippet Item Name\", \"&lt;b&gt;My Snippet Content&lt;/b&gt;\") method.</p>"
                }
            },
            {
                "text": "Styles",
                "url": "editor/styles",
                "title": {
                    "aspnet-mvc": "Style tool demo for ASP.NET MVC web editor | ASP.NET MVC Demos"
                },
                "meta": {
                    "aspnet-mvc": "This example shows how you can use the ASP.NET MVC Editor style tool to customize the content of the control with CSS classes."
                },
                "description": {
                    "aspnet-mvc": "<p>The demo presents you how to use the Editor's style tool, which provides the ability to customize the widget content by means of custom CSS classes and styling, and a CSS file registered in the Editor iframe document.</p> <p>You can register and import your own CSS file into the content area through the StyleSheets option:<br /> .StyleSheets(css =&gt; css.Add(Url.Content(\"~/PATH_TO_CSS_FILE/CSS_FILE.css\"))) </p> <p > Use the Tools -&gt; Formatting -&gt; Add(\"Dropdown Item Name\",\".CSS Class Name\") method to populate the Format dropdown with options. Note that the specified CSS class should exist in the CSS file imported in the content area through the StyleSheets -&gt; Add method.</p>"
                }
            },
            {
                "text": "PDF Export",
                "url": "editor/pdf-export",
                "title": {
                    "aspnet-mvc": "PDF export support in ASP.NET MVC Editor"
                },
                "meta": {
                    "aspnet-mvc": "With ASP.NET MVC Editor you can allow end users to edit HTML5 in a user-friendly way. Check out this demo to learn more about the PDF export support in the component."
                },
                "description": {
                    "aspnet-mvc": "<p>Nowadays, the PDF format is very popular and widely used to present documents in a manner independent of application software, hardware and operating systems. This demo demonstrates how to export the Telerik MVC Editor contents to PDF.</p> <p>The approach is very straight-forward - to export the content to PDF include the corresponding command to the editor&rsquo;s toolbar&nbsp;.Tools(tools =&gt; tools.Pdf()) and configure the export settings through the Pdf attribute. For instance, you can specify the file name and whether to export all pages, margins, paper size, font, etc.</p>"
                }
            },
            {
                "text": "Paste Cleanup",
                "url": "editor/paste-cleanup",
                "title": {
                    "aspnet-mvc": "Paste cleanup options demo for ASP.NET MVC web editor | ASP.NET MVC Demos"
                },
                "meta": {
                    "aspnet-mvc": "This example shows how you can clean up the content users paste in ASP.NET MVC Editor"
                },
                "description": {
                    "aspnet-mvc": "<p>The ASP.NET MVC web editor exposes several options for cleaning up the content users paste in the content area. This allows for better control on what content is entered and ensures consistent styling.</p>"
                },
                "packages": [
                    "!mvc-core"
                ]
            },
            {
                "text": "Immutable Elements",
                "url": "editor/immutable-elements",
                "new": true,
                "title": {
                    "aspnet-mvc": "Immutable Elements demo demo for ASP.NET MVC web editor | ASP.NET MVC Demos"
                },
                "meta": {
                    "aspnet-mvc": "This example shows how you can use immutable elements in ASP.NET MVC Editor"
                },
                "description": {
                    "aspnet-mvc": "<p>The ASP.NET MVC web editor and its <strong>Immutable Elements</strong> feature enables you to predefine elements in the content area that cannot be edited by the end user.&nbsp;</p><p>This demo shows a use case where a mail form is to be edited. You can see also:</p><ol><li>How to enable the Immutable Elements—by using the&nbsp;<a href='http://docs.telerik.com/kendo-ui/api/javascript/ui/editor#configuration-immutables'>immutables option</a>;</li><li>How to define the HTML elements that cannot be edited—by adding the <strong>contenteditable='false'</strong> attribute;</li><li>How to use the <a href='http://docs.telerik.com/kendo-ui/api/javascript/ui/editor#configuration-immutables.serialization'>immutables.serialization</a>&nbsp;and&nbsp;<a href='http://docs.telerik.com/kendo-ui/api/javascript/ui/editor#configuration-immutables.deserialization'>immutables.deserialization</a>&nbsp;option to change the data shown in the&nbsp;<strong>viewHtml</strong> dialog and enable end user to control the CSS text-align property from there;</li><li>How to define default styles for the immutable elements;</li><li>And how to define styles when an immutable element is selected to improve UX.</li></ol>"
                }
            },
            {
                "text": "Events",
                "url": "editor/events",
                "title": {
                    "aspnet-mvc": "Example for events in ASP.NET MVC Editor component"
                },
                "meta": {
                    "aspnet-mvc": "This demo illustrates which events are fired when the ASP.NET MVC editor is blurred, its content is changed or a command is executed."
                },
                "group": "API",
                "description": {
                    "aspnet-mvc": "<p>Telerik MVC Editor exposes rich API and events which provide easy configuration or extension points for customization on top of its built-in features.</p> <p>This particular demo shows how you can intercept the <strong>Change</strong>, <strong>Execute, Select </strong>and <strong>Paste </strong>events of the editor to output messages in the console when these events are raised. You can use these events for customizations or to execute custom logic, if necessary.</p>"
                }
            },
            {
                "text": "Globalization",
                "url": "editor/globalization"
            },
            {
                "text": "API",
                "url": "editor/api",
                "title": {
                    "aspnet-mvc": "API demo for ASP.NET MVC Editor component"
                },
                "meta": {
                    "aspnet-mvc": "This examples show how the API of ASP.NET MVC Editor works in action and how the content in the editor can be easily manipulated via the API."
                },
                "description": {
                    "aspnet-mvc": "<p>Telerik MVC Editor exposes rich client-side API and events, which provide easy configuration or extension points for custom functionality on top of the built-in features.</p> <p>The example shows how you can get a reference to the editor&rsquo;s client-side object and obtain/replace its content using the provided <a href=\"http://docs.telerik.com/KENDO-UI/api/javascript/ui/editor#methods-value\">editor.value()</a> method.</p> <p>You can find more information about the available editor&rsquo;s client-side API <a href=\"http://docs.telerik.com/KENDO-UI/api/javascript/ui/editor\">here</a>.</p>"
                }
            },
            {
                "text": "RTL support",
                "url": "editor/right-to-left-support",
                "title": {
                    "aspnet-mvc": "RTL support in ASP.NET MVC Editor"
                },
                "meta": {
                    "aspnet-mvc": "With ASP.NET MVC Editor you can allow end users to edit HTML5 in a user-friendly way. Check out this demo to learn more about the RTL support in the component."
                },
                "group": "Accessibility and Internationalization",
                "description": {
                    "aspnet-mvc": "<p>The Telerik MVC Editor supports right-to-left languages and rendering. All you have to do is to register the <strong>kendo.rtl.min.css</strong> file (located at Kendo.Mvc.Examples\\Content\\web installation folder) and wrap the editor in a container element with <strong>k-rtl </strong>class set for it, as demonstrated in this example.</p> <p>More information on the right-to-left support of the components can be found in <a href=\"http://docs.telerik.com/kendo-ui/accessibility/supporting-rtl-languages\" target=\"_blank\">this topic</a>.</p>"
                }
            },
            {
                "text": "Keyboard navigation",
                "url": "editor/keyboard-navigation",
                "title": {
                    "aspnet-mvc": "Keyboard navigation in ASP.NET MVC Editor"
                },
                "meta": {
                    "aspnet-mvc": "ASP.NET MVC Editor is another control that supports keyboard navigation. Check out the demo to learn how to implement it in your app."
                },
                "description": {
                    "aspnet-mvc": "<p>This demo illustrates the keyboard support of Telerik Editor for MVC, which provides access to the available editor&rsquo;s toolbar buttons without the need of using a mouse.</p> <p>Once the focus goes on the first toolbar button, you can focus the next one by pressing the Tab key. You can go back onto the previous tool by pressing Shift+Tab. To execute the command of the selected tool press the Enter key.</p> <p>Further details about the Keyboard, Section 508 and WAI-ARIA support of Telerik UI for ASP.NET MVC extensions can be found in the <a href=\"http://docs.telerik.com/kendo-ui/accessibility/accessibility-overview\">Accessibility Overview section</a> of the documentation.</p>"
                }
            }
        ],
        "category": "Editors"
    },
    {
        "text": "Grid",
        "name": "grid",
        "api": "web/grid",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/grid/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/grid"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/grid"
        },
        "spriteCssClass": "gridIcon",
        "items": [
            {
                "text": "Basic usage",
                "url": "grid/index",
                "title": {
                    "aspnet-mvc": " ASP.NET MVC Grid control example"
                },
                "meta": {
                    "aspnet-mvc": "In this demo for Kendo UI jQuery-powered Grid in ASP.NET MVC you will see all basic functionalities of the extension."
                },
                "description": {
                    "aspnet-mvc": "<p>The <strong>Telerik Grid for ASP.NET MVC</strong> is a powerful component, which allows you to visualize and edit data via its table representation. It provides a variety of options about how to present and perform operations over the underlying data, such as paging, sorting, filtering, grouping, editing, exporting and many more. <br /> <br /> You can provide the data to the widget with Server (HTTP GET requests) or AJAX binding.<br /> In this demo you can see how you can easily configure the grid to display data and perform sorting, paging and grouping operations via its built-in settings. </p> <p>You can find additional information on how to use the Kendo UI MVC Grid in <a href=\"http://docs.telerik.com/KENDO-UI/aspnet-mvc/helpers/grid/overview\" target=\"_blank\"> this section</a> of the product documentation.<br/></p> <p><strong>Key Features</strong></p> <ul style=\"list-style-type: disc;\"> <li>Responsive and Adaptive HTML 5 Rendering</li> <li>Integrated paging, sorting, filtering and grouping functionalities.</li> <li>Insert, Update and Delete From DataSource</li> <li>Export to PDF and MS Excel</li> <li>Ultimate Performance with Virtual Scrolling</li> <li>Frozen Columns</li> <li>Column Resize, Reorder and Show/Hide Interactions</li> <li>Hierarchical Grid</li> <li>Server- and Client-Side API for Max Flexibility</li> <li>Full Control over the Layout Presentations through the Grid templates</li> <li>Accessibility, Keyboard Navigation and RTL Support</li> <li>Selecting Cells and Rows</li> <li>Scaffolding in Visual Studio</li> </ul> <p>More about <a href=\"http://www.telerik.com/aspnet-mvc/grid\">Grid for ASP.NET MVC</a></p>"
                }
            },
            {
                "text": "Binding to local data",
                "url": "grid/local-data-binding",
                "title": {
                    "aspnet-mvc": "Binding to local data in Telerik ASP.NET MVC Grid"
                },
                "meta": {
                    "aspnet-mvc": "This sample demonstrates how we can bind the Telerik ASP.NET MVC Grid control to local JSON Data by using Kendo UI DataSource component."
                },
                "group": "Data Binding",
                "description": {
                    "aspnet-mvc": "<p>The Telerik MVC Grid offers two ways of data-binding:</p> <ul style=\"list-style-type: disc;\"> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/grid/server-binding\">Server</a> - the widget performs server-side requests (HTTP GET) when doing paging, sorting and filtering.</li> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/grid/ajax-binding\">Ajax</a> - the widget will make Ajax requests when doing paging, sorting, filtering, grouping or saving data. In this mode the grid retrieves only the data (in JSON format) representing the current page. As a result only the grid is updated.</li> </ul> <p>In this demo you can see how to databind the Grid through Ajax-bound mode to an entity DataSource. The ProductService class defines the CRUD data structure that is applied to the Grid.</p> <p>Note that in addition to the visualization, the grid also provides built-in support for operations over data such as sorting, filtering and paging.</p> <p>Additional information about how to utilize the data binding feature of the MVC grid component can be found in <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/grid/ajax-binding\">this section</a> of the product documentation.</p>"
                }
            },
            {
                "text": "Binding to remote data",
                "url": "grid/remote-data-binding",
                "title": {
                    "aspnet-mvc": "Remote data binding example in Telerik ASP.NET MVC Grid"
                },
                "meta": {
                    "aspnet-mvc": "This example and demo source code illustrate how the Telerik ASP.NET MVC Grid component can be bound to remote data using the DataSource component."
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik MVC Grid offers two ways of data-binding:</p> <ul style=\"list-style-type: disc;\"> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/grid/server-binding\">Server</a> - the widget performs server-side requests (HTTP GET) when doing paging, sorting and filtering.</li> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/grid/ajax-binding\">Ajax</a> - the widget will make Ajax requests when doing paging, sorting, filtering, grouping or saving data. In this mode the grid retrieves only the data (in JSON format) representing the current page. As a result only the grid is updated.</li> </ul> <p>For remote data binding you need to specify a remote endpoint or web service returning data in JSON/JSONP, OData or XML format, and utilize the DataSource as a mediator between the grid and the underlying data. To make the connection to the remote endpoint and process the data properly, the data source needs information about the web service URL(s), the request type, the response data type, and the structure (schema) of the response, in case it is more complex than a plain array of objects.</p> <p>In this example the grid fetches its data from a MVC controller assigned via the DataSource read configuration. In addition to the visualization, the grid also provides built-in support for operations over data such as sorting, filtering and paging.</p> <p>Additional information about how to utilize the data binding feature of the MVC grid component can be found in <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/grid/ajax-binding\">this section</a> of the product documentation.</p>"
                }
            },
            {
                "text": "Binding to Telerik Backend Services",
                "url": "grid/everlive",
                "title": {
                    "aspnet-mvc": "Binding ASP.NET MVC Grid to Telerik Backend Services"
                },
                "meta": {
                    "aspnet-mvc": "In this sample you will see in action how Telerik ASP.NET MVC Grid is bound to Telerik cloud-based services."
                },
                "description": {
                    "aspnet-mvc": "<h4>What are the Telerik Backend Services?</h4><p>Telerik Backend Services are a set of cloud-based services that enable developers to build and manage mobile apps insignificantly faster, easier and more scalable way. Telerik Backend Services can significantly speed-up development by providing your app with data storage, user management and server-code execution. Unlike other products, Telerik Backend Services are the integrated cloud-storage provider for all Telerik products.</p><p style=\"padding-top: 1em;\">&raquo; <a class=\"hyperlink\" href=\"http://docs.telerik.com/platform/backend-services/what-are-telerik-backend-services\" title=\"Getting started with Telerik Backend Services\">What are Telerik Backend Services</a></p><p>&raquo; <a class=\"hyperlink\" href=\"http://docs.telerik.com/platform/backend-services/development/javascript-sdk/introduction\">Telerik Backend Services JavaScript SDK</a></p><p>&raquo; <a class=\"hyperlink\" href=\"http://docs.telerik.com/platform/backend-services/development/javascript-sdk/kendoui/kendo-uiintegration\" title=\"Introduction to Kendo UI and Telerik Backend Services JavaScript integration\">Integration with Kendo UI</a></p><p class=\"demo-hint\" style=\"padding-top: 1em;\">Note: The Telerik Backend Services data source is not supported on IE8 and below yet, because it relies on <a class=\"hyperlink\" href=\"http://en.wikipedia.org/wiki/Cross-origin_resource_sharing\">cross-origin resource sharing</a>.</p>"
                }
            },
            {
                "text": "Binding to SignalR",
                "url": "grid/signalr",
                "title": {
                    "aspnet-mvc": "Real-time Binding to SignalR Hub | UI for ASP.NET MVC demos"
                },
                "meta": {
                    "aspnet-mvc": "This example shows how the Telerik ASP.NET MVC Grid can be bound to SignalR Hub for real-time push notifications."
                },
                "description": {
                    "aspnet-mvc": "<p>This demo shows how the Telerik ASP.NET MVC Grid can be bound to a <a href=\"http://signalr.net/\">SignalR</a> Hub for real-time push notifications. This is useful for web applications (chat, gaming and other apps) which require high-frequency updates where you usually want to perform grid updates in real-time on all connected clients.</p> <p>To configure the SignalR binding, set the <strong>SignalR</strong> and <strong>Transport</strong> settings in the Grid&rsquo;s DataSource configuration.&nbsp; In this way you instruct the data source to use SignalR protocol for transmitting and operating with data in real time.</p> <p>You can find more information in this article: <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/grid/how-to/grid-bound-to-signalr\" target=\"_blank\">Binding Grid widget to <strong>SignalR</strong> Hub</a>.</p>"
                }
            },
            {
                "text": "Custom ajax binding",
                "url": "grid/customajaxbinding"
            },
            {
                "text": "Custom data source",
                "url": "grid/custom-datasource"
            },
            {
                "text": "OData binding",
                "url": "grid/odata"
            },
            {
                "text": "Web API binding",
                "url": "grid/webapi"
            },
            {
                "text": "Server binding",
                "url": "grid/serverbinding"
            },
            {
                "text": "Custom server binding",
                "url": "grid/customserverbinding"
            },
            {
                "text": "Export to Excel",
                "url": "grid/excel-export",
                "title": {
                    "aspnet-mvc": "Exporting to MS Excel"
                },
                "meta": {
                    "aspnet-mvc": "Export Kendo UI grid as Microsoft Excel file"
                },
                "group": "Exporting",
                "description": {
                    "aspnet-mvc": "<p>This example shows how to enable the Export to Excel functionality of the Telerik MVC Grid extension.<br /> You have to include the Excel toolbar command .ToolBar(tools =&gt; <strong>tools.Excel()</strong>) as well as to specify the <strong>FileName</strong> export setting. </p> <p>Alternatively, you could force the Excel export by invoking the <a href=\"http://docs.telerik.com/kendo-ui/api/javascript/ui/grid.html#methods-saveAsExcel\" target=\"_blank\">saveAsExcel</a> method from the Client-side API of the component. <br /> <br /> Yet another useful option is the ability to customize the grid&rsquo;s rows/columns and cells of the exported file by intercepting the <strong>excelExport</strong> event. You can find more information in the <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/grid/excel-export\">following help article</a>.</p>"
                }
            },
            {
                "text": "Export to PDF",
                "url": "grid/pdf-export",
                "title": {
                    "aspnet-mvc": "Exporting to PDF"
                },
                "meta": {
                    "aspnet-mvc": "Export Kendo UI grid as PDF file"
                },
                "description": {
                    "aspnet-mvc": "<p>Nowadays, the PDF format is very popular and widely used to present documents in a manner independent of application software, hardware and operating systems. This demo demonstrates how to export the Telerik MVC Grid contents to PDF.</p> <p>The approach is very straight-forward - to export the grid content to PDF include the corresponding command to the grid toolbar&nbsp;.ToolBar(tools =&gt; <strong>tools.Pdf()</strong>) and configure the PDF export setting. For instance, you can specify the file name and whether to export all pages, margins, paper size, font, etc. To initiate export programmatically, you can call the <a href=\"http://docs.telerik.com/kendo-ui/api/javascript/ui/grid.html#methods-saveAsPDF\">saveAsPdf</a> method from the client-side API. <br /> <br /> Additionally, you can customize the appearance of the exported grid table by attaching to the <strong>pdfExport</strong> event. Visit the <a href=\"http://docs.telerik.com/kendo-ui/controls/data-management/grid/pdf-export#pdf-export\" target=\"_blank\">following help article</a> to learn exactly how to do that.</p>"
                }
            },
            {
                "text": "Copy to Excel",
                "url": "grid/copy-to-excel",
                "title": {
                    "aspnet-mvc": "Copy to Excel in Kendo UI Grid | Kendo UI Web Demo"
                },
                "meta": {
                    "aspnet-mvc": "In this example we will learn how to enable the allowCopy option of Kendo UI Grid component to allow copying data to Excel."
                },
                "description": {
                    "aspnet-mvc": "<p>Having used to the copy-paste functionality available in MS Excel, many users would want to copy grid cell content from web apps and paste in Excel, or some other place for further review, or just to duplicate it.</p> <p>With the Telerik Grid HTML helper this built-in functionality is supported by setting two configuration settings: <strong>Selectable</strong> -&gt; GridSelectionMode.Multiple and <strong>AllowCopy</strong>(true). As simple as that, your users will be able to utilize copy and paste between the browser and their apps.</p>"
                }
            },
            {
                "text": "Batch editing",
                "url": "grid/editing",
                "title": {
                    "aspnet-mvc": "Batch editing functionality in Telerik ASP.NET MVC Grid"
                },
                "meta": {
                    "aspnet-mvc": "In this sample you will play with the batch editing functionality of Telerik ASP.NET MVC Grid."
                },
                "group": "Data Editing",
                "description": {
                    "aspnet-mvc": "<p>A common scenario is to switch grid cells in edit mode by simply clicking them, update the data on the client and then process all changes on the server in a single batch update.<br /> <br /> This demo shows how this can be accomplished using the built-in batch create, update and destroy commands of the Telerik Grid component.<br /> <br /> All you have to do to enable the batch data editing functionality is to:</p> <ul style=\"list-style-type: disc;\"> <li>Turn on the inline cell editing by setting: .Editable(editable =&gt; editable.Mode(GridEditMode.<strong>InCell</strong>))</li> <li>Enable the Add New Record, Save Changes and Discard Changes buttons on the toolbar by setting: .ToolBar(toolbar =&gt; { toolbar.<strong>Create</strong>(); toolbar.<strong>Save</strong>(); }</li> <li>Set .<strong>Batch</strong>(<strong>true</strong>) and .<strong>ServerOperation</strong>(<strong>false</strong>) properties in the DataSource declaration to enable batch updates and perform the paging, sorting, filtering and grouping operations on the client.</li> <li>Invoke the CRUD action methods in the DataSource</li> </ul> <p>Once the cells are edited you have the option to process the changes or discard them. Click on a cell/row to place it in edit mode. Use the Save changes or Cancel changes buttons to process/discard all changes at once.</p> <p>For more details about the batch editing capabilities of the MVC Grid see the help article <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/grid/batch-editing\" target=\"_blank\">here</a>.</p>"
                }
            },
            {
                "text": "Inline editing",
                "url": "grid/editing-inline",
                "title": {
                    "aspnet-mvc": "Applying inline editing in Telerik ASP.NET MVC Grid"
                },
                "meta": {
                    "aspnet-mvc": "See how the values in the cells of Telerik ASP.NET MVC Grid can be easily changed. Try the demo source code to find how inline data grid can be deleted and modified."
                },
                "description": {
                    "aspnet-mvc": "<p>A common scenario is to toggle a grid cell into edit mode by simply clicking on the Edit row button, update the data inside the cell and save/discard the changes using the Update/Cancel buttons.<br /> <br /> This demo shows how this inline content management can be achieved using the data operations (create, update and destroy) of the Telerik MVC Grid component.<br /> <br /> All you have to do to enable the inline editing capabilities of the Grid is:</p> <ul> <li>Turn on the inline cell editing by setting: .Editable(editable =&gt; editable.Mode(GridEditMode.<strong>InLine</strong>))</li> <li>To enable insertion of new records, add the New Record button on the toolbar by adding: .ToolBar(toolbar =&gt; toolbar.<strong>Create</strong>())</li> <li>To enable the Edit and Delete commands on each row, insert a new column: <span>columns.Command(command =&gt; { command.<strong>Edit</strong>(); command.<strong>Destroy</strong>(); });</span></li> <li>Invoke the <strong>Create</strong>, <strong>Read</strong>, <strong>Update</strong> and <strong>Destroy</strong> action methods in the DataSource. These methods are responsible for the data items manipulation.</li> </ul> <p>For more details about the inline editing capabilities of the MVC Grid see the help article <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/grid/ajax-editing\" target=\"_blank\">here</a>.</p>"
                }
            },
            {
                "text": "Popup editing",
                "url": "grid/editing-popup",
                "title": {
                    "aspnet-mvc": "Popup data editing example for Telerik ASP.NET MVC Grid"
                },
                "meta": {
                    "aspnet-mvc": "In this sample you can see the batch editing functionality of Telerik ASP.NET MVC Grid in action."
                },
                "description": {
                    "aspnet-mvc": "<p>In various scenarios there is requirement to not only visualize tabular data, but also allow the ability to the edit the rows content in a popup edit form. In this demo you can edit or insert new items via a popup form by configuring the Telerik MVC Grid component as follow:</p> <ul> <li>Activate the popup cell editing by setting: .Editable(editable =&gt; editable.Mode(GridEditMode.<strong>PopUp</strong>))</li> <li>To enable insertion of new records, add the New Record button on the toolbar: .ToolBar(toolbar =&gt; toolbar.<strong>Create</strong>())</li> <li>To enable the Edit and Delete commands on each row, insert a new column: <span>columns.Command(command =&gt; { command.<strong>Edit</strong>(); command.<strong>Destroy</strong>(); });</span></li> <li>Invoke the <strong>Create</strong>, <strong>Read</strong>, <strong>Update</strong> and <strong>Destroy</strong> action methods in the DataSource. These methods are responsible for the data items manipulation.</li> </ul> <p>For more details about the editing capabilities of the MVC Grid see the help article <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/grid/batch-editing\" target=\"_blank\">here</a>.</p>"
                }
            },
            {
                "text": "Editing custom editor",
                "url": "grid/editing-custom",
                "sources": {
                    "aspnet-mvc": [
                        {
                            "name": "ClientCategory.cshtml",
                            "url": "~/src/aspnetmvc/views/razor/grid/EditorTemplates/ClientCategory.cshtml"
                        },
                        {
                            "name": "ProductViewModel.cs",
                            "url": "~/src/aspnetmvc/models/ProductViewModel.cs"
                        }
                    ]
                },
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Grid Custom Editing | UI for ASP.NET MVC Demo"
                },
                "meta": {
                    "aspnet-mvc": "This example illustrates how editing in Telerik ASP.NET MVC Grid can be further customized with the custom editor and using DataSource component."
                },
                "description": {
                    "aspnet-mvc": "<p>In numerous scenarios there is a requirement to not only visualize data in a table structure, but also to have the ability to manipulate it and save the changes.</p> <p>The MVC grid wrapper supports CRUD data editing operations via a simple configuration of its data source. All you have to do to enable its data editing capabilities is to:</p> <ul> <li>set the grid's <strong>editable </strong>configuration option: <br /> .Editable(editable =&gt; editable.Mode(GridEditMode.InCell))</li> <li>declare field definitions through the <strong>Model configurator</strong></li> <li>configure the DataSource for performing CRUD data operations defining its <strong>Read, Create, Update and Destroy</strong> attributes</li> </ul> <p>If you want to enable new records insertion, you can do that by enabling the relevant option in the grid toolbar. For deleting items you need to include a delete command column.</p> <p > In this demo you can see how to further customize the editor by setting a custom editor (Html.Kendo().DropDownListFor<span>()</span><span> </span>MVC helper in this case) as a grid column editor by specifying the <strong>Category</strong> column's <strong>editor</strong> field, i.e.<br /> <br /> .Columns(columns =&gt;<span>&nbsp; </span>{ &hellip;<span>&nbsp;&nbsp;&nbsp; </span><br /> columns.Bound(p =&gt; p.Category).ClientTemplate(\"#=Category.CategoryName#\"); <br /> })<br /> <br /> For more details about the editing capabilities of the MVC Grid see the help article <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/grid/batch-editing\" target=\"_blank\">here</a>.</p>"
                },
                "packages": [
                    "!mvc-core"
                ]
            },
            {
                "text": "Server editing",
                "url": "grid/serverediting"
            },
            {
                "text": "Custom validator editing",
                "url": "grid/editing-custom-validation",
                "title": {
                    "aspnet-mvc": "Custom Validation example for Telerik ASP.NET MVC Grid"
                },
                "meta": {
                    "aspnet-mvc": "This example demonstrates how to implement custom validation rule in a Telerik ASP.NET MVC Grid."
                },
                "description": {
                    "aspnet-mvc": "<p>In numerous scenarios there is a requirement to not only visualize data in a table structure, but also to edit and validate it before save changes.</p> <p>The MVC grid helper supports CRUD data editing operations via a simple configuration of its data source. All you have to do to enable its data editing capabilities is to:</p> <ul> <li>set the grid's <strong>Editable </strong>configuration property: <br /> .Editable(editable =&gt; editable.Mode(GridEditMode.InCell))</li> <li>declare field definitions through the <strong>Model configurator</strong></li> <li>configure the DataSource for performing CRUD data operations defining its <strong>Read, Create, Update and Destroy</strong> methods</li> </ul> <p>If you want to enable new records insertion, you can do that by enabling the relevant option in the grid toolbar. For deleting items you need to include a delete command column.</p> <p > In this demo you can see how defining a custom validation rule via the CustomValidationProductViewModel model and the productnamevalidation function you can force a check for first capital letter for the Product Name column, when you edit the value in it.<br /> <br /> For more details about the editing capabilities of the MVC Grid see the help article <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/grid/batch-editing\" target=\"_blank\">here</a>.</p>"
                }
            },
            {
                "text": "Virtualization of remote data",
                "url": "grid/virtualization-remote-data",
                "title": {
                    "aspnet-mvc": "Virtualization of remote data in ASP.NET MVC Grid"
                },
                "meta": {
                    "aspnet-mvc": "This demo illustrates the virtualization of remote data in ASP.NET MVC Grid."
                },
                "description": {
                    "aspnet-mvc": "<p>The virtualization feature of Telerik ASP.NET MVC Grid allows you to handle large amount of data without negatively impacting the user experience and the browser performance. <br /> <br /> You can enable the virtual scrolling via the .<strong>Scrollable</strong>(scrollable =&gt; scrollable.Virtual(true)) configuration setting, which shows a vertical scrollbar for the grid content and renders only the number of items set via the <strong>PageSize</strong> setting of the grid data source. After you drag the scrollbar and the <strong>PageSize</strong> parameter value is exceeded, it makes automatic requests to retrieve and render the next set of grid rows.</p>"
                }
            },
            {
                "text": "Frozen columns",
                "url": "grid/frozen-columns",
                "title": {
                    "aspnet-mvc": "Frozen columns demo in Telerik ASP.NET MVC Grid "
                },
                "meta": {
                    "aspnet-mvc": "Play with the demo for frozen columns functionality of Telerik ASP.NET MVC Grid."
                },
                "description": {
                    "aspnet-mvc": "<p>There are scenarios in which you might be required to display a large number of grid columns on limited screen space, and making a small subset of them static when scrolling the rest horizontally to bring them in the viewable area. The concept of frozen columns is well known from MS Excel, and many users would like to utilize it in a web environment too.</p> <p>The Telerik ASP.NET Grid widget for MVC supports static/frozen columns by a single configuration setting. Simply set the <strong>Locked</strong> boolean setting of the corresponding column to true, and this will bring the column in the locked columns group positioned on the left in the grid. Here the locked columns are Order ID and Ship Name, while the rest of the columns can be scrolled horizontally.</p>"
                }
            },
            {
                "text": "Filter row",
                "url": "grid/filter-row",
                "title": {
                    "aspnet-mvc": "Filter row in Kendo UI Grid | Kendo UI Web Demo"
                },
                "meta": {
                    "aspnet-mvc": "In this example we will learn how to enable the filter row of Kendo UI Grid component."
                },
                "group": "Filtering",
                "description": {
                    "aspnet-mvc": "<p>You can see in this demo how you can enable filter row in the header by setting the grid's <strong>Filterable</strong>-&gt;<strong>Mode</strong> property to <strong>Row</strong>: .Filterable(ftb =&gt; ftb.Mode(GridFilterMode.Row))<br /> <br /> Therefore based on the data type of the underlying columns data<span>,</span> the grid will render textboxes for string values, numeric inputs or date pickers for filtering in the column headers.</p> <p>Additionally, you can specify a default filter operator to be applied when the user enters value in the filter textbox and tap Tab or Enter. This can be done using the <strong>Filterable</strong>-&gt;<strong>Cell</strong>-&gt;<strong>Operator</strong> attribute of the corresponding column, as shown for the Ship Name and Freight columns.</p>"
                }
            },
            {
                "text": "Filter Multi Checkboxes",
                "url": "grid/filter-multi-checkboxes",
                "title": {
                    "aspnet-mvc": "Filter multi-check in Kendo UI Grid | Kendo UI Web Demo"
                },
                "meta": {
                    "aspnet-mvc": "In this example we will learn how to enable the filter multi-check of Kendo UI Grid component."
                },
                "description": {
                    "aspnet-mvc": "<p>You can enable checkbox list filtering in the filter menu of the Grid HtmlHelper by specifying<span> </span><strong>Columns</strong> -&gt; <strong>Filterable -&gt; Multi(true) </strong>setting for the relevant grid columns.</p> <p>In addition, you could customize the checkbox filter menu by combining the filter with <strong>ItemTemplate</strong> definition as it is done with the Country column in the bottom grid.</p>"
                }
            },
            {
                "text": "Filter menu customization",
                "url": "grid/filter-menu-customization",
                "title": {
                    "aspnet-mvc": "Filter menu customization in MVC Grid | UI for ASP.NET MVC Demo"
                },
                "meta": {
                    "aspnet-mvc": "In this example you will learn how to customize the filter menu of Telerik ASP.NET MVC Grid component."
                },
                "description": {
                    "aspnet-mvc": "<p>You can see in this demo how to apply common settings for the MVC grid filter menu configuration, and customize its user interface. <br /> <br /> To begin we should specify a single filter criterion using the Filterable-&gt;Extra(false) setting, and limit the filter operators for string columns to &ldquo;Starts with&rdquo;, &ldquo;Is equal to&rdquo; and &ldquo;Is not equal to&rdquo;. After that we define built-in DatePicker to filter the Birth Date column, and instantiate Kendo UI AutoComplete and DropDownList for the Title and City columns, respectively.</p> <p>To create the dropdown filters, we assign JavaScript functions to the Filterable-&gt;UI attributes of the corresponding columns.</p>"
                }
            },
            {
                "text": "Sorting",
                "url": "grid/sorting",
                "title": {
                    "aspnet-mvc": "Sorting in Telerik ASP.NET MVC Grid"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how to sort data in Telerik ASP.NET MVC Grid. Use the demo source code to look into the logic of grid sorting and easily implement it in your app."
                },
                "group": "Functionality",
                "description": {
                    "aspnet-mvc": "<p>You can learn in this sample how to enable sorting for the Telerik MVC grid. Since this functionality is built-in, all you have to do is to set the sorting configuration via the <strong>Sortable </strong>attribute. The supported sorting modes are single and multiple, which can be specified through the <strong>SortMode</strong> property.</p>"
                }
            },
            {
                "text": "Selection",
                "url": "grid/selection",
                "title": {
                    "aspnet-mvc": "Multiple row and cell selection in Telerik Grid for ASP.NET MVC"
                },
                "meta": {
                    "aspnet-mvc": "This demo illustrates how you can use Telerik ASP.NET MVC grid with multiple row or cell selection enabled."
                },
                "description": {
                    "aspnet-mvc": "<p>There are situations when you&rsquo;d like to enable your users to select rows or cells in the grid table, and process data from them or make calculations based on this selection. The MVC Grid supports selection by specifying its configuration through its <strong>Selectable</strong> -&gt; <strong>Mode</strong> and <strong>Type</strong> attributes. <br /> <br /> The accepted values for Mode are <strong>Single</strong><strong> </strong>and<strong> Multiple</strong>, while these for Type are <strong>Cell</strong> and <strong>Row</strong>.</p> <p>More details are available in the <a href=\"http://docs.telerik.com/kendo-ui/api/aspnet-mvc/Kendo.Mvc.UI.Fluent/GridSelectionSettingsBuilder#methods-Mode%28Kendo.Mvc.UI.GridSelectionMode%29\">documentation</a>.</p>"
                }
            },
            {
                "text": "Aggregates",
                "url": "grid/aggregates",
                "title": {
                    "aspnet-mvc": "Aggregating option demo for Telerik ASP.NET MVC Grid"
                },
                "meta": {
                    "aspnet-mvc": "This example demonstrates the aggregate option for Telerik ASP.NET MVC Grid. Use demo source code to enable the grid to calculate aggregated values."
                },
                "description": {
                    "aspnet-mvc": "<p>In some situations when displaying numbers in the grid, users would like to be able to see the results from aggregate calculations at the bottom of the grid groups or columns.</p> <p>This is a easy with the MVC grid since it offers built-in support for the most popular aggregate functions: <strong>Average</strong>, <strong>Count</strong>, <strong>Sum</strong>, <strong>Min</strong>, <strong>Max</strong> and <strong>Count</strong>. All you need to do is define the aggregates via the Columns-&gt; ClientFooterTemplate and ClientGroupFooterTemplate templates, and the Group and Aggregate fields of its DataSource instance.</p>"
                }
            },
            {
                "text": "Server aggregates",
                "url": "grid/serveraggregates"
            },
            {
                "text": "Paging",
                "url": "grid/paging"
            },
            {
                "text": "Hierarchy",
                "url": "grid/hierarchy",
                "title": {
                    "aspnet-mvc": "Hierarchical ASP.NET MVC Grid | UI for ASP.NET MVC Demo"
                },
                "meta": {
                    "aspnet-mvc": "This demo illustrates the hierarchical data grid feature of the Telerik ASP.NET MVC Grid component. Try the demo source code to play with the grid in your web app."
                },
                "description": {
                    "aspnet-mvc": "<p>There are projects which require to display table data in hierarchical-like fashion, in order to visualize relations between parent and child records. <br /> <br /> This is where the Telerik MVC grid hierarchy feature comes in handy. To implement hierarchy with the grid widget, you need to:</p> <ul> <li>Set the <strong>ClientDetailTemplateId</strong> setting which specifies the id of the script element containing the client-side detail template of the grid</li> <li>Define the script tag content that will be shown when the user expands the grid rows</li> </ul>"
                }
            },
            {
                "text": "Server hierarchy",
                "url": "grid/serverhierarchy"
            },
            {
                "text": "Persist state",
                "url": "grid/persist-state",
                "title": {
                    "aspnet-mvc": "KendoGrid Persist State API Demo"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how setOptions and getOptions methods can manipulate the state of Kendo UI Grid widget."
                },
                "description": {
                    "aspnet-mvc": "<p>A common scenario is to save the user customization and settings when interacting with your app, and then restore them once he/she logs back at some point in the future.</p> <p>The Telerik MVC component provided the ability to save and restore changes that were previously applied to its structure, using its <strong>getOptions</strong> and <strong>setOptions</strong> client-side methods. You can use these methods to store settings like grouping, paging, sorting, filtering<span> </span>and when needed to restore them. To demonstrate this functionality, we use <strong>localStorage</strong> key/value pair to save and load the grid state.</p> <p>More detail on the setOptions and getOptions methods is available in <a href=\"http://docs.telerik.com/kendo-ui/api/javascript/ui/grid#methods-setOptions\">this API section</a>.</p>"
                }
            },
            {
                "text": "Toolbar template",
                "url": "grid/toolbar-template",
                "title": {
                    "aspnet-mvc": "Toolbar templates for Telerik ASP.NET MVC Grid"
                },
                "meta": {
                    "aspnet-mvc": "This Telerik ASP.NET MVC Grid example shows how you can add custom toolbars to the grid and create toolbar templates."
                },
                "group": "Templates",
                "description": {
                    "aspnet-mvc": "<p>The MVC grid component exposes an option to define a content template for its toolbar.</p> <p>Here you can see a sample implementation of a toolbar template incorporating a dropdownlist HtmlHelper to list the records in the grid by category. The combo is populated with the list of categories and the filter is applied on its change event by invoking the grid.dataSource.filter(params) method from the client-side API.</p> <p>Note that the toolbar template is instantiated by the ToolBar -&gt; Template method.</p>"
                },
                "packages": [
                    "!mvc-core"
                ]
            },
            {
                "text": "Column header template",
                "url": "grid/headertemplate"
            },
            {
                "text": "Row template",
                "url": "grid/rowtemplate",
                "title": {
                    "aspnet-mvc": "Row Template for Telerik ASP.NET MVC Grid"
                },
                "meta": {
                    "aspnet-mvc": "This sample shows how to change the style and concert of row cells with Telrik ASP.NET MVC Grid Row templates."
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik MVC grid allows flexible customization of its rows in terms of layout and appearance by exposing row template feature for this purpose.</p> <p>In this example we present how you can specify your own custom layout for the rows in the grid using images and property bindings from its underlying data source. <br /> <br /> To do that you need to define a template column as shown below:</p> <p>columns.Template(e =&gt; { }).ClientTemplate(\" \"). Title(\"Picture\");</p> <p>and after that using the <strong>ClientRowTemplate</strong> and <strong>ClientAltRowTemplate</strong> settings to set the custom client-side row and alt-row templates. Note that both templates should contain table row HTML elements.</p>"
                }
            },
            {
                "text": "Detail template",
                "url": "grid/detailtemplate",
                "title": {
                    "aspnet-mvc": "Detail Template for Telerik ASP.NET MVC Grid"
                },
                "meta": {
                    "aspnet-mvc": "This example shows how records in the Telerik ASP.NET MVC Grid component can be presented with a detailed template."
                },
                "description": {
                    "aspnet-mvc": "<p>This example demonstrates how you can utilize the detail template feature of the MVC grid component when implementing hierarchical table presentation. The key steps here are to:</p> <ul> <li>Set the <strong>ClientDetailTemplateId</strong> setting which specifies the id of the script element containing the client-side detail template of the grid</li> <li>Define the script tag content that will be shown when the user expands the grid rows</li> </ul> <p>In this example we inject a TabStrip HtmlHelper extension with two tabs in the detail template - the first contains the orders of the relevant employee, and the second one holds his/her contact information.</p>"
                }
            },
            {
                "text": "Server detail template",
                "url": "grid/serverdetails"
            },
            {
                "text": "Server row template",
                "url": "grid/serverrowtemplate"
            },
            {
                "text": "Multi-column headers",
                "url": "grid/multicolumnheaders",
                "title": {
                    "aspnet-mvc": "Multiple column headers in Kendo UI Grid control | Kendo UI Web demo"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows multiple column headers feature of KendoGrid control."
                },
                "group": "Columns",
                "description": {
                    "aspnet-mvc": "<p>The Telerik MVC Grid extension supports multi-column headers by specifying column groups which incorporate inner-column structures. In this demo, you can see the Contact Info and Location columns have nested columns, defined trough the Columns -&gt; Group -&gt; Columns scheme. In addition, operations like sorting and filtering are supported on each column level, regardless of the chosen multi-header pattern.</p>"
                }
            },
            {
                "text": "Column reordering",
                "url": "grid/column-reordering",
                "title": {
                    "aspnet-mvc": "Column Reordering in Telerik ASP.NET MVC Grid"
                },
                "meta": {
                    "aspnet-mvc": "In this demo you can see how simple it is to reorder columns in Telerik ASP.NET MVC Grid."
                },
                "description": {
                    "aspnet-mvc": "<p>You can see in this demo how simple it is to reorder columns in Telerik ASP.NET MVC Grid. Just drag a column header over another header cell.</p> <p>You can enable this behavior by setting the <strong>Reorderable</strong> property of the grid.</p>"
                }
            },
            {
                "text": "Column resizing",
                "url": "grid/column-resizing",
                "title": {
                    "aspnet-mvc": "Column resizing in Telerik ASP.NET MVC Grid"
                },
                "meta": {
                    "aspnet-mvc": "This demo demonstrates how you can resize columns in Telerik ASP.NET MVC Grid."
                },
                "description": {
                    "aspnet-mvc": "<p>This example demonstrates how you can enable the columns resizing feature of the ASP.NET MVC Grid by setting the <strong>Resizable</strong> property.</p> <p>Once it is set the users can resize columns by dragging the edges (resize handles) of their header cells. They can also auto-fit a column by double-clicking its resize handle as in Excel.</p>"
                }
            },
            {
                "text": "Column menu",
                "url": "grid/column-menu",
                "title": {
                    "aspnet-mvc": "Column menu functionality of Telerik ASP.NET MVC Grid"
                },
                "meta": {
                    "aspnet-mvc": "This Telerik example shows column menu functionality in the Grid extension for ASP.NET MVC."
                },
                "description": {
                    "aspnet-mvc": "<p>You can try in this example the column menu functionality of the Grid extension for ASP.NET MVC.</p> <p>If you set the grid <strong>ColumnMenu</strong> setting, it will display the column menu when the user clicks the chevron icon in the column headers. The column menu allows to show and hide columns as well as filter and sort them (if filtering and sorting are enabled).</p>"
                }
            },
            {
                "text": "Column Settings",
                "url": "grid/columnsettings"
            },
            {
                "text": "ForeignKey column",
                "url": "grid/foreignkeycolumn",
                "title": {
                    "aspnet-mvc": "Foreign Key Column demo in Telerik ASP.NET MVC Grid"
                },
                "meta": {
                    "aspnet-mvc": "This example shows the foreign key column functionality to cross-reference tables in the Telerik ASP.NET MVC Grid component."
                },
                "description": {
                    "aspnet-mvc": "<p>In this example you can see how to implement foreign key column in the Telerik MVC grid, holding DropDownList editor for data editing. The ForeignKey column definition is shown below:<br /> <br /> <span>columns.ForeignKey(p =&gt; p.CategoryID, (System.Collections.IEnumerable)ViewData[\"categories\"], \"CategoryID\", \"CategoryName\").Title(\"Category\").Width(150);</span></p> <p > Here is the definition for the DropDownList user control:</p> <p>&lt;%@ Control Language=\"C#\" Inherits=\"System.Web.Mvc.ViewUserControl&lt;object&gt;\" %&gt;<br /> &lt;%= Html.Kendo().DropDownListFor(m =&gt; m)<span>&nbsp;&nbsp;&nbsp; </span><br /> <span>&nbsp;&nbsp;&nbsp; </span>.BindTo((SelectList)ViewData[ViewData.TemplateInfo.GetFullHtmlFieldName(\"\") + \"_Data\"])<br /> %&gt;</p>"
                }
            },
            {
                "text": "Custom command",
                "url": "grid/custom-command",
                "title": {
                    "aspnet-mvc": "Custom command demo in Telerik ASP.NET MVC Grid"
                },
                "meta": {
                    "aspnet-mvc": "This example illustrates the custom command of Telerik ASP.NET MVC Grid extension."
                },
                "description": {
                    "aspnet-mvc": "<p>The demonstrated solution in this example shows how to implement a custom command handling for records in the MVC Grid extension. </p> <p>To do it you need to include a command column in the grid which will render a button in the column cells that triggers the command. Through the column definition you can specify the text for the button and wire its click event to a JavaScript function (Command -&gt; Custom -&gt; Click), which receives the corresponding grid data item as an argument. Then in this function definition you can handle the command.</p> <p>In this demo we use Window widget instance to display details about the chosen row in the grid.</p>"
                }
            },
            {
                "text": "Events",
                "url": "grid/events",
                "title": {
                    "aspnet-mvc": "Example of using events in Telerik ASP.NET MVC Grid control"
                },
                "meta": {
                    "aspnet-mvc": "This example demonstrates the different events which are available in Telerik ASP.NET MVC Grid component. The code explains how you can use them for your project."
                },
                "group": "API",
                "description": {
                    "aspnet-mvc": "<p>Telerik MVC Grid exposes rich API and events which provide easy configuration or extension points for customization on top of the built-in features.</p> <p>This particular demo shows how you can intercept the <strong>onChange</strong>, <strong>onDataBinding</strong> and <strong>onDataBound</strong> events of the grid to output messages in the console when these events are raised. You can also use these events for customization or to execute custom logic, if necessary.</p>"
                }
            },
            {
                "text": "API",
                "url": "grid/api",
                "title": {
                    "aspnet-mvc": "API for ASP.NET MVC Grid control | UI for ASP.NET MVC demos"
                },
                "meta": {
                    "aspnet-mvc": "See how the powerful and comprehensive API Functions allow you to manipulate the contents and behavior of the Telerik ASP.NET MVC Grid."
                },
                "description": {
                    "aspnet-mvc": "<p>Telerik MVC Grid exposes rich client-side API and events, which provide easy configuration or extension points for custom functionality on top of the built-in features.</p> <p>The example shows how you can get a reference to the grid&rsquo;s client object, collect numeric value entered by the user and use this value to select or expand/collapse grid rows using the <strong>select</strong>, <strong>expandGroup</strong> and <strong>collapseGroup</strong> client methods of the grid.</p> <p>You can find more information about the available grid&rsquo;s client-side API <a href=\"http://docs.telerik.com/KENDO-UI/api/javascript/ui/grid\">here</a>.</p>"
                }
            },
            {
                "text": "Globalization",
                "url": "grid/globalization"
            },
            {
                "text": "RTL support",
                "url": "grid/right-to-left-support",
                "title": {
                    "aspnet-mvc": "Right to left support in Telerik ASP.NET MVC Grid"
                },
                "meta": {
                    "aspnet-mvc": "In this demo you will be able to learn more about the right to left support in Telerik ASP.NET MVC Grid extension."
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik MVC Grid supports right-to-left languages and rendering. All you have to do is to register the <strong>kendo.rtl.min.css</strong> file (located at Kendo.Mvc.Examples\\Content\\web\\ installation folder) and wrap the grid in a container element with <strong>k-rtl </strong>class set for it, as demonstrated in this example.</p> <p>More information on the right-to-left support of the components can be found in <a href=\"http://docs.telerik.com/kendo-ui/accessibility/supporting-rtl-languages\" target=\"_blank\">this topic</a>.</p>"
                }
            },
            {
                "text": "Keyboard navigation",
                "url": "grid/keyboard-navigation",
                "title": {
                    "aspnet-mvc": "Keyboard navigation in Telerik ASP.NET MVC Grid"
                },
                "meta": {
                    "aspnet-mvc": "Look at this Telerik ASP.NET MVC Grid demo to learn how different keyboard combinations could be used to navigate in the component."
                },
                "description": {
                    "aspnet-mvc": "<p>This demo illustrates the keyboard support of Telerik Grid for MVC, which provides quick access to available grid&rsquo;s features without the need of using a mouse. This is very practical for apps that should cover the accessibility standards for people with disabilities. </p> <p>You can focus the grid using the <strong>ALT + W</strong> key combination, which will allow you to directly interact with the grid functionality through the provided keyboard shortcuts visualized above.</p> <p>Further details about the Keyboard, Section 508 and WAI-ARIA support of Telerik UI for ASP.NET MVC extensions can be found in the <a href=\"http://docs.telerik.com/kendo-ui/accessibility/accessibility-overview\">Accessibility Overview section</a> of the documentation.</p>"
                }
            }
        ],
        "category": "Data Management"
    },
    {
        "text": "Spreadsheet",
        "name": "spreadsheet",
        "api": "web/spreadsheet",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/spreadsheet/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/spreadsheet"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/spreadsheet"
        },
        "spriteCssClass": "spreadsheetIcon",
        "items": [
            {
                "text": "Basic usage",
                "url": "spreadsheet/index",
                "title": {
                    "aspnet-mvc": " ASP.NET MVC Spreadsheet control example"
                },
                "meta": {
                    "aspnet-mvc": "In this demo for Kendo UI jQuery-powered Spreadsheet in ASP.NET MVC you will see all basic functionalities of the extension."
                }
            },
            {
                "text": "Sorting and Filtering",
                "url": "spreadsheet/sorting-filtering",
                "title": {
                    "aspnet-mvc": "Sorting and filtering"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows the sorting and filtering support that Kendo UI Spreadsheet provides"
                }
            },
            {
                "text": "Server Import/Export",
                "url": "spreadsheet/server-side-import-export",
                "title": {
                    "aspnet-mvc": "Kendo Spreadsheet integration with the Telerik Document Processing Library"
                },
                "meta": {
                    "aspnet-mvc": "Export to and import from Microsoft Excel (.xlsx), CSV, Text and JSON files"
                },
                "packages": [
                    "!mvc-core"
                ],
                "sources": {
                    "aspnet-mvc": [
                        {
                            "name": "Sheets settings",
                            "url": "~/content/web/spreadsheet/prices.json"
                        }
                    ]
                }
            },
            {
                "text": "Server Export to PDF",
                "url": "spreadsheet/server-side-pdf-export",
                "title": {
                    "aspnet-mvc": "Kendo Spreadsheet PDF Export with the Telerik Document Processing Library"
                },
                "meta": {
                    "aspnet-mvc": "Export to print-ready PDF files"
                },
                "packages": [
                    "!mvc-core"
                ]
            },
            {
                "text": "DataSource binding",
                "url": "spreadsheet/datasource",
                "title": {
                    "aspnet-mvc": "DataSource binding"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows the integration with the DataSource component that Kendo UI Spreadsheet provides"
                }
            },
            {
                "text": "Disabled cells",
                "url": "spreadsheet/disabled-cells",
                "title": {
                    "aspnet-mvc": "Disabled cells"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how to disable/enable editing in Kendo UI Spreadsheet provides for particular range"
                }
            },
            {
                "text": "Custom cell editors",
                "url": "spreadsheet/custom-editors",
                "title": {
                    "aspnet-mvc": "Custom editors"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how to define your own custom cell editors"
                }
            },
            {
                "text": "Events",
                "url": "spreadsheet/events",
                "title": {
                    "aspnet-mvc": "Events in Kendo UI Spreadsheet widget"
                },
                "meta": {
                    "aspnet-mvc": "This example shows events which are triggered in Kendo UI Spreadsheet widget."
                }
            },
            {
                "text": "Validation",
                "url": "spreadsheet/validation",
                "title": {
                    "aspnet-mvc": "Data validation in Kendo UI Spreadsheet widget"
                },
                "meta": {
                    "aspnet-mvc": "This example shows the data validation in Kendo UI Spreadsheet widget."
                }
            }
        ],
        "category": "Data Management"
    },
    {
        "text": "ListView",
        "name": "listview",
        "api": "web/listview",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/listview/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/listview"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/listview"
        },
        "spriteCssClass": "listViewIcon",
        "items": [
            {
                "text": "Basic usage",
                "url": "listview/index",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Listview demo | Telerik UI for ASP.NET MVC demos"
                },
                "meta": {
                    "aspnet-mvc": "Play with this basic example of Telerik Listview in ASP.NET MVC and find all features of the helper for Kendo UI Listview."
                }
            },
            {
                "text": "Binding to remote data",
                "url": "listview/remote-data-binding",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Listview binding to remote data | Telerik UI for ASP.NET MVC demos"
                },
                "meta": {
                    "aspnet-mvc": "This example and demo source code illustrate how the Telerik ASP.NET MVC ListView component can be bound to remote data using the DataSource component."
                }
            },
            {
                "text": "Custom data source",
                "url": "listview/custom-datasource"
            },
            {
                "text": "Editing",
                "url": "listview/editing",
                "title": {
                    "aspnet-mvc": "Editing records in ASP.NET MVC ListView control"
                },
                "meta": {
                    "aspnet-mvc": "This example demonstrates the option to easily edit records in ASP.NET MVC ListView component. Learn how to edit records and manipulate the behavior of the contents."
                }
            },
            {
                "text": "Selection",
                "url": "listview/selection",
                "title": {
                    "aspnet-mvc": "Items selection demo for ASP.NET MVC ListView control"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how items in ASP.NET MVC ListView can be selected. Find how to select multiple items and configure the behavior of the control."
                }
            },
            {
                "text": "RTL support",
                "url": "listview/right-to-left-support",
                "title": {
                    "aspnet-mvc": "RTL support in ASP.NET MVC ListView"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how the right-to-left feature is supported in ASP.NET MVC ListView component."
                }
            },
            {
                "text": "Keyboard navigation",
                "url": "listview/keyboard-navigation",
                "title": {
                    "aspnet-mvc": "Keyboard navigation in ASP.NET MVC ListView"
                },
                "meta": {
                    "aspnet-mvc": "In this example we will look at the supported keys and user actions in ASP.NET MVC ListView control."
                }
            }
        ],
        "category": "Data Management"
    },
    {
        "text": "PivotGrid",
        "name": "pivotgrid",
        "api": "web/pivotgrid",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/pivotgrid/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/pivotgrid"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/pivotgrid"
        },
        "spriteCssClass": "pivotGridIcon",
        "items": [
            {
                "text": "Basic usage",
                "url": "pivotgrid/index",
                "title": {
                    "aspnet-mvc": "jQuery PivotGrid control example | Kendo UI PivotGrid Demos"
                },
                "meta": {
                    "aspnet-mvc": "This demo for Kendo UI jQuery-based PivotGrid component shows how you can make a data summarization tool."
                }
            },
            {
                "text": "KPI measures",
                "url": "pivotgrid/kpi",
                "title": {
                    "aspnet-mvc": "Define KPI measures in Kendo UI PivotGrid"
                },
                "meta": {
                    "aspnet-mvc": "This demo for Kendo UI jQuery-based PivotGrid component shows how you can define KPI measures."
                }
            },
            {
                "text": "Remote binding",
                "url": "pivotgrid/remote-flat-data-binding",
                "title": {
                    "aspnet-mvc": "Binding Pivot Grid to flat remote data"
                },
                "meta": {
                    "aspnet-mvc": "This demo for Kendo UI jQuery-based PivotGrid component shows how you can poplate the widget with remote flat data."
                }
            },
            {
                "text": "Local binding",
                "url": "pivotgrid/local-flat-data-binding",
                "title": {
                    "aspnet-mvc": "Binding Pivot Grid to local data"
                },
                "meta": {
                    "aspnet-mvc": "This demo for Kendo UI jQuery-based PivotGrid component shows how you can poplate the widget with local flat data."
                }
            },
            {
                "text": "Templates",
                "url": "pivotgrid/templates",
                "title": {
                    "aspnet-mvc": "Customizing Pivot Grid apperience"
                },
                "meta": {
                    "aspnet-mvc": "This demo for Kendo UI jQuery-based PivotGrid component shows how you can customize the widget apperience."
                }
            },
            {
                "text": "Export to Excel",
                "url": "pivotgrid/excel-export",
                "title": {
                    "aspnet-mvc": "Exporting to MS Excel"
                },
                "meta": {
                    "aspnet-mvc": "Export Kendo UI PivotGrid as Microsoft Excel file"
                }
            },
            {
                "text": "Export to PDF",
                "url": "pivotgrid/pdf-export",
                "title": {
                    "aspnet-mvc": "Exporting to PDF"
                },
                "meta": {
                    "aspnet-mvc": "Export Kendo UI PivotGrid as PDF"
                }
            }
        ],
        "category": "Data Management"
    },
    {
        "text": "MaskedTextBox",
        "name": "maskedtextbox",
        "api": "web/maskedtextbox",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/maskedtextbox/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/maskedtextbox"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/maskedtextbox"
        },
        "spriteCssClass": "maskedtextboxIcon",
        "items": [
            {
                "text": "Basic usage",
                "url": "maskedtextbox/index",
                "title": {
                    "aspnet-mvc": "Primary features of ASP.NET MVC Mask Input | ASP.NET MVC demo"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows the core functionality of ASP.NET MVC MaskedTextBox component."
                }
            },
            {
                "text": "Events",
                "url": "maskedtextbox/events",
                "title": {
                    "aspnet-mvc": "Events in ASP.NET MVC MaskedTextBox control"
                },
                "meta": {
                    "aspnet-mvc": "This example shows events which are triggered in ASP.NET MVC MaskedTextBox component."
                }
            },
            {
                "text": "API",
                "url": "maskedtextbox/api",
                "title": {
                    "aspnet-mvc": "API Functions Demo for ASP.NET MVC MaskedTextBox"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows specific API functions for ASP.NET MVC MaskedTextBox component."
                }
            },
            {
                "text": "Globalization",
                "url": "maskedtextbox/globalization",
                "title": {
                    "aspnet-mvc": "Globalization Demo for ASP.NET MVC MaskedTextBox"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows ASP.NET MVC MaskedTextBox globalization support for decimal point, thousand separator and currency symbol."
                }
            },
            {
                "text": "RTL support",
                "url": "maskedtextbox/right-to-left-support",
                "title": {
                    "aspnet-mvc": "RTL support in ASP.NET MVC MaskedTextBox control"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how right-to-left input is implemented in ASP.NET MVC MaskedTextBox component to ensure the satisfaction of RTL language users."
                }
            },
            {
                "text": "Validation",
                "url": "maskedtextbox/validation",
                "title": {
                    "aspnet-mvc": "Validation Demo for ASP.NET MVC MaskedTextBox"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how to validate an incomplete control value in ASP.NET MVC MaskedTextBox"
                }
            }
        ],
        "category": "Editors"
    },
    {
        "text": "Menu",
        "name": "menu",
        "api": "web/menu",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/menu/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/menu"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/menu"
        },
        "spriteCssClass": "menuIcon",
        "items": [
            {
                "text": "Basic usage",
                "url": "menu/index",
                "title": {
                    "aspnet-mvc": "Basic usage of ASP.NET MVC Menu Navigation | ASP.NET MVC demo"
                },
                "meta": {
                    "aspnet-mvc": "In this ASP.NET MVC Menu demo we will demonstrates the rich features of the component and its basic usage for your app."
                }
            },
            {
                "text": "Images",
                "url": "menu/images",
                "title": {
                    "aspnet-mvc": "Images in ASP.NET MVC Menu control | ASP.NET MVC Demo"
                },
                "meta": {
                    "aspnet-mvc": "This ASP.NET MVC Menu example shows the feature that allows you to use menu with images. They are loaded from a specific URL or arranged in image sprite CSS class."
                }
            },
            {
                "text": "Direction",
                "url": "menu/direction",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Menu direction demo"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how the pop-up direction of the items in ASP.NET MVC dropdown menu can be changed, depending on your web app development needs."
                }
            },
            {
                "text": "Orientation",
                "title": {
                    "aspnet-mvc": "Orientation of dropdown menus in ASP.NET MVC Menu"
                },
                "url": "menu/orientation",
                "meta": {
                    "aspnet-mvc": "In this example we will see how the orientation of the ASP.NET MVC Menu can be easily modified through the orientation settings."
                }
            },
            {
                "text": "SiteMapBinding",
                "url": "menu/sitemapbinding"
            },
            {
                "text": "ModelBinding",
                "url": "menu/modelbinding"
            },
            {
                "text": "Animation effects",
                "url": "menu/animation",
                "title": {
                    "aspnet-mvc": "Animation effects example in ASP.NET MVC Menu"
                },
                "meta": {
                    "aspnet-mvc": "This sample demonstrates how ASP.NET MVC Menu dropdown control supports animation effects which can be easily customized to change the desired animation effect."
                }
            },
            {
                "text": "Events",
                "url": "menu/events",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Menu Events Sample | ASP.NET MVC Demos"
                },
                "meta": {
                    "aspnet-mvc": "This sample shows ASP.NET MVC Menu events which are enabled and the demo source code guides you how you can handle the events in your dropdown menu."
                }
            },
            {
                "text": "API",
                "url": "menu/api",
                "title": {
                    "aspnet-mvc": "API functions demo for ASP.NET MVC Menu"
                },
                "meta": {
                    "aspnet-mvc": "This demo illustrates how the API functions of ASP.NET MVC Menu control operate and how you can configure them for your web project."
                }
            },
            {
                "text": "Context Menu",
                "url": "menu/context-menu",
                "title": {
                    "aspnet-mvc": "Kendo UI Context Menu example"
                },
                "meta": {
                    "aspnet-mvc": "This example demonstrates how to use a Kendo UI ContextMenu widget."
                }
            },
            {
                "text": "RTL support",
                "url": "menu/right-to-left-support",
                "title": {
                    "aspnet-mvc": "Right-to-left support in ASP.NET MVC Menu | ASP.NET MVC Demo"
                },
                "meta": {
                    "aspnet-mvc": "Review how the RTL feature is enabled for the dropdown items in ASP.NET MVC Menu and in the menu labels of the control."
                }
            },
            {
                "text": "Keyboard navigation",
                "url": "menu/keyboard-navigation",
                "title": {
                    "aspnet-mvc": "Keyboard navigation in ASP.NET MVC Menu"
                },
                "meta": {
                    "aspnet-mvc": "This example demonstrates the keyboard navigation support feature in ASP.NET MVC Menu."
                }
            }
        ],
        "category": "Navigation"
    },
    {
        "text": "MultiSelect",
        "name": "multiselect",
        "api": "web/multiselect",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/multiselect/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/multi-select"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/multiselect"
        },
        "spriteCssClass": "multiselectIcon",
        "items": [
            {
                "text": "Basic usage",
                "url": "multiselect/index",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC MultiSelect control demo | UI for ASP.NET MVC Demos"
                },
                "meta": {
                    "aspnet-mvc": "Play with this demo to see the core functionality of Telerik ASP.NET MVC MultiSelect control."
                }
            },
            {
                "text": "Server filtering",
                "url": "multiselect/serverfiltering",
                "title": {
                    "aspnet-mvc": "Example of Server filtering in ASP.NET MVC MultiSelect control"
                },
                "meta": {
                    "aspnet-mvc": "See how the auto-searchable dropdown list of ASP.NET MVC MultiSelect is filtered on the the server based on the input."
                }
            },
            {
                "text": "Virtualization",
                "url": "multiselect/virtualization",
                "title": {
                    "aspnet-mvc": "Example of virtualization in ASP.NET MVC MultiSelect control"
                },
                "meta": {
                    "aspnet-mvc": "See how the auto-searchable dropdown list of ASP.NET MVC MultiSelect is virtualized."
                }
            },
            {
                "text": "Grouping",
                "url": "multiselect/grouping",
                "title": {
                    "aspnet-mvc": "Example of grouping in ASP.NET MVC MultiSelect control"
                },
                "meta": {
                    "aspnet-mvc": "See how the auto-searchable dropdown list of ASP.NET MVC MultiSelect displays grouped data."
                }
            },
            {
                "text": "Client filtering",
                "url": "multiselect/clientfiltering"
            },
            {
                "text": "Customizing templates",
                "url": "multiselect/template",
                "new": true,
                "title": {
                    "aspnet-mvc": "Templates customization of ASP.NET MVC MultiSelect control"
                },
                "meta": {
                    "aspnet-mvc": "This ASP.NET MVC MultiSelect demo shows how the template of the control can be customized to change the appearance of items and tags."
                }
            },
            {
                "text": "Events",
                "url": "multiselect/events",
                "title": {
                    "aspnet-mvc": "Events in ASP.NET MVC MultiSelect Component | ASP.NET MVC Demo"
                },
                "meta": {
                    "aspnet-mvc": "This demo demonstrates the events which are triggered in ASP.NET MVC MultiSelect upon user's selection of an item from the drop-down list."
                }
            },
            {
                "text": "API",
                "url": "multiselect/api",
                "title": {
                    "aspnet-mvc": "API of ASP.NET MVC MultiSelect control | ASP.NET MVC Demo"
                },
                "meta": {
                    "aspnet-mvc": "In this demo you will find more about the API functions of ASP.NET MVC MultiSelect control."
                }
            },
            {
                "text": "Tag mode",
                "url": "multiselect/tag-mode",
                "title": {
                    "aspnet-mvc": "Tag mode of ASP.NET MVC MultiSelect control | ASP.NET MVC Demo"
                },
                "meta": {
                    "aspnet-mvc": "In this demo you will find more about the Tag mode feature of ASP.NET MVC MultiSelect control."
                }
            },
            {
                "text": "RTL support",
                "url": "multiselect/right-to-left-support",
                "title": {
                    "aspnet-mvc": "RTL support in ASP.NET MVC MultiSelect control | ASP.NET MVC demo"
                },
                "meta": {
                    "aspnet-mvc": "This example shows how RTL support is enabled in ASP.NET MVC MultiSelect. Any application or mobile website will be now intuitive for RTL language users."
                }
            },
            {
                "text": "Keyboard navigation",
                "url": "multiselect/keyboard-navigation",
                "title": {
                    "aspnet-mvc": "Keyboard navigation in ASP.NET MVC MultiSelect component"
                },
                "meta": {
                    "aspnet-mvc": "This demo demostrates the keyboard navigation for ASP.NET MVC MultiSelect control. Learn more about how you can use the keyboard shortcuts for easier navigation."
                }
            }
        ],
        "category": "Editors"
    },
    {
        "text": "Notification",
        "name": "notification",
        "api": "web/notification",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/notification/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/notification"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/notification"
        },
        "spriteCssClass": "notificationIcon",
        "items": [
            {
                "text": "Basic usage",
                "url": "notification/index",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Notification Extension demo"
                },
                "meta": {
                    "aspnet-mvc": "In this example you will see all options to show and hide a notification in ASP.NET MVC."
                }
            },
            {
                "text": "Position and stacking",
                "url": "notification/position-stacking",
                "title": {
                    "aspnet-mvc": "Position and stacking of ASP.NET MVC Notification | ASP.NET MVC"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows the position and stacking behavior of the ASP.NET MVC Notification component."
                }
            },
            {
                "text": "Templates",
                "url": "notification/templates",
                "title": {
                    "aspnet-mvc": " Layout notification templates for ASP.NET MVC"
                },
                "meta": {
                    "aspnet-mvc": "In this example you will see how Telerik notification templates could be modified in ASP.NET MVC."
                }
            },
            {
                "text": "Events",
                "url": "notification/events",
                "title": {
                    "aspnet-mvc": "Events of ASP.NET MVC Notification | ASP.NET MVC demo"
                },
                "meta": {
                    "aspnet-mvc": "Demo about using events and handlers with the ASP.NET MVC Notification component."
                }
            },
            {
                "text": "API",
                "url": "notification/api",
                "title": {
                    "aspnet-mvc": "API of ASP.NET MVC Notification | UI for ASP.NET MVC demo"
                },
                "meta": {
                    "aspnet-mvc": "Demo about using the API of the ASP.NET MVC Notification component."
                }
            },
            {
                "text": "RTL support",
                "url": "notification/right-to-left-support",
                "title": {
                    "aspnet-mvc": "RTL Support for ASP.NET MVC Notification | ASP.NET MVC demo"
                },
                "meta": {
                    "aspnet-mvc": "Demo about the RTL support of the ASP.NET MVC Notification component."
                }
            }
        ],
        "category": "Layout"
    },
    {
        "text": "NumericTextBox",
        "name": "numerictextbox",
        "api": "web/numerictextbox",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/numerictextbox/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/numeric-textbox"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/numerictextbox"
        },
        "spriteCssClass": "numericTextBoxIcon",
        "items": [
            {
                "text": "Basic usage",
                "url": "numerictextbox/index",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC NumericTextBox control demo"
                },
                "meta": {
                    "aspnet-mvc": "This example illustrates how to use all core features of Telerik NumericTextBox for ASP.NET MVC."
                }
            },
            {
                "text": "Precision",
                "url": "numerictextbox/precision",
                "new": "true",
                "title": {
                    "aspnet-mvc": "The precision features of Kendo UI Numeric TextBox | Kendo UI Web demo"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows the precision functionality of KendoNumericTextBox component."
                }
            },
            {
                "text": "Events",
                "url": "numerictextbox/events",
                "title": {
                    "aspnet-mvc": "Events in ASP.NET MVC NumericTextBox control"
                },
                "meta": {
                    "aspnet-mvc": "This example shows events which are triggered in ASP.NET MVC NumericTextBox control."
                }
            },
            {
                "text": "API",
                "url": "numerictextbox/api",
                "title": {
                    "aspnet-mvc": "API Functions Demo for ASP.NET MVC NumericTextBox"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows specific API functions for ASP.NET MVC NumericTextBox component."
                }
            },
            {
                "text": "Globalization",
                "url": "numerictextbox/globalization"
            },
            {
                "text": "RTL support",
                "url": "numerictextbox/right-to-left-support",
                "title": {
                    "aspnet-mvc": "RTL support in ASP.NET MVC NumericTextBox control"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how right-to-left input is implemented in ASP.NET MVC Numeric TextBox component to ensure the satisfaction of RTL language users."
                }
            },
            {
                "text": "Keyboard navigation",
                "url": "numerictextbox/keyboard-navigation",
                "title": {
                    "aspnet-mvc": "Keyboard navigation in ASP.NET MVC NumericTextBox"
                },
                "meta": {
                    "aspnet-mvc": "The value in ASP.NET MVC NumericTextBox can be increased or decreased by using keyboard navigation combinations. Take a look at the demo to learn how."
                }
            },
            {
                "text": "Range Validation",
                "url": "numerictextbox/validation",
                "new": true,
                "title": {
                    "aspnet-mvc": "Range validation in ASP.NET MVC NumericTextBox"
                },
                "meta": {
                    "aspnet-mvc": "The value in ASP.NET MVC NumericTextBox can be restricted between min and max value using a custom Kendo UI Validator rules. Take a look at the demo to learn how."
                }
            },
            {
                "text": "Tag Helper",
                "url": "numerictextbox/tag-helper",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC NumericTextBox Tag Helper sample"
                },
                "packages": [
                    "mvc-core"
                ]
            }
        ],
        "category": "Editors"
    },
    {
        "text": "PanelBar",
        "name": "panelbar",
        "api": "web/panelbar",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/panelbar/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/panelbar"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/panelbar"
        },
        "spriteCssClass": "panelBarIcon",
        "items": [
            {
                "text": "Basic usage",
                "url": "panelbar/index",
                "title": {
                    "aspnet-mvc": "Basic usage of ASP.NET MVC PanelBar conrol"
                },
                "meta": {
                    "aspnet-mvc": "This example shows the core features of ASP.NET MVC Accordion component."
                }
            },
            {
                "text": "Images",
                "url": "panelbar/images",
                "title": {
                    "aspnet-mvc": "Example of images in ASP.NET MVC PanelBar control"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how images and sprites can be implemented in ASP.NET MVC Expandable PanelBar component."
                }
            },
            {
                "text": "Loading content with AJAX",
                "url": "panelbar/ajax",
                "title": {
                    "aspnet-mvc": "Example of loading content with AJAX in ASP.NET MVC Accordion"
                },
                "meta": {
                    "aspnet-mvc": "This example shows how content is loaded in ASP.NET MVC PanelBar component with AJAX."
                },
                "requiresServer": "true"
            },
            {
                "text": "Animation effects",
                "url": "panelbar/animation",
                "title": {
                    "aspnet-mvc": "Animation effects example in ASP.NET MVC Accordion component"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how animations effects can be easily implemented into ASP.NET MVC PanelBar control."
                }
            },
            {
                "text": "Events",
                "url": "panelbar/events",
                "title": {
                    "aspnet-mvc": "Events in ASP.NET MVC accordion control | ASP.NET MVC PanelBar"
                },
                "meta": {
                    "aspnet-mvc": "This example demonstrates how events work in ASP.NET MVC PanelBar control and how you can set them to expand the content area of the accordion."
                },
                "requiresServer": "true"
            },
            {
                "text": "API",
                "url": "panelbar/api",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Accordion Control API Demo"
                },
                "meta": {
                    "aspnet-mvc": "This sample shows the API functions of ASP.NET MVC PanelBar component."
                }
            },
            {
                "text": "RTL support",
                "url": "panelbar/right-to-left-support",
                "title": {
                    "aspnet-mvc": "Keyboard navigation in ASP.NET MVC PanelBar | ASP.NET MVC demo"
                },
                "meta": {
                    "aspnet-mvc": "See how directions of the arrows in ASP.NET MVC PanelBar are easily changed when moving from right to left."
                }
            },
            {
                "text": "Keyboard navigation",
                "url": "panelbar/keyboard-navigation",
                "title": {
                    "aspnet-mvc": "Demo for keyboard navigation in ASP.NET MVC Collapsible Panel"
                },
                "meta": {
                    "aspnet-mvc": "Users can navigate in ASP.NET MVC PanelBar by using the keyboard and different keyboard combinations. Play with the demo and implement the feature in your app."
                }
            }
        ],
        "category": "Navigation"
    },
    {
        "text": "ProgressBar",
        "name": "progressbar",
        "api": "web/progressbar",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/progressbar/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/progressbar"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/progressbar"
        },
        "spriteCssClass": "progressBarIcon",
        "items": [
            {
                "text": "Basic usage",
                "url": "progressbar/index",
                "title": {
                    "aspnet-mvc": "Basic usage of ASP.NET MVC ProgressBar control"
                },
                "meta": {
                    "aspnet-mvc": "This example shows the core features of ASP.NET MVC ProgressBar component."
                }
            },
            {
                "text": "Chunk ProgressBar",
                "url": "progressbar/chunk",
                "title": {
                    "aspnet-mvc": "Displaying a progress in chunks in ASP.NET MVC ProgressBar"
                },
                "meta": {
                    "aspnet-mvc": "See how you can display chunks of progress in ASP.NET MVC ProgressBar."
                }
            },
            {
                "text": "Vertical ProgressBar",
                "url": "progressbar/vertical",
                "title": {
                    "aspnet-mvc": "Displaying a vertical progress in ASP.NET MVC ProgressBar"
                },
                "meta": {
                    "aspnet-mvc": "ASP.NET MVC ProgressBar can be oriented both horizontally and vertically. See how and play with the demo."
                }
            },
            {
                "text": "Custom Label",
                "url": "progressbar/customlabel",
                "title": {
                    "aspnet-mvc": "Displaying a custom progress label in ASP.NET MVC ProgressBar"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how you can display custom progress label in ASP.NET MVC ProgressBar to indicate the level of progress."
                }
            },
            {
                "text": "Events",
                "url": "progressbar/events",
                "title": {
                    "aspnet-mvc": "Events in ASP.NET MVC ProgressBar control"
                },
                "meta": {
                    "aspnet-mvc": "This example demonstrates how events work in ASP.NET MVC ProgressBar control."
                }
            },
            {
                "text": "API",
                "url": "progressbar/api",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC ProgressBar API demo"
                },
                "meta": {
                    "aspnet-mvc": "This sample shows the API functions of ASP.NET MVC ProgressBar component."
                }
            },
            {
                "text": "RTL Support",
                "url": "progressbar/right-to-left-support",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC ProgressBar RTL Support"
                },
                "meta": {
                    "aspnet-mvc": "Demo about the right-to-left (RTL) support of the ASP.NET MVC ProgressBar component."
                }
            }
        ],
        "category": "Interactivity & UX"
    },
    {
        "text": "Gantt",
        "name": "gantt",
        "api": "web/gantt",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/gantt/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/gantt"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/gantt"
        },
        "spriteCssClass": "ganttIcon",
        "items": [
            {
                "text": "Basic usage",
                "url": "gantt/index",
                "title": {
                    "aspnet-mvc": "Example of Kendo UI jQuery-based Gantt chart"
                },
                "meta": {
                    "aspnet-mvc": "Explore the example of HTML5 gantt chart widget, included in Kendo UI Web, to find how easy it is to add a gantt chart to your website or web app."
                }
            },
            {
                "text": "Column resizing",
                "url": "gantt/column-resizing",
                "title": {
                    "aspnet-mvc": "Column resizing in Telerik ASP.NET MVC Gantt"
                },
                "meta": {
                    "aspnet-mvc": "In this demo you can see how simple it is to resize columns in the Telerik ASP.NET MVC Gantt."
                }
            },
            {
                "text": "Export to PDF",
                "url": "gantt/pdf-export",
                "title": {
                    "aspnet-mvc": "Exporting to PDF"
                },
                "meta": {
                    "aspnet-mvc": "Export Kendo UI gantt as PDF file"
                }
            },
            {
                "text": "Resources",
                "url": "gantt/resources",
                "title": {
                    "aspnet-mvc": "Resources in Kendo UI Gantt"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how to assign resources to gantt tasks."
                }
            },
            {
                "text": "Events",
                "url": "gantt/events",
                "title": {
                    "aspnet-mvc": "Example of using events in Kendo UI Gantt control"
                },
                "meta": {
                    "aspnet-mvc": "This example demonstrates different events which are available in KendoGantt widget and the code explains how you can use them for your project."
                }
            },
            {
                "text": "API",
                "url": "gantt/api",
                "title": {
                    "aspnet-mvc": "Kendo UI Gantt API Functions Example"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows API Functions of KendoGantt. Demo Source Code will show you how to call methods on the widget instance to script its behavior."
                }
            },
            {
                "text": "Keyboard navigation",
                "url": "gantt/keyboard-navigation",
                "title": {
                    "aspnet-mvc": "Keyboard navigation in Kendo UI Gantt"
                },
                "meta": {
                    "aspnet-mvc": "Look at this Kendo UI Gantt demo to learn how different keyboard combinations could be used to navigate in the component."
                }
            },
            {
                "text": "RTL Support",
                "url": "gantt/right-to-left-support",
                "title": {
                    "aspnet-mvc": "Right-to-left (RTL) support of Kendo UI Gantt"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows the Right-to-left (RTL) support of Kendo UI Gantt."
                }
            },
            {
                "text": "Task Template",
                "url": "gantt/task-template",
                "title": {
                    "aspnet-mvc": "Task template support of Kendo UI Gantt"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows the Task template support of Kendo UI Gantt."
                }
            },
            {
                "text": "Server binding",
                "url": "gantt/serverbinding"
            }
        ],
        "category": "Scheduling"
    },
    {
        "text": "Responsive Panel",
        "name": "responsive-panel",
        "api": "web/responsivepanel",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/responsivepanel/mvc-responsivepanel-overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/responsivepanel"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/mvc-responsivepanel"
        },
        "spriteCssClass": "responsivePanelIcon",
        "items": [
            {
                "text": "Basic usage",
                "url": "responsive-panel/index",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC ResponsivePanel Control Demo"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows the basic functionality of the Telerik ASP.NET MVC ResponsivePanel control."
                },
                "packages": [
                    "!mvc-core"
                ]
            }
        ],
        "category": "Layout"
    },
    {
        "text": "Scheduler",
        "name": "scheduler",
        "api": "web/scheduler",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/scheduler/mvc-scheduler-overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/scheduler"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/mvc-scheduler"
        },
        "spriteCssClass": "schedulerIcon",
        "items": [
            {
                "text": "Basic usage",
                "url": "scheduler/index",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Scheduler Control Demo"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows the basic functionality and UI of the Telerik ASP.NET MVC Scheduler control."
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik ASP.NET MVC Scheduler component allows you to easily display, edit and schedule appointments. You can display day, week, month and agenda views, group horizontally and vertically and enjoy out-of-the-box templates.</p> <p>You can find additional information on how to use the Scheduler in <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/scheduler/ajax-editing\" target=\"_blank\">this section</a> of the product documentation.</p> <p><strong>Key Features</strong></p> <ul> <li>Day, Week, Work Week, Month, Agenda and Timeline views</li> <li>Multiple Resources and Resource Grouping</li> <li>Templates for Appointments</li> <li>Time Zone Support</li> <li>Simple-to-Customize Look and Feel</li> <li>Rich API for maximum flexibility</li> <li>Export to PDF</li> <li>Accessibility, keyboard navigation and RTL Support</li> <li>Rich cross-browser and mobile support</li> <li>Responsive HTML 5 Rendering</li> </ul> <p>More about <a href=\"http://www.telerik.com/aspnet-mvc/scheduler\">Scheduler for ASP.NET MVC</a></p>"
                }
            },
            {
                "text": "Timeline view",
                "url": "scheduler/timeline",
                "title": {
                    "aspnet-mvc": "Timeline view in Kendo UI Scheduler"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows the Timeline, Timeline Week and Timeline Work Week views."
                },
                "group": "Functionality",
                "description": {
                    "aspnet-mvc": "<p>The Scheduler's Timeline view allows you to display a variable number of appointment slots and define their duration. You can use the Timeline to provide end-users with an overview for scheduling purposes.</p> <p>You can define and show the available time line views through the Views -&gt; TimelineView, TimelineWeekView, TimelineWorkWeekView and TimelineMonthView settings. You can further customize these views by setting their StartTime, EndTime, MajorTick, ShowWorkHours, WorkDayStart, WorkDayEnd, WorkWeekStart, WorkWeekEnd and other properties.</p>"
                }
            },
            {
                "text": "Export to PDF",
                "url": "scheduler/pdf-export",
                "title": {
                    "aspnet-mvc": "Exporting to PDF"
                },
                "meta": {
                    "aspnet-mvc": "Export Kendo UI scheduler as PDF file"
                },
                "description": {
                    "aspnet-mvc": "<p>Nowadays, the PDF format is very popular and widely used to present documents in a manner independent of application software, hardware and operating systems. This demo demonstrates how to export the Telerik MVC Scheduler contents to PDF.</p> <p>The approach is very straight-forward - to export the content to PDF include the corresponding command to the scheduler&rsquo;s toolbar&nbsp;.Toolbar(t =&gt; t.Pdf())<span> </span>and configure the export settings through the Pdf attribute. You can specify the file name and whether to export all pages, margins, paper size, font and other.</p>"
                }
            },
            {
                "text": "Resources",
                "url": "scheduler/resources",
                "title": {
                    "aspnet-mvc": "Resources in ASP.NET MVC Scheduler"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how to assign resources to events in ASP.NET MVC Scheduler."
                },
                "description": {
                    "aspnet-mvc": "<p>Telerik MVC Scheduler extension allows you to assign scheduler events to a set of predefined resources. The resources can be divided on:</p> <ul> <li>Single Instance Resources &ndash; when only one instance can be assigned to a scheduler event. This is for example a list of meetings (Scheduler events), which are held in two rooms (resources). Since a meeting can be held in only one room it can be considered a single resource.</li> <li>Multiple Instance Resources<span> - </span>when more than one instance can be assigned to a scheduler event. For example when there is a list of meetings and meeting attendees. Since more than one attendee can participate in a meeting, it is a multiple instance resource. You can enable this feature through the Resources -&gt; .Multiple(true) setting.</li> </ul> <p>The Scheduler supports also unlimited resource types. For example you can combine single and multiple resource as shown in this demo.</p> <p>You can find more information on how to define and configure Scheduler resources in this <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/scheduler/mvc-scheduler-resources\">documentation article</a>.</p>"
                }
            },
            {
                "text": "Horizontal Grouping",
                "url": "scheduler/resources-grouping-horizontal",
                "title": {
                    "aspnet-mvc": "Horizontal resources grouping in ASP.NET MVC Scheduler control"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how to group resources horizontally in ASP.NET MVC Scheduler."
                },
                "description": {
                    "aspnet-mvc": "<p>This demo illustrates how you can group the resources horizontally in ASP.NET MVC Scheduler. The direction of the grouping can be controlled with the Orientation property, i.e.</p> <p>.Group(group =&gt; group.Resources(\"Rooms\").Orientation(SchedulerGroupOrientation.Horizontal))</p> <p>The available options of the SchedulerGroupOrientation setting are Default, Horizontal and Vertical.</p>"
                }
            },
            {
                "text": "Vertical Grouping",
                "url": "scheduler/resources-grouping-vertical",
                "title": {
                    "aspnet-mvc": "Vertical resources grouping in ASP.NET MVC Scheduler control"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how to group resources vertically in ASP.NET MVC Scheduler."
                },
                "description": {
                    "aspnet-mvc": "<p>You can see in this example how to group the scheduler&rsquo;s resources vertically. The direction of the grouping can be controlled with the Orientation property, i.e.</p> <p>.Group(group =&gt; group.Resources(\"Rooms\", \"Attendees\").Orientation(SchedulerGroupOrientation.Vertical))</p> <p>The available orientation options are Default, Horizontal and Vertical.</p>"
                }
            },
            {
                "text": "Templates",
                "url": "scheduler/templates",
                "title": {
                    "aspnet-mvc": "Templates in ASP.NET MVC Scheduler"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how to use templates to customize the appearance of the scheduler events of your ASP.NET MVC app."
                },
                "description": {
                    "aspnet-mvc": "<p>This example illustrates how to use templates to customize the appearance of the scheduler events. You can use the eventTemplate setting to create a template for the scheduler&rsquo;s events. Other template settings provided by the widget are allDayEventTemplate, dateHeaderTemplate, groupHeaderTemplate, majorTimeHeaderTemplate and minorTimeHeaderTemplate.</p> <p>Templates use a simple templating syntax where the hash # symbol is used to mark areas in a template that should be replaced with data when the template is executed. The # character is also used to signify the beginning and end of custom JavaScript code inside the template.</p> <p>There are three ways to use the hash syntax:</p> <ol> <li>Render values as HTML: #= # </li> <li>Uses HTML encoding to display values: #: # </li> <li>Execute arbitrary JavaScript code: # if (true) { # ... non-script content here ... # } # </li> </ol> <p>You can find more information about the templates in this article: <a href=\"http://docs.telerik.com/kendo-ui/framework/templates/overview\">Kendo UI Templates Overview</a>.</p>"
                }
            },
            {
                "text": "Restrictions",
                "url": "scheduler/restriction",
                "title": {
                    "aspnet-mvc": "Restrictions in ASP.NET MVC Scheduler | UI for ASP.NET MVC Demos"
                },
                "meta": {
                    "aspnet-mvc": "Set restrictions to better control your resources with ASP.NET MVC Scheduler."
                },
                "description": {
                    "aspnet-mvc": "<p>This demo shows how you can restrict the events and better control your resources in ASP.NET MVC Scheduler using the client-side API of the component. You can prevent not only to the drag and resize capabilities of the appointments, but also allow or not the creation of a new event or the modification of an existing one by criteria defined by you.</p> <p>For example, double click on the \"Call Charlie about the project\" event, change the attendee to Bob and click SAVE. This will result into an error: \"This person is not available in this time period.\"</p> <p>You will also get an error \"This person is not available in this time period.\", if you change the start date of the \"HR Lecture\" event to 10:30 AM.</p>"
                }
            },
            {
                "text": "Event move & resize",
                "url": "scheduler/move-resize",
                "title": {
                    "aspnet-mvc": "Moving and resizing events in ASP.NET MVC Scheduler"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows the move and resize feature of ASP.NET MVC Scheduler."
                },
                "description": {
                    "aspnet-mvc": "<p>The ASP.NET MVC Scheduler allows you and your users to move and resize its events. In addition to this, you can also specify whether the scheduler will either snap events to the nearest slot during dragging (resizing or moving) or it will allow free moving and resizing of events. You can do that through the <a href=\"http://docs.telerik.com/kendo-ui/api/javascript/ui/scheduler#configuration-snap\">snap client-side bool property</a> of the scheduler as shown in this example.</p>"
                }
            },
            {
                "text": "Binding to SignalR",
                "url": "scheduler/signalr",
                "title": {
                    "aspnet-mvc": "Real-time Binding to SignalR Hub | UI for ASP.NET MVC demos"
                },
                "meta": {
                    "aspnet-mvc": "This example shows how the Telerik ASP.NET MVC Scheduler can be bound to SignalR Hub for real-time push notifications."
                },
                "group": "Data Binding",
                "description": {
                    "aspnet-mvc": "<p>This demo shows how the Telerik ASP.NET MVC Scheduler can be bound to a <a href=\"http://signalr.net\">SignalR</a> Hub for real-time push notifications. This is useful for web applications (chat, calendar and scheduling, gaming and other apps) which require high-frequency updates where you usually want to perform data updates in real-time on all connected clients.</p> <p>To configure the SignalR binding, set the <strong>SignalR</strong> and <strong>Transport</strong> settings in the Scheduler&rsquo;s DataSource configuration. In this way you instruct the data source to use SignalR protocol for transmitting and operating with data in real time. You can find more information in the following help article: <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/scheduler/how-to/signalr-local-hub-locking-events\">Scheduler SignalR Binding</a></p>"
                }
            },
            {
                "text": "Web API binding",
                "url": "scheduler/webapi"
            },
            {
                "text": "Custom data source",
                "url": "scheduler/custom-datasource"
            },
            {
                "text": "Events",
                "url": "scheduler/events",
                "title": {
                    "aspnet-mvc": "Events in ASP.NET MVC Scheduler"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how events are handled and triggered in ASP.NET MVC Scheduler."
                },
                "group": "API",
                "description": {
                    "aspnet-mvc": "<p>Telerik MVC Scheduler exposes rich API and events which provide easy configuration or extension points for customization on top of its built-in features.</p> <p>This example demonstrates how you can intercept the scheduler's events to output messages in the console when these events are raised. You can use these events for customizations or to execute custom logic, if necessary.</p>"
                }
            },
            {
                "text": "API",
                "url": "scheduler/api",
                "title": {
                    "aspnet-mvc": "API in Telerik ASP.NET MVC Scheduler component"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows the API of Telerik ASP.NET MVC Scheduler control."
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik Scheduler for ASP.NET MVC exposes rich client-side API and events, which provide easy configuration or extension points for custom functionality on top of the built-in features.</p> <p>In this demo, you can see how to get a reference to the scheduler's client-side object and using its date() and view() methods to update its current date and current view.</p> <p>You can find more information about its client-side API <a href=\"http://docs.telerik.com/KENDO-UI/api/javascript/ui/scheduler\">here</a>.</p>"
                }
            },
            {
                "text": "RTL Support",
                "url": "scheduler/right-to-left-support",
                "title": {
                    "aspnet-mvc": "Right-to-left (RTL) support for ASP.NET MVC Scheduler control"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows the Right-to-left (RTL) support for ASP.NET MVC Scheduler."
                },
                "group": "Accessibility and Internationalization",
                "description": {
                    "aspnet-mvc": "<p>The Telerik MVC Scheduler supports right-to-left languages and rendering. All you need to do is to register the <strong>kendo.rtl.min.css</strong> file (located at Kendo.Mvc.Examples\\Content\\web\\ installation folder) and wrap the scheduler in a container element with <strong>k-rtl</strong> class set for it, as demonstrated in this particular example.</p> <p>You can learn more for the right-to-left support of the components in <a href=\"http://docs.telerik.com/kendo-ui/accessibility/supporting-rtl-languages\" target=\"_blank\">this article</a>.</p>"
                }
            },
            {
                "text": "Keyboard Navigation",
                "url": "scheduler/selection",
                "title": {
                    "aspnet-mvc": "Selection and Keyboard navigation in ASP.NET MVC Scheduler"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows the selection and the different keyboard combinations that could be used to navigate in ASP.NET MVC Scheduler."
                },
                "description": {
                    "aspnet-mvc": "<p>The Scheduler offers extended keyboard navigation which allows you to focus the control, navigate over its cells, to select an appointment and modify it, to create new appointments, to switch between the available views as many more. This is especially useful for the visually impaired users. </p> <p>For more information on the supported keyboard shortcuts see the provided information box.</p>"
                }
            },
            {
                "text": "Globalization",
                "url": "scheduler/globalization"
            }
        ],
        "category": "Scheduling"
    },
    {
        "text": "Slider",
        "name": "slider",
        "api": "web/slider",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/slider/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/slider"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/slider"
        },
        "spriteCssClass": "sliderIcon",
        "items": [
            {
                "text": "Basic usage",
                "url": "slider/index",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Slider Extension Demo"
                },
                "meta": {
                    "aspnet-mvc": "This example illustrates how Telerik ASP.NET MVC Slider extension for Kendo UI Slider widget allows end users to interact with slider's main feature."
                }
            },
            {
                "text": "Events",
                "url": "slider/events",
                "title": {
                    "aspnet-mvc": "Events demo in ASP.NET MVC Slider control"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how events are handled and triggered in ASP.NET MVC Slider."
                }
            },
            {
                "text": "API",
                "url": "slider/api",
                "title": {
                    "aspnet-mvc": "API for Telerik ASP.NET MVC Slider control"
                },
                "meta": {
                    "aspnet-mvc": "This sample demonstrates how to use ASP.NET MVC Slider API functions. Play with range slider API functions and examine the demo for your specific scenario."
                }
            },
            {
                "text": "RTL support",
                "url": "slider/right-to-left-support",
                "title": {
                    "aspnet-mvc": "Right-to-left support in ASP.NET MVC Slider | ASP.NET MVC Demos"
                },
                "meta": {
                    "aspnet-mvc": "This demo illustrates how the right-to-left feature is enabled in ASP.NET MVC Slider control."
                }
            },
            {
                "text": "Keyboard navigation",
                "url": "slider/keyboard-navigation",
                "title": {
                    "aspnet-mvc": "Keyboard navigation in ASP.NET MVC Slider | ASP.NET MVC Demo"
                },
                "meta": {
                    "aspnet-mvc": "This demo illustrates the keyboard navigation feature of Telerik ASP.NET MVC Slider control."
                }
            }
        ],
        "category": "Editors"
    },
    {
        "text": "Sortable",
        "name": "sortable",
        "api": "web/sortable",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/sortable/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/sortable"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/sortable"
        },
        "spriteCssClass": "sortableIcon",
        "items": [
            {
                "text": "Basic usage",
                "url": "sortable/index",
                "title": {
                    "aspnet-mvc": "Demo for Sortable Component in ASP.NET MVC"
                },
                "meta": {
                    "aspnet-mvc": "See the basic functionality of ASP.NET MVC Sortable component which provides a cross-browser, touch-friendly way to reorder HTML elements via drag and drop."
                }
            },
            {
                "text": "Filter / Disable items",
                "url": "sortable/filter-disable",
                "title": {
                    "aspnet-mvc": "Filter and disable items in ASP.NET MVC Sortable control"
                },
                "meta": {
                    "aspnet-mvc": "See how you can filter and disable items in ASP.NET MVC Sortable which provides a cross-browser, touch-friendly way to reorder HTML elements via drag and drop."
                }
            },
            {
                "text": "Handlers",
                "url": "sortable/handlers",
                "title": {
                    "aspnet-mvc": "Demo for handler functionality of ASP.NET MVC Sortable Component"
                },
                "meta": {
                    "aspnet-mvc": "See the handler feature of ASP.NET MVC Sortable control which provides a cross-browser, touch-friendly way to reorder HTML elements via drag and drop."
                }
            },
            {
                "text": "Axis / Container constraints",
                "url": "sortable/constraints",
                "title": {
                    "aspnet-mvc": "Demo for axis / container functionality of ASP.NET MVC Sortable"
                },
                "meta": {
                    "aspnet-mvc": "See the axis/container restriction feature of ASP.NET MVC Sortable, which provides a cross-browser, touch-friendly way to reorder HTML elements via drag and drop."
                }
            },
            {
                "text": "Linked Lists",
                "url": "sortable/linkedlists",
                "title": {
                    "aspnet-mvc": "Linked list functionality of ASP.NET MVC Sortable control"
                },
                "meta": {
                    "aspnet-mvc": "Check out the linked lists feature of ASP.NET MVC Sortable component which provides a cross-browser, touch-friendly way to reorder HTML elements via drag and drop."
                }
            },
            {
                "text": "Events",
                "url": "sortable/events",
                "title": {
                    "aspnet-mvc": "Events example for ASP.NET MVC Sortable Component"
                },
                "meta": {
                    "aspnet-mvc": "This example shows events of ASP.NET MVC Sortable control."
                }
            },
            {
                "text": "Sortable panels",
                "url": "sortable/sortable-panels",
                "title": {
                    "aspnet-mvc": "Panels example for ASP.NET MVC Sortable Component"
                },
                "meta": {
                    "aspnet-mvc": "See how to sort panels with simple drag and drop in ASP.NET MVC Sortable."
                }
            },
            {
                "text": "Integration - Grid",
                "url": "sortable/integration-grid",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Grid integration with Sortable Component"
                },
                "meta": {
                    "aspnet-mvc": "This example demonstrates ASP.NET MVC Grid integration with Sortable Component."
                }
            },
            {
                "text": "Integration - ListView",
                "url": "sortable/integration-listview",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC ListView integration with Sortable Component"
                },
                "meta": {
                    "aspnet-mvc": "This example demonstrates ASP.NET MVC ListView integration with Sortable Component."
                },
                "packages": [
                    "!mvc-core"
                ]
            },
            {
                "text": "Integration - TabStrip",
                "url": "sortable/integration-tabstrip",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC TabStrip integration with Sortable Component"
                },
                "meta": {
                    "aspnet-mvc": "This example demonstrates ASP.NET MVC TabStrip integration with Sortable Component."
                },
                "packages": [
                    "!mvc-core"
                ]
            }
        ],
        "category": "Interactivity & UX"
    },
    {
        "text": "Splitter",
        "name": "splitter",
        "api": "web/splitter",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/splitter/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/splitter"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/splitter"
        },
        "spriteCssClass": "splitterIcon",
        "items": [
            {
                "text": "Basic usage",
                "url": "splitter/index",
                "title": {
                    "aspnet-mvc": "Splitter example in ASP.NET MVC | UI for ASP.NET MVC demos"
                },
                "meta": {
                    "aspnet-mvc": "In this Splitter demo you will learn how to configure Kendo UI jQuery-powered Splitter in ASP.NET MVC."
                }
            },
            {
                "text": "Loading content with AJAX",
                "url": "splitter/ajax",
                "title": {
                    "aspnet-mvc": "Loading content with AJAX in Telerik ASP.NET MVC Splitter"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how Telerik ASP.NET MVC Splitter control enables you to load content with AJAX."
                },
                "requiresServer": "true"
            },
            {
                "text": "Events",
                "url": "splitter/events",
                "title": {
                    "aspnet-mvc": "Events in ASP.NET MVC Splitter control | UI for ASP.NET MVC demo"
                },
                "meta": {
                    "aspnet-mvc": "See the events that change the behavior of ASP.NET MVC Splitter. Learn about resize events and Javascript function names to be called before the panel is collapsed."
                },
                "requiresServer": "true"
            },
            {
                "text": "API",
                "url": "splitter/api",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Splitter API Demo"
                },
                "meta": {
                    "aspnet-mvc": "This example shows how API of ASP.NET MVC Splitter control works. Find all API functions to expand/collapse content and resize the pane."
                },
                "requiresServer": "true"
            },
            {
                "text": "RTL support",
                "url": "splitter/right-to-left-support",
                "title": {
                    "aspnet-mvc": "Right-to-left support in ASP.NET MVC Splitter control"
                },
                "meta": {
                    "aspnet-mvc": "In this demo we will play with the right-to-left text input and visualization which is enabled in ASP.NET MVC Splitter control."
                }
            },
            {
                "text": "Keyboard navigation",
                "url": "splitter/keyboard-navigation",
                "title": {
                    "aspnet-mvc": "Keyboard navigation support in ASP.NET MVC Slider"
                },
                "meta": {
                    "aspnet-mvc": "Users can easily manipulate the behaviour of ASP.NET MVC Slider by using different keyboard keys and combinations."
                }
            }
        ],
        "category": "Layout"
    },
    {
        "text": "SpreadProcessing",
        "name": "spreadprocessing",
        "api": "http://docs.telerik.com/devtools/wpf/controls/radspreadprocessing/overview",
        "category": "Editors",
        "spriteCssClass": "spreadprocessingIcon",
        "new": "true",
        "items": [
            {
                "text": "Basic usage",
                "url": "spreadprocessing/index",
                "new": "true",
                "title": {
                    "aspnet-mvc": "Demo and source code for Telerik RadSpreadProcessing in MVC"
                },
                "meta": {
                    "aspnet-mvc": "See how the Telerik RadSpreadProcessing can be integrated in MVC applications."
                },
                "description": {
                    "aspnet-mvc": "With <strong>RadSpreadProcessing</strong> you can effortlessly convert documents from one to another file format among XLSX, CSV and TXT. Further, you can export any of these to PDF."
                }
            }
        ],
        "documentation": {
            "aspnet-mvc": "http://docs.telerik.com/devtools/wpf/controls/radspreadprocessing/overview"
        }
    },
    {
        "text": "TabStrip",
        "name": "tabstrip",
        "api": "web/tabstrip",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/tabstrip/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/tabstrip"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/tabstrip"
        },
        "spriteCssClass": "tabStripIcon",
        "items": [
            {
                "text": "Basic usage",
                "url": "tabstrip/index",
                "title": {
                    "aspnet-mvc": "Using Kendo UI jQuery-based Tabstrip widget in ASP.NET MVC "
                },
                "meta": {
                    "aspnet-mvc": "Look at this demo to learn how to use the ASP.NET MVC TabStrip HtmlHelper extension for the Kendo UI TabStrip widget."
                }
            },
            {
                "text": "Images",
                "url": "tabstrip/images",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC TabStrip with images | UI for ASP.NET MVC demo"
                },
                "meta": {
                    "aspnet-mvc": "This example shows how images are displayed in Telerik ASP.NET MVC TabStrip component."
                }
            },
            {
                "text": "Loading content with AJAX",
                "url": "tabstrip/ajax",
                "title": {
                    "aspnet-mvc": "Loading content with AJAX in Telerik TabStrip in ASP.NET MVC"
                },
                "meta": {
                    "aspnet-mvc": "This example illustrates how to load content with AJAX in Telerik TabStrip for ASP.NET MVC."
                },
                "requiresServer": "true"
            },
            {
                "text": "Animation effects",
                "url": "tabstrip/animation",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Tabs animation effects demo"
                },
                "meta": {
                    "aspnet-mvc": "This sample shows the supported animation effects in ASP.NET MVC TabStrip. You can play with the sample by changing the settings of the animation."
                }
            },
            {
                "text": "Tab position",
                "url": "tabstrip/tab-position",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC TabStrip tab position demo"
                },
                "meta": {
                    "aspnet-mvc": "This sample shows different tab position options for the ASP.NET MVC TabStrip."
                }
            },
            {
                "text": "Scrollable tabs",
                "url": "tabstrip/scrollable-tabs",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC TabStrip scrollable tabs demo"
                },
                "meta": {
                    "aspnet-mvc": "This sample shows auto scrollable tabs in the ASP.NET MVC TabStrip."
                }
            },
            {
                "text": "Events",
                "url": "tabstrip/events",
                "title": {
                    "aspnet-mvc": "Using events with ASP.NET MVC TabStrip HtmlHelper extension"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how to use events feature of Telerik ASP.NET MVC Tabstrip extension for Kendo UI Tabstrip widget."
                },
                "requiresServer": "true"
            },
            {
                "text": "API",
                "url": "tabstrip/api",
                "title": {
                    "aspnet-mvc": "API example for ASP.NET MVC TabStrip control"
                },
                "meta": {
                    "aspnet-mvc": "This sample shows how API functions in ASP.NET MVC TabStrip control work. Find the demo source code to play with ASP.NET MVC TabStrip API."
                }
            },
            {
                "text": "RTL support",
                "url": "tabstrip/right-to-left-support",
                "title": {
                    "aspnet-mvc": "RTL support in ASP.NET MVC TabStrip control | ASP.NET MVC Demos"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows the right-to-left feature, enabled in ASP.NET MVC TabStrip. Now users can easily reorder the tabs from right to left."
                }
            },
            {
                "text": "Keyboard navigation",
                "url": "tabstrip/keyboard-navigation",
                "title": {
                    "aspnet-mvc": "Keyboard navigation in ASP.NET MVC TabStrip"
                },
                "meta": {
                    "aspnet-mvc": "This ASP.NET MVC demo shows how end users of your app can intuitively use keyboard navigation in ASP.NET MVC TabStrip."
                }
            }
        ],
        "category": "Navigation"
    },
    {
        "text": "TimePicker",
        "name": "timepicker",
        "api": "web/timepicker",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/timepicker/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/date-time-pickers"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/datetime"
        },
        "spriteCssClass": "timePickerIcon",
        "items": [
            {
                "text": "Basic usage",
                "url": "timepicker/index",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC TimePicker example | UI for ASP.NET MVC demos"
                },
                "meta": {
                    "aspnet-mvc": "This example shows how to configure Telerik TimePicker ASP.NET MVC extension for Kendo UI Timepicker widget."
                }
            },
            {
                "text": "Range selection",
                "url": "timepicker/rangeselection",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC TimePicker Demo for selecting a time range"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows the flexible functionality of ASP.NET MVC TimePicker. Specify a range of visible hours and enable the user to select them from the dropdown list."
                }
            },
            {
                "text": "Events",
                "url": "timepicker/events",
                "title": {
                    "aspnet-mvc": "Events in Telerik ASP.NET MVC TimePicker"
                },
                "meta": {
                    "aspnet-mvc": "This example illustrates how events are used in Telerik ASP.NET MVC TimePicker control. Play with the demo, select time and find how the functionality works."
                }
            },
            {
                "text": "API",
                "url": "timepicker/api",
                "title": {
                    "aspnet-mvc": "API demo for ASP.NET MVC Time Picker"
                },
                "meta": {
                    "aspnet-mvc": "This example shows the API functions of ASP.NET MVC TimePicker."
                }
            },
            {
                "text": "Globalization",
                "url": "timepicker/globalization"
            },
            {
                "text": "RTL support",
                "url": "timepicker/right-to-left-support",
                "title": {
                    "aspnet-mvc": "Right to left support in ASP.NET MVC TimePicker"
                },
                "meta": {
                    "aspnet-mvc": "This sample illustrates the right to left functionality which Telerik ASP.NET MVC TimePicker supports."
                }
            },
            {
                "text": "Keyboard navigation",
                "url": "timepicker/keyboard-navigation",
                "title": {
                    "aspnet-mvc": "Keyboard navigation in ASP.NET MVC TimePicker"
                },
                "meta": {
                    "aspnet-mvc": "Users can intuitively select time in ASP.NET MVC TimePicker by simply using the keyboard support of the control."
                }
            },
            {
                "text": "Tag Helper",
                "url": "timepicker/tag-helper",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC TimePicker Tag Helper sample"
                },
                "packages": [
                    "mvc-core"
                ]
            }
        ],
        "category": "Editors"
    },
    {
        "text": "ToolBar",
        "name": "toolbar",
        "api": "web/toolbar",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/toolbar/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/toolbar"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/toolbar"
        },
        "spriteCssClass": "toolbarIcon",
        "items": [
            {
                "text": "Basic usage",
                "url": "toolbar/index",
                "title": {
                    "aspnet-mvc": "Basic usage of Kendo UI ToolBar Widget | Kendo UI Web demo"
                },
                "meta": {
                    "aspnet-mvc": "Play with this Kendo UI ToolBar demo to get familiar with the supported commands and core functionality."
                }
            },
            {
                "text": "Resizing",
                "url": "toolbar/resizing",
                "title": {
                    "aspnet-mvc": "Resizing demo of Kendo UI ToolBar Widget | Kendo UI Web demo"
                },
                "meta": {
                    "aspnet-mvc": "Play with this Kendo UI ToolBar demo to get familiar with the resizing functionality."
                }
            },
            {
                "text": "Events",
                "url": "toolbar/events",
                "title": {
                    "aspnet-mvc": "Events demo of Kendo UI ToolBar Widget | Kendo UI Web demo"
                },
                "meta": {
                    "aspnet-mvc": "Play with this Kendo UI ToolBar demo to get familiar with supported events."
                }
            },
            {
                "text": "API",
                "url": "toolbar/api",
                "title": {
                    "aspnet-mvc": "API demo of Kendo UI ToolBar Widget | Kendo UI Web demo"
                },
                "meta": {
                    "aspnet-mvc": "Play with this Kendo UI ToolBar demo to get familiar with supported API methods."
                }
            },
            {
                "text": "Integration with Editors",
                "url": "toolbar/integration",
                "title": {
                    "aspnet-mvc": "Integration demo of Kendo UI ToolBar Widget | Kendo UI Web demo"
                },
                "meta": {
                    "aspnet-mvc": "Play with this Kendo UI ToolBar demo to learn how to include Kendo UI Editor widgets in the ToolBar."
                }
            },
            {
                "text": "Keyboard navigation",
                "url": "toolbar/keyboard-navigation",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC ToolBar control | Keyboard support demo"
                },
                "meta": {
                    "aspnet-mvc": "Look at the source code and play with the demo to find out more about the keyboard support feature in ASP.NET MVC ToolBar."
                },
                "packages": [
                    "!mvc-core"
                ]
            },
            {
                "text": "RTL Support",
                "disableInMobile": true,
                "url": "toolbar/right-to-left-support",
                "title": {
                    "aspnet-mvc": "Right to left support in ASP.NET MVC Toolbar"
                },
                "meta": {
                    "aspnet-mvc": "The sample illustrates the right to left functionality which Telerik ASP.NET MVC Toolbar supports."
                },
                "packages": [
                    "!mvc-core"
                ]
            }
        ],
        "category": "Navigation"
    },
    {
        "text": "Tooltip",
        "name": "tooltip",
        "api": "web/tooltip",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/tooltip/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/tooltip"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/tooltip"
        },
        "spriteCssClass": "tooltipIcon",
        "items": [
            {
                "text": "Basic usage",
                "url": "tooltip/index",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC jQuery Tooltip Demo"
                },
                "meta": {
                    "aspnet-mvc": "Look at this example of Telerik jQuery-based toolip in ASP.NET MVC and explore all features of the extension. "
                }
            },
            {
                "text": "Loading content with AJAX",
                "url": "tooltip/ajax",
                "title": {
                    "aspnet-mvc": "AJAX loaded content with ASP.NET MVCTooltip control"
                },
                "meta": {
                    "aspnet-mvc": "This example illustrates how the content in ASP.NET MVC Tooltip control can be loaded, using AJAX."
                },
                "requiresServer": "true"
            },
            {
                "text": "Content template",
                "url": "tooltip/template",
                "title": {
                    "aspnet-mvc": "Content template sample for Telerik ASP.NET MVC Tooltip extension"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how  you can use a content template with Telerik jQuery-based tooltip for ASP.NET MVC."
                }
            },
            {
                "text": "Events",
                "url": "tooltip/events",
                "title": {
                    "aspnet-mvc": "Events in Telerik ASP.NET MVC Tooltip"
                },
                "meta": {
                    "aspnet-mvc": "In this demo we will show how events are triggered in Telerik Tooltip extension in ASP.NET MVC."
                }
            },
            {
                "text": "API",
                "url": "tooltip/api",
                "title": {
                    "aspnet-mvc": "API for ASP.NET MVC Tooltip component | UI for ASP.NET MVC demo"
                },
                "meta": {
                    "aspnet-mvc": "This example shows how the API functions are enabled in ASP.NET MVC Tooltip control."
                }
            }
        ],
        "category": "Layout"
    },
    {
        "text": "TreeList",
        "name": "treelist",
        "api": "web/treelist",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/treelist/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/treelist"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/treelist"
        },
        "spriteCssClass": "treeListIcon",
        "items": [
            {
                "text": "Basic usage",
                "url": "treelist/index",
                "title": {
                    "aspnet-mvc": "Kendo UI TreeList widget | Kendo UI Web demo"
                },
                "meta": {
                    "aspnet-mvc": "This demo illustrates the basic usage and functionality of Kendo UI jQuery TreeList widget which represents items in a hierarchical tree structure."
                }
            },
            {
                "text": "Binding to remote data",
                "url": "treelist/remote-data-binding",
                "title": {
                    "aspnet-mvc": "Binding Kendo UI TreeList component to remote data"
                },
                "meta": {
                    "aspnet-mvc": "This example illustrates how the treelist can be bound to remote data and each level is requested asynchronously."
                }
            },
            {
                "text": "Drag & drop",
                "url": "treelist/dragdrop",
                "title": {
                    "aspnet-mvc": "Kendo UI TreeList widget | Kendo UI Web demo"
                },
                "meta": {
                    "aspnet-mvc": "This demo illustrates how to use drag & drop to allow users to rearrange treelist items"
                }
            },
            {
                "text": "Editing",
                "url": "treelist/editing",
                "title": {
                    "aspnet-mvc": "Kendo UI TreeList widget | Kendo UI Web demo"
                },
                "meta": {
                    "aspnet-mvc": "This demo illustrates how editing works within the Kendo UI jQuery TreeList widget which represents items in a hierarchical tree structure."
                }
            },
            {
                "text": "Popup editing",
                "url": "treelist/editing-popup",
                "title": {
                    "aspnet-mvc": "Popup data editing example for Kendo UI TreeList widget"
                },
                "meta": {
                    "aspnet-mvc": "This demo illustrates how the records in KendoTreeList can be easily modified in a pop-up dialog."
                }
            },
            {
                "text": "Column resizing",
                "url": "treelist/column-resizing",
                "title": {
                    "aspnet-mvc": "Column resizing in Telerik ASP.NET MVC TreeList"
                },
                "meta": {
                    "aspnet-mvc": "In this demo you can see how simple it is to resize columns in the Telerik ASP.NET MVC TreeList."
                }
            },
            {
                "text": "Column reordering",
                "url": "treelist/column-reordering",
                "title": {
                    "aspnet-mvc": "Column Reordering in Telerik ASP.NET MVC TreeList"
                },
                "meta": {
                    "aspnet-mvc": "In this demo you can see how simple it is to reorder columns in Telerik ASP.NET MVC TreeList."
                }
            },
            {
                "text": "Column menu",
                "url": "treelist/column-menu",
                "title": {
                    "aspnet-mvc": "Column menu functionality of Telerik ASP.NET MVC TreeList"
                },
                "meta": {
                    "aspnet-mvc": "This Telerik example shows column menu functionality in the TreeList extension for ASP.NET MVC."
                }
            },
            {
                "text": "Frozen columns",
                "url": "treelist/frozen-columns",
                "title": {
                    "aspnet-mvc": "Frozen columns demo in Telerik ASP.NET MVC TreeList"
                },
                "meta": {
                    "aspnet-mvc": "Play with the demo for frozen columns functionality of Telerik ASP.NET MVC TreeList."
                }
            },
            {
                "text": "Aggregates",
                "url": "treelist/aggregates",
                "title": {
                    "aspnet-mvc": "Aggregating option demo for KendoTreeList jQuery control"
                },
                "meta": {
                    "aspnet-mvc": "This example demonstrates the aggregate option for KendoTreeList. Use demo source code to enable the TreeList to calculate aggregated values."
                }
            },
            {
                "text": "Export to Excel",
                "url": "treelist/excel-export",
                "title": {
                    "aspnet-mvc": "Exporting to MS Excel"
                },
                "meta": {
                    "aspnet-mvc": "Export Kendo UI TreeList as Microsoft Excel file"
                }
            },
            {
                "text": "Export to PDF",
                "url": "treelist/pdf-export",
                "title": {
                    "aspnet-mvc": "Exporting to PDF"
                },
                "meta": {
                    "aspnet-mvc": "Export Kendo UI TreeList as PDF file"
                }
            },
            {
                "text": "Events",
                "url": "treelist/events",
                "title": {
                    "aspnet-mvc": "Example of using events in Kendo UI TreeList control"
                },
                "meta": {
                    "aspnet-mvc": "This example demonstrates different events which are available in KendoTreeList widget and the code explains how you can use them for  your project."
                }
            },
            {
                "text": "API",
                "url": "treelist/api",
                "title": {
                    "aspnet-mvc": "KendoTreeList API Demo"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how API Functions can manipulate the contents and behavior of Kendo UI TreeList widget."
                }
            }
        ],
        "category": "Data Management"
    },
    {
        "text": "TreeView",
        "name": "treeview",
        "api": "web/treeview",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/treeview/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/treeview"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/treeview"
        },
        "spriteCssClass": "treeViewIcon",
        "items": [
            {
                "text": "Basic usage",
                "url": "treeview/index",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC TreeView control | UI for ASP.NET MVC demo"
                },
                "meta": {
                    "aspnet-mvc": "This demo illustrates the basic usage and functionality of ASP.NET MVC Tree component which represents items in a hierarchical tree structure."
                }
            },
            {
                "text": "Drag & drop",
                "url": "treeview/dragdrop",
                "title": {
                    "aspnet-mvc": "Drag & Drop support in ASP.NET MVC TreeView control"
                },
                "meta": {
                    "aspnet-mvc": "This example shows how to drag and drop items in ASP.NET MVC TreeView. Use the demo source code and play with the demo."
                }
            },
            {
                "text": "Animation effects",
                "url": "treeview/animation",
                "title": {
                    "aspnet-mvc": "Animation effects sample for ASP.NET MVC Treeview component"
                },
                "meta": {
                    "aspnet-mvc": "This sample shows how you can add animation effects and expand animation by setting the specific options for ASP.NET MVC TreeView component."
                }
            },
            {
                "text": "Images",
                "url": "treeview/images",
                "title": {
                    "aspnet-mvc": "Example of customized ASP.NET MVC TreeView using image"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how you can add images to your ASP.NET MVC TreeView control, as well as implement TreeView with sprites in your website or project."
                }
            },
            {
                "text": "Checkboxes",
                "url": "treeview/checkboxes",
                "title": {
                    "aspnet-mvc": "Creating tree nodes with checkboxes | ASP.NET MVC TreeView Demo"
                },
                "meta": {
                    "aspnet-mvc": "This sample illustrates how you can easily create tree nodes with checkboxes in ASP.NET MVC Treeview by simply setting the child item of the checkboxes to true."
                }
            },
            {
                "text": "Binding to local data",
                "url": "treeview/local-data-binding",
                "title": {
                    "aspnet-mvc": "Binding to local data demo for ASP.NET MVC TreeView control"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how items in the tree are displayed with the default settings of ASP.NET MVC TreeView and how the component can be easily bound to local data."
                }
            },
            {
                "text": "Binding to remote data",
                "url": "treeview/remote-data-binding",
                "title": {
                    "aspnet-mvc": "Binding ASP.NET MVC tree component to remote data"
                },
                "meta": {
                    "aspnet-mvc": "This example illustrates how the ASP.NET MVC hierarchical tree can be bound to remote data and the items in the tree populated from an external source."
                }
            },
            {
                "text": "Templates",
                "url": "treeview/templates",
                "title": {
                    "aspnet-mvc": "Example of templates for ASP.NET MVC TreeView"
                },
                "meta": {
                    "aspnet-mvc": "This demo illustrates how tree nodes in ASP.NET MVC TreeView component can be further customized by using templates."
                }
            },
            {
                "text": "Events",
                "url": "treeview/events",
                "title": {
                    "aspnet-mvc": "Demo for ASP.NET MVC TreeView control events"
                },
                "meta": {
                    "aspnet-mvc": "This sample shows built-in events in ASP.NET MVC tree control. Events are triggered when the user selects, collapses, expands, adds or removes an item on the list."
                }
            },
            {
                "text": "API",
                "url": "treeview/api",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC TreeView API Example"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows the specific API functions, as well as DataSource interaction options, which control the behaviour of ASP.NET MVC TreeView."
                }
            },
            {
                "text": "RTL support",
                "url": "treeview/right-to-left-support",
                "title": {
                    "aspnet-mvc": "RTL Support in ASP.NET MVC TreeView component"
                },
                "meta": {
                    "aspnet-mvc": "Get familiar with the RTL support in ASP.NET MVC TreeView component. Look at the example and use the source code to play with the demo."
                }
            },
            {
                "text": "Keyboard navigation",
                "url": "treeview/keyboard-navigation",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC TreeView control | Keyboard support demo"
                },
                "meta": {
                    "aspnet-mvc": "Look at the source code and play with the demo to find out more about the keyboard support feature in ASP.NET MVC TreeView."
                }
            }
        ],
        "category": "Navigation"
    },
    {
        "text": "Upload",
        "name": "upload",
        "api": "web/upload",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/upload/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/upload"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/upload"
        },
        "spriteCssClass": "uploadIcon",
        "items": [
            {
                "text": "Basic usage",
                "url": "upload/index",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Upload extension demo"
                },
                "meta": {
                    "aspnet-mvc": "This ASP.NET MVC Upload extension demo illustrates the multi-file selection capability of the control."
                }
            },
            {
                "text": "Asynchronous Upload",
                "url": "upload/async",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Asynchronous File Upload Example"
                },
                "meta": {
                    "aspnet-mvc": "This example shows the async upload functionality of ASP.NET MVC Upload control."
                }
            },
            {
                "text": "Events",
                "url": "upload/events",
                "title": {
                    "aspnet-mvc": "Handling events in ASP.NET MVC Upload | UI for ASP.NET MVC Demos"
                },
                "meta": {
                    "aspnet-mvc": "In this sample you will see how to handle events, triggered by Kendo UI jQuery-based Upload widget, used in ASP.NET MVC."
                }
            },
            {
                "text": "API",
                "url": "upload/api",
                "title": {
                    "aspnet-mvc": "API example for ASP.NET MVC File Upload Control"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows API Functions of ASP.NET MVC Upload component. Try the sample to see how to enable, disable the upload option and toggle the enabled state."
                }
            },
            {
                "text": "Templates",
                "url": "upload/templates",
                "title": {
                    "aspnet-mvc": "Templates for Telerik ASP.NET MVC Upload"
                },
                "meta": {
                    "aspnet-mvc": "In this example you will see templates options for Telerik ASP.NET MVC Upload extension."
                }
            },
            {
                "text": "Initial Files",
                "url": "upload/initialfiles",
                "title": {
                    "aspnet-mvc": "Example of initial files for ASP.NET MVC Upload"
                },
                "meta": {
                    "aspnet-mvc": "This demo illustrates how to render initial files with the ASP.NET MVC Upload."
                },
                "packages": [
                    "!mvc-core"
                ]
            },
            {
                "text": "RTL support",
                "url": "upload/right-to-left-support",
                "title": {
                    "aspnet-mvc": "Right to left support in Telerik ASP.NET MVC Upload extension"
                },
                "meta": {
                    "aspnet-mvc": "This demo illustrates the right to left support in Telerik ASP.NET MVC Upload HtmlHelper extension."
                }
            }
        ],
        "category": "Editors"
    },
    {
        "text": "Window",
        "name": "window",
        "api": "web/window",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/window/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/window"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/window"
        },
        "spriteCssClass": "windowIcon",
        "items": [
            {
                "text": "Basic usage",
                "url": "window/index",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Window Example | UI for ASP.NET MVC Demos"
                },
                "meta": {
                    "aspnet-mvc": "This example demonstrates the basic usage of ASP.NET MVC Window contorl one of the components which you can use to enhance the interaction in your web app."
                }
            },
            {
                "text": "Customizing actions",
                "url": "window/actions",
                "title": {
                    "aspnet-mvc": "Example of customizing actions in ASP.NET MVC Window control"
                },
                "meta": {
                    "aspnet-mvc": "This ASP.NET MVC Window sample illustrates how client-side actions can be further customized in order to bring interactivity in your web app to a higher level."
                }
            },
            {
                "text": "Loading content with AJAX",
                "url": "window/ajax",
                "title": {
                    "aspnet-mvc": "AJAX loaded content with ASP.NET MVC Window"
                },
                "meta": {
                    "aspnet-mvc": "This example illustrates how content in ASP.NET MVC window control can be loaded, using AJAX."
                },
                "requiresServer": "true"
            },
            {
                "text": "Animation effects",
                "url": "window/animation",
                "title": {
                    "aspnet-mvc": "Animation effects demo for ASP.NET MVC window control"
                },
                "meta": {
                    "aspnet-mvc": "This sample illustrates the animation effects in ASP.NET MVC window control. Just play with animation settings to change the interactivity of the control."
                }
            },
            {
                "text": "Events",
                "url": "window/events",
                "title": {
                    "aspnet-mvc": "Events in ASP.NET MVC Window demo"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how to fire events in ASP.NET MVC window control. Refresh, activate, open, dragend, dragstart are some of the events which you can trigger."
                },
                "requiresServer": "true"
            },
            {
                "text": "API",
                "url": "window/api",
                "title": {
                    "aspnet-mvc": "Example of ASP.NET MVC Window API"
                },
                "meta": {
                    "aspnet-mvc": "This sample shows how you can use the API of ASP.NET MVC Window control to refresh the content of the window, open and close it."
                },
                "requiresServer": "true"
            },
            {
                "text": "RTL support",
                "url": "window/right-to-left-support",
                "title": {
                    "aspnet-mvc": "Right-to-Left window position of ASP.NET MVC Window control"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how ASP.NET MVC Window control supports right-to-left direction of the window to provide best end-user experience."
                }
            },
            {
                "text": "Keyboard navigation",
                "url": "window/keyboard-navigation",
                "title": {
                    "aspnet-mvc": "Keyboard navigation support | ASP.NET MVC Window Demo"
                },
                "meta": {
                    "aspnet-mvc": "The sample demonstrates how the keyboard navigation feature is integrated in the powerful ASP.NET MVC Window control."
                }
            },
            {
                "text": "Tag Helper",
                "url": "window/tag-helper",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Window Tag Helper sample"
                },
                "packages": [
                    "mvc-core"
                ]
            }
        ],
        "category": "Layout"
    },
    {
        "text": "WordsProcessing",
        "name": "wordsprocessing",
        "api": "http://docs.telerik.com/devtools/wpf/controls/radwordsprocessing/overview",
        "category": "Editors",
        "spriteCssClass": "wordprocessingIcon",
        "new": "true",
        "items": [
            {
                "text": "Basic usage",
                "url": "wordsprocessing/index",
                "new": "true",
                "title": {
                    "aspnet-mvc": "Demo and source code for Telerik RadWordsProcessing in MVC"
                },
                "meta": {
                    "aspnet-mvc": "See how the Telerik RadWordsProcessing can be integrated in MVC applications."
                },
                "description": {
                    "aspnet-mvc": "With <strong>RadWordsProcessing</strong> you can virtually effortlessly convert documents from one to another file format among the supported DOCX, RTF, HTML and TXT."
                }
            }
        ],
        "documentation": {
            "aspnet-mvc": "http://docs.telerik.com/devtools/wpf/controls/radwordsprocessing/overview"
        }
    },
    {
        "text": "DataSource",
        "name": "datasource",
        "api": "framework/datasource",
        "documentation": {
            "kendo-ui": "getting-started/framework/datasource/overview"
        },
        "forum": {
            "kendo-ui": "kendo-ui/data-source"
        },
        "codelibrary": {
            "kendo-ui": "kendo-ui/data-source"
        },
        "spriteCssClass": "dataSourceIcon",
        "items": [
            {
                "text": "Shared DataSource",
                "url": "datasource/shared-datasource",
                "title": {
                    "kendo-ui": " Shared DataSource Demo | Kendo UI Web demos"
                },
                "meta": {
                    "kendo-ui": "This example demonstrates a shared DataSource which can be created to enable multiple UI widgets to bind to the same data collection."
                },
                "requiresServer": "true"
            }
        ],
        "category": "Framework"
    },
    {
        "category": "Framework",
        "text": "PDF Export",
        "name": "export",
        "spriteCssClass": "drawingIcon",
        "items": [
            {
                "text": "Document Export",
                "url": "pdf-export/index",
                "packages": [
                    "!mvc-core"
                ],
                "title": {
                    "aspnet-mvc": "Kendo UI Drawing API Export functionality"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how to export HTML elements and Drawing surfaces to PDF, PNG Images or SVG and save them directly in the browser."
                }
            }
        ]
    },
    {
        "text": "PdfProcessing",
        "name": "pdfprocessing",
        "api": "http://docs.telerik.com/devtools/wpf/controls/radpdfprocessing/overview",
        "category": "Editors",
        "spriteCssClass": "pdfIcon",
        "new": "true",
        "items": [
            {
                "text": "Basic usage",
                "url": "pdfprocessing/index",
                "new": "true",
                "title": {
                    "aspnet-mvc": "Demo and source code for Telerik RadPdfProcessing in MVC"
                },
                "meta": {
                    "aspnet-mvc": "See how the Telerik RadPdfProcessing can be integrated in MVC applications."
                },
                "description": {
                    "aspnet-mvc": "Telerik <strong>RadPdfProcessing</strong> provides easy to use API which allows code-only generation of PDF documents. This example demonstrates how to create a document containing images, text and shapes and export it to PDF."
                },
                "sources": {
                    "aspnet-mvc": [
                        {
                            "name": "CreatePdfDocument.cs",
                            "url": "~/Helpers/CreatePdfDocument.cs"
                        }
                    ]
                }
            }
        ],
        "documentation": {
            "aspnet-mvc": "http://docs.telerik.com/devtools/wpf/controls/radpdfprocessing/overview"
        }
    },
    {
        "text": "Globalization",
        "name": "globalization",
        "api": "framework/kendo",
        "documentation": {
            "kendo-ui": "getting-started/framework/globalization/overview"
        },
        "forum": {
            "kendo-ui": "kendo-ui/globalization"
        },
        "codelibrary": {
            "kendo-ui": "kendo-ui/globalization"
        },
        "spriteCssClass": "globalizationIcon",
        "items": [
            {
                "text": "Basic usage",
                "url": "globalization/index",
                "title": {
                    "aspnet-mvc": "Globalization example in Kendo UI Web framework"
                },
                "meta": {
                    "aspnet-mvc": "This is an example of globalization which is supported in Kendo UI Web framework."
                },
                "packages": [
                    "!mvc-core"
                ]
            }
        ],
        "category": "Framework"
    },
    {
        "text": "Validator",
        "name": "validator",
        "api": "web/validator",
        "documentation": {
            "kendo-ui": "getting-started/framework/validator/overview"
        },
        "forum": {
            "kendo-ui": "kendo-ui/validation"
        },
        "codelibrary": {
            "kendo-ui": "kendo-ui/validator"
        },
        "spriteCssClass": "validatorIcon",
        "items": [
            {
                "text": "Basic usage",
                "url": "validator/index",
                "title": {
                    "aspnet-mvc": "Kendo UI Validator Demo"
                },
                "meta": {
                    "aspnet-mvc": "This demo illustrates the core functionality of Kendo UI Validator component in Kendo UI Web framework."
                },
                "packages": [
                    "!mvc-core"
                ]
            }
        ],
        "category": "Editors"
    },
    {
        "text": "Styling",
        "name": "styling",
        "spriteCssClass": "stylingIcon",
        "items": [
            {
                "text": "Forms",
                "url": "styling/index",
                "title": {
                    "aspnet-mvc": "jQuery forms styling demo | Kendo UI Web framework"
                },
                "meta": {
                    "aspnet-mvc": "This example illustrates how jQuery and HTML5-based forms can be styled with Kendo UI Web."
                },
                "packages": [
                    "!mvc-core"
                ]
            },
            {
                "text": "Checkboxes",
                "url": "styling/checkboxes",
                "title": {
                    "aspnet-mvc": "jQuery icons styling example | Kendo UI Web demos"
                },
                "meta": {
                    "aspnet-mvc": "This example shows how different styling can be applied to icons by using Kendo UI Web framework."
                },
                "packages": [
                    "!mvc-core"
                ]
            },
            {
                "text": "Radio buttons",
                "url": "styling/radios",
                "title": {
                    "aspnet-mvc": "jQuery icons styling example | Kendo UI Web demos"
                },
                "meta": {
                    "aspnet-mvc": "This example shows how different styling can be applied to icons by using Kendo UI Web framework."
                }
            }
        ],
        "category": "Interactivity & UX"
    },
    {
        "text": "Area Charts",
        "name": "area-charts",
        "api": "dataviz/chart",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/chart/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/chart"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/chart"
        },
        "spriteCssClass": "chartAreaIcon",
        "items": [
            {
                "text": "Basic usage",
                "url": "area-charts/index",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Area Charts control | UI for ASP.NET MVC Demos"
                },
                "meta": {
                    "aspnet-mvc": "This example shows how to use Telerik ASP.NET MVC Area Charts extension to visualize filled areas on a diagram. "
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik ASP.NET MVC chart is a powerful data visualization component, which allows you to graphically represent your data. It is useful when you would like to utilize modern browser technologies such as <a href=\"http://en.wikipedia.org/wiki/Scalable_Vector_Graphics\">SVG</a> or <a href=\"https://en.wikipedia.org/wiki/Canvas_element\">Canvas</a> (with a fallback to <a href=\"http://en.wikipedia.org/wiki/Vector_Markup_Language\">VML</a> for older IE versions) for interactive data visualizations. </p> <p>The component offers a variety of chart types such as area, bar, line, scatter, polar, radar, pie and donut, stock (OHLC) and many more.</p> <p>In this example, you can see how to register and configure an Aria chart, which represents the gross domestic growth of India, Haiti and of the whole World. This chart type is suitable for displaying quantitative data as continuous lines that pass through points defined by their items' values. The portion of the graph beneath the lines is filled with a particular color for each series. The different colors in an Area chart are useful for emphasizing changes in values from several sets of similar data. <br /> <br /> The chart can fetch data for its series from either local or remote data source. You can find more information about the MVC chart in the <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/overview\">product documentation</a>.</p> <p><strong><br /> Key Features of Telerik MVC Charts</strong></p> <ul> <li>Various Chart Types</li> <li>A Number of Data Types</li> <li>High Performance</li> <li>Export to PDF</li> <li>Simple-to-Customize Look and Feel</li> <li>Rich Server and Client-side API</li> <li>Server and Client-side Data Binding</li> <li>Built-in Themes</li> <li>Intuitive Built-in Animations</li> <li>Multiple Series and Combination Charts</li> <li>Plot Bands</li> <li>Rich Cross-Browser and Mobile Support</li> </ul> <p>More about <a href=\"http://www.telerik.com/aspnet-mvc/charts\">Telerik MVC Charts</a>.</p>"
                }
            },
            {
                "text": "Stacked area",
                "url": "area-charts/stacked-area",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC stacked area chart example"
                },
                "meta": {
                    "aspnet-mvc": "Learn how to visualize series that should be stacked in an ASP.NET MVC chart."
                },
                "description": {
                    "aspnet-mvc": "<p>By default, the MVC Area Chart renders its series on top of one another. You have the ability to stack them atop one another instead, so that the data values at each x-value are summed. In an area chart, the value for each series will always be stacked relative to the preceding one.</p> <p>You can enable the stack feature through the SeriesDefaults -&gt; Area -&gt; Stack(true) setting.</p> <p>For more information inspect the <a href=\"http://docs.telerik.com/kendo-ui/api/aspnet-mvc/kendo.mvc.ui.fluent/chartbuilder#methods-SeriesDefaults%28System.Action%3CKendo.Mvc.UI.Fluent.ChartSeriesDefaultsBuilder%3CT%3E%3E%29\">SeriesDefaults option</a> in the documentation.</p>"
                },
                "group": "Area Chart Types"
            },
            {
                "text": "100% Stacked area",
                "url": "area-charts/stacked100-area",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC 100% stacked area chart example"
                },
                "meta": {
                    "aspnet-mvc": "Learn how to visualize series that should be stacked to 100% in an ASP.NET MVC chart."
                },
                "description": {
                    "aspnet-mvc": "<p>The Area chart type supports 100% stacking, where the stacked series value are rescaled such that they add up to 100%.</p> <p>You can enable the 100% stack feature through the SeriesDefaults -&gt; Area -&gt; Stack(ChartStackType.Stack100) setting.</p> <p>For more information inspect the <a href=\"http://docs.telerik.com/kendo-ui/api/aspnet-mvc/kendo.mvc.ui.fluent/chartbuilder#methods-SeriesDefaults%28System.Action%3CKendo.Mvc.UI.Fluent.ChartSeriesDefaultsBuilder%3CT%3E%3E%29\">SeriesDefaults option</a> in the documentation.</p>"
                }
            },
            {
                "text": "Stepped Area",
                "url": "area-charts/step-area",
                "title": {
                    "aspnet-mvc": "Stepped area demo for Telerik ASP.NET MVC Area Charts"
                },
                "meta": {
                    "aspnet-mvc": "In this example we illustrate how stepped area can be configured for Telerik Area charts for ASP.NET MVC."
                },
                "description": {
                    "aspnet-mvc": "<p>The Stepped Area chart is a form of area chart where each data point from the series is connected with vertical and horizontal lines to form a step-like progression. This type of area visualization is useful when you want to highlight the increase or decrease in values over time.</p> <p>You can configure a stepped area chart through the Series -&gt; Area -&gt; Line -&gt; Style(ChartLineStyle.<strong>Step</strong>) settings of the MVC Chart.</p>"
                }
            },
            {
                "text": "Smooth Area",
                "url": "area-charts/smooth-area",
                "title": {
                    "aspnet-mvc": "Configure smooth line (spline) style for ASP.NET MVC Area Chart"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how to configure smooth line (spline) style for the ASP.NET MVC Area Chart."
                },
                "description": {
                    "aspnet-mvc": "<p>This demo shows how to configure smooth line (spline) style for the Telerik MVC Area Chart.</p> <p>A Spline chart is a form of line/area chart where each data point from the series is connected with a curved line, which represents a rough approximation of the missing data points.</p> <p>You can configure a smooth line area chart through the Series -&gt; Area -&gt; Line -&gt; Style(ChartAreaStyle.<strong>Smooth</strong>) settings of the ASP.NET MVC Chart.</p>"
                }
            },
            {
                "text": "Date axis",
                "url": "area-charts/date-axis",
                "title": {
                    "aspnet-mvc": "Date axis sample for ASP.NET MVC Area Charts"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how you can set specific base date units in your ASP.NET MVC Area Chart to help you visualize a seasonal trend in your app."
                },
                "description": {
                    "aspnet-mvc": "<p>You can scale the date axis of your ASP.NET MVC Area Chart to get a better visualization of the seasonal data in your app. This can be done by modifying:</p> <ul> <li>The base date unit of the x-axis through the CategoryAxis.BaseUnit property, which takes seconds, minutes, hours, days, week, months and years</li> <li>The default aggregates of the series through the Series.Aggregate property, which takes max, min, sum, avg and count.</li> </ul>"
                },
                "group": "Functionality"
            },
            {
                "text": "Logarithmic axis",
                "url": "area-charts/logarithmic-axis",
                "title": {
                    "aspnet-mvc": "Logarithmic axis sample for ASP.NET MVC Area Charts"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how you can use a logarithmic axis for the ASP.NET MVC Area Chart."
                },
                "description": {
                    "aspnet-mvc": "<p>A logarithmic axis is a special numeric axis that transforms the actual values by using a logarithmic function with a particular base. A logarithmic axis is useful for displaying values that cover different orders of magnitude because it lets large values display together with small values in a more condensed scale than the default linear axis.</p> <p>This demo shows how you can use a logarithmic axis for the ASP.NET MVC Area Chart by setting the ValueAxis -&gt; Logarithmic() method. Тhe base of the logarithmic axis is defined by the interval between the major divisions, controlled by the МajorUnit property.</p>"
                },
                "requiresServer": "true"
            },
            {
                "text": "Multi-axis",
                "url": "area-charts/multiple-axes",
                "title": {
                    "aspnet-mvc": "Multi-axis demo for ASP.NET MVC Area Chart"
                },
                "meta": {
                    "aspnet-mvc": "Leverage the best charting performance and visualize data on multiple axis with ASP.NET MVC Area Charts to provide solid business reports for end users."
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik ASP.NET MVC Area chart supports multiple axis. This helps you leverage the best charting performance and visualize data on any number axis to provide solid business reports for your users.</p> <p>The example above shows a hybrid car range report visualized through four value axes: <em>miles</em>, <em>km</em>, <em>miles per gallon</em> and <em>liters per 100km</em>. Note that each of them has unique name which is set through the <strong>ValueAxis.Title </strong>method. You can also set the <strong>CategoryAxis.AxisCrossingValue</strong> method to specify the alignment of the value axes.</p>"
                }
            },
            {
                "text": "Error Bars",
                "url": "area-charts/error-bars",
                "title": {
                    "aspnet-mvc": "Example of using ErrorBars for ASP.NET MVC Area Chart"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how to use ErrorBars for ASP.NET MVC Area Chart"
                },
                "description": {
                    "aspnet-mvc": "<p>This demo illustrates how you can use Error Bars for ASP.NET MVC Area Chart to show variability of data. The Error bars are specified as part of the Series chart setting and are offered by the following Series types: Area, Vertical Area, Column, Bar, Line, Vertical Line, Scatter and ScatterLine.</p> <p>The error bars support statistical calculations based on the series data. The supported types are <a href=\"http://en.wikipedia.org/wiki/Standard_error\">standard error</a>, <a href=\"http://en.wikipedia.org/wiki/Standard_deviation\">population standard deviation</a> and other. To specify that standard deviation, you should set \"stddev\" as in this demo, i.e. Series -&gt; Area -&gt; ErrorBars(errorBars =&gt; errorBars.Value(\"stddev\"))</p> <p>You can find more information in the following help article: <a href=\"http://docs.telerik.com/kendo-ui/dataviz/chart/error-bars\">Error Bars</a>.</p>"
                }
            },
            {
                "text": "Binding to remote data",
                "url": "area-charts/remote-data-binding",
                "title": {
                    "aspnet-mvc": "Example of ASP.NET MVC Area Chart bound to remote data"
                },
                "meta": {
                    "aspnet-mvc": "See how the ASP.NET MVC Area Chart can be bound to remote data by configuring the DataSource transport which defines how the DataSource interacts with remote data."
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik MVC Chart offers two ways of data-binding:</p> <ul> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/overview\" target=\"_blank\">Server</a> - the chart will bind to a supplied model</li> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\" target=\"_blank\">Ajax</a> - the chart will perform Ajax requests to populate its series</li> </ul> <p>For remote data binding you need to specify a remote endpoint or web service returning data in JSON/JSONP format and utilize the DataSource as a mediator between the chart and the underlying data. To make the connection to the remote endpoint and process the data properly, the data source needs information about the web service URL(s), the request type, the response data type, and the structure (schema) of the response, in case it is more complex than a plain array of objects.</p> <p>You can see in this demo how the ASP.NET MVC Area chart can be bound to remote data by configuring the DataSource transport which defines how the DataSource interacts with remote data.</p> <p>You can find more information about the data-binding capabilities of the MVC chart in this <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\">help article</a>.</p>"
                },
                "group": "Data Binding",
                "requiresServer": "true"
            },
            {
                "text": "Binding to local data",
                "url": "area-charts/local-data-binding",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Area Charts binding to local data example"
                },
                "meta": {
                    "aspnet-mvc": "This sample demonstrates how ASP.NET MVC Area Chart can use existing objects as data points."
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik MVC Area chart can be instructed to display data from local data storage using its built-in data-binding capabilities. </p> <p>There are two ways to bind the chart:</p> <ul> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/overview\">Server</a> - the chart will bind to a supplied model</li> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\">Ajax</a> - the chart will perform Ajax requests to populate its series</li> </ul> <p>In this example you can see how to bind the chart using the server approach. You need to create an action method and pass the InternetUsers list located in the \\Models\\Chart\\ChartDataRepository.cs file as a model. After that you should configure the data bound fields for the Series (series =>{series.Area(model => model.Value)}) and Category Axis (axis => axis.Categories(model => model.Year)) Note that the view has to be strongly typed so that the chart is able to load its data.</p> <p>You can find additional information about how to utilize the data-binding capabilities of the MVC chart in <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\">the Getting Started section</a> of the product documentation.</p> "
                }
            },
            {
                "text": "Binding to grouped data",
                "url": "area-charts/grouped-data",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Area Charts | Example of binding to grouped data"
                },
                "meta": {
                    "aspnet-mvc": "With this example you will learn how to bind grouping data to ASP.NET MVC Area Charts."
                },
                "description": {
                    "aspnet-mvc": "<p>Telerik MVC charting extension can be integrated to a grouped data by <a href=\"http://docs.telerik.com/kendo-ui/api/javascript/data/datasource\"> Kendo UI DataSource</a>. To do, so you can follow the steps below:</p> <ol> <li>Bind the chart to a <a href=\"http://docs.telerik.com/kendo-ui/framework/datasource/overview\"> Kendo UI DataSource control</a>.</li> <li>Set the <a href=\"http://docs.telerik.com/kendo-ui/framework/datasource/basic-usage#working-with-grouped-data\">DataSource.group.field property</a> to the name (e.g., the &ldquo;Symbol&rdquo; field) of the column in the underlying data which will be the criteria for grouping the chart series items into series Group(group =&gt; group.Add(model =&gt; model.Symbol)</li> <li>Bind the Y values of the series to the corresponding data source field (e.g., the &ldquo;Close&rdquo; field): series.Area(model =&gt; model.Close)</li> <li>Bind the Category Axis to the corresponding field (e.g., the &ldquo;Date&rdquo; field): .Categories(model =&gt; model.Date)</li> </ol> <p><br /> This will result in as many series as the number of distinct values in the DataSource.group.field column (e.g., &ldquo;Symbol&rdquo;). &nbsp;Since the &ldquo;Symbol&rdquo; field in this example contains three distinct values (&ldquo;1. GOOG (close)&rdquo;, &ldquo;2. AAPL (close)&rdquo; and &ldquo;3. AMZN (close)&rdquo;) the chart will create three series as well.</p>"
                },
                "requiresServer": "true"
            }
        ],
        "category": "Charts"
    },
    {
        "text": "Bar Charts",
        "name": "bar-charts",
        "api": "dataviz/chart",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/chart/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/chart"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/chart"
        },
        "spriteCssClass": "chartBarIcon",
        "items": [
            {
                "text": "Basic usage",
                "url": "bar-charts/index",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Bar Charts sample"
                },
                "meta": {
                    "aspnet-mvc": "In this demo you will see in action the ASP.NET MVC Bar Chart HTMLHelper extension for Kendo UI Bar Charts widget."
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik ASP.NET MVC chart is a powerful data visualization component, which allows you to graphically represent your data. It is useful when you would like to utilize modern browser technologies such as <a href=\"http://en.wikipedia.org/wiki/Scalable_Vector_Graphics\">SVG</a> or <a href=\"https://en.wikipedia.org/wiki/Canvas_element\">Canvas</a> (with a fallback to <a href=\"http://en.wikipedia.org/wiki/Vector_Markup_Language\">VML</a> for older IE versions) for interactive data visualizations. </p> <p>The component offers a variety of chart types such as area, bar, line, scatter, polar, radar, pie and donut, stock (OHLC) and many more.</p> <p>A Bar chart displays data as horizontal bars whose lengths vary according to their value. You can use a Bar chart to show a comparison between several sets of data (for example, summaries of the unique and total site visitors for certain period).<br /> <br /> The chart can fetch data for its series from either local or remote data source. You can find more information about the MVC chart in the <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/overview\">product documentation</a>.</p> <p><strong><br /> Key Features of Telerik MVC Charts</strong></p> <ul> <li>Various Chart Types</li> <li>A Number of Data Types</li> <li>High Performance</li> <li>Export to PDF</li> <li>Simple-to-Customize Look and Feel</li> <li>Rich Server and Client-side API</li> <li>Server and Client-side Data Binding</li> <li>Built-in Themes</li> <li>Intuitive Built-in Animations</li> <li>Multiple Series and Combination Charts</li> <li>Plot Bands</li> <li>Rich Cross-Browser and Mobile Support</li> </ul> <p>More about <a href=\"http://www.telerik.com/aspnet-mvc/charts\">Telerik MVC Charts</a>.</p>"
                }
            },
            {
                "text": "Column chart",
                "url": "bar-charts/column",
                "title": {
                    "aspnet-mvc": "Example of a basic ASP.NET MVC Column Chart control"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how some settings of ASP.NET MVC chart can be changed in order to display the bar Chart as a Column chart."
                },
                "description": {
                    "aspnet-mvc": "<p>The Column chart shows data as vertical bars whose heights vary according to their value. It can be useful for showing a comparison between several sets of data (e.g., snapshots of data across different points in time like the GDP growth shown in this example).</p> <p>Column charts are very similar to Bar charts, with the only difference that bars&rsquo; orientation is vertical instead of horizontal.</p> <p>You can define the chart series as horizontal via the Series -&gt; series.<strong>Column</strong> method:<br /> <br /> .Series(series =&gt; series.Column(new double[] { 3.907, 7.943, 7.848, 9.284, 9.263, 9.801, 3.890, 8.238, 9.552, 6.855 }))</p>"
                },
                "group": "Bar Chart Types"
            },
            {
                "text": "Stacked bars",
                "url": "bar-charts/stacked-bar",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Stacked Bar Charts | UI for ASP.NET MVC demo"
                },
                "meta": {
                    "aspnet-mvc": "This example shows how ASP.NET MVC Bar Chart supports a stacked bar. The feature of the control is enabled by setting the stacked property to true."
                },
                "description": {
                    "aspnet-mvc": "<p>A Stacked bar is a bar divided into subparts to show cumulative effect, to display money distribution or production against time. You can easily enable the stack feature through the SeriesDefaults -&gt; Bar -&gt; Stack(true) setting:</p> <p>.SeriesDefaults(series =&gt; series.Bar().Stack(true))</p> <p>For more information inspect the <a href=\"http://docs.telerik.com/kendo-ui/api/aspnet-mvc/kendo.mvc.ui.fluent/chartbuilder#methods-SeriesDefaults%28System.Action%3CKendo.Mvc.UI.Fluent.ChartSeriesDefaultsBuilder%3CT%3E%3E%29\">SeriesDefaults option</a> in the documentation.</p>"
                }
            },
            {
                "text": "Stacked and grouped bars",
                "url": "bar-charts/grouped-stacked-bar",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Stacked and Grouped Bar Chart Example"
                },
                "meta": {
                    "aspnet-mvc": "This sample demonstrates the implementation of ASP.NET MVC stacked and grouped bars in various data visualization-driven web apps."
                },
                "description": {
                    "aspnet-mvc": "<p>Usually, the data series in a stacked column or bar chart have one stack per category. There are scenarios in which you might want to arrange your data so that the chart appears to have more than one stack per category.</p> <p>In this demo, you can see how to group stacked columns to display the World population compared by age and sex in a specific period of time by setting the Stack() method, which sets the name of the stack that the series belong to:</p> <p>series.Column(new int[] { 1100941, 1139797, 1172929, 1184435, 1184654 }).Name(\"0-19\").Stack(\"Female\");</p>"
                }
            },
            {
                "text": "100% Stacked bars",
                "url": "bar-charts/stacked100-bar",
                "title": {
                    "aspnet-mvc": "100% Stacked Bars in Telerik ASP.NET MVC Bar Charts"
                },
                "meta": {
                    "aspnet-mvc": "This demo illustrates 100% stacked bars capability in Telerik ASP.NET MVC Bar Charts for Kendo UI jQuery-powered Bar Chart control."
                },
                "description": {
                    "aspnet-mvc": "<p>The Bar chart type supports 100% stacking, where the stacked series value are rescaled such that they add up to 100%.</p> <p>You can enable the 100% stack feature through the SeriesDefaults -&gt; Bar -&gt; Stack(ChartStackType.Stack100) method.</p> <p>For more information inspect the <a href=\"http://docs.telerik.com/kendo-ui/api/aspnet-mvc/kendo.mvc.ui.fluent/chartbuilder#methods-SeriesDefaults%28System.Action%3CKendo.Mvc.UI.Fluent.ChartSeriesDefaultsBuilder%3CT%3E%3E%29\">SeriesDefaults option</a> in the documentation.</p>"
                }
            },
            {
                "text": "100% Stacked and grouped bars",
                "url": "bar-charts/grouped-stacked100-bar",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC 100% Stacked and Grouped Bar Chart Example"
                },
                "meta": {
                    "aspnet-mvc": "This sample demonstrates the implementation of ASP.NET MVC 100% stacked and grouped bars in various data visualization-driven web apps."
                },
                "description": {
                    "aspnet-mvc": "<p>This example demonstrates the implementation of ASP.NET MVC 100% stacked and grouped bars.</p> <p>You can enable the 100% stack feature by setting the first ChartStackType.Stack100 argument of the Series -&gt; Column -&gt; Stack() method, i.e.</p> <p>series.Column(new int[] { 1100941, 1139797, 1172929, 1184435, 1184654 }).Name(\"0-19\").Stack(ChartStackType.Stack100, \"Female\");</p>"
                }
            },
            {
                "text": "Date axis",
                "url": "bar-charts/date-axis",
                "title": {
                    "aspnet-mvc": "Date axis example in ASP.NET MVC Bar chart control"
                },
                "meta": {
                    "aspnet-mvc": "This sample shows how you can configure the base date unit for your date axis in ASP.NET MVC business bar chart."
                },
                "description": {
                    "aspnet-mvc": "<p>You can scale the date axis of your ASP.NET MVC Bar Chart to get a better visualization of the seasonal data in your app. This can be done by modifying:</p> <ul> <li>The base date unit of the x-axis through the CategoryAxis.BaseUnit method, which takes seconds, minutes, hours, days, week, months and years</li> <li>The default aggregates of the series through the Series.Aggregate property, which takes max, min, sum, avg and count.</li> </ul>"
                },
                "group": "Functionality"
            },
            {
                "text": "Logarithmic axis",
                "url": "bar-charts/logarithmic-axis",
                "title": {
                    "aspnet-mvc": "Logarithmic axis sample for ASP.NET MVC Bar Charts"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how you can use a logarithmic axis for the ASP.NET MVC Bar Chart."
                },
                "description": {
                    "aspnet-mvc": "<p>A logarithmic axis is a special numeric axis that transforms the actual values by using a logarithmic function with a particular base. A logarithmic axis is useful for displaying values that cover different orders of magnitude because it lets large values display together with small values in a more condensed scale than the default linear axis.</p> <p>This demo shows how you can use a logarithmic axis for the ASP.NET MVC Column Chart by setting the ValueAxis -&gt; Logarithmic() method.</p>"
                }
            },
            {
                "text": "Multi-axis",
                "url": "bar-charts/multiple-axes",
                "title": {
                    "aspnet-mvc": "Multi-axis in ASP.NET MVC Bar Charts | UI for ASP.NET MVC demos"
                },
                "meta": {
                    "aspnet-mvc": "In this demo you will see how multiple axis of Telerik jQuery-powered Bar Charts can be configured in ASP.NET MVC."
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik ASP.NET MVC Bar chart supports multiple axis. This helps you leverage the best charting performance and visualize data on any number axis to provide solid business reports for your users.</p> <p>The example above shows a hybrid car range report visualized through four value axes: <em>km</em>, <em>miles</em>, <em>miles per gallon</em> and <em>liters per 100km</em>. Note that each of them has unique name which is set through the <strong>ValueAxis.Title </strong>method. You can also set the <strong>CategoryAxis.AxisCrossingValue</strong> method to specify the alignment of the value axes.</p>"
                }
            },
            {
                "text": "Plot bands",
                "url": "bar-charts/plotbands",
                "title": {
                    "aspnet-mvc": "Plot Bands example in ASP.NET MVC Bar chart"
                },
                "meta": {
                    "aspnet-mvc": "This sample demonstrates how to add plot bands to your ASP.NET MVC charts in order to plot data within some borders."
                },
                "description": {
                    "aspnet-mvc": "<p>Plot Bands are colored ranges, which are used to highlight certain areas in the ASP.NET MVC Chart. You can create them by setting:</p> <p>ValueAxis -&gt; PlotBands -&gt; bands.Add().From(10000).To(30000).Color(\"#c00\").Opacity(0.3);</p> <p>Each Plot Band could be configured independently by specifying the following properties:</p> <ul> <li>From &mdash; the start position of the plot band.</li> <li>To &mdash; the end position of the plot band.</li> <li>Opacity &mdash; the opacity of the plot band.</li> <li>Color &mdash; the color of the plot band.</li> </ul>"
                },
                "requiresServer": "true"
            },
            {
                "text": "Gap and spacing",
                "url": "bar-charts/gap-spacing",
                "title": {
                    "aspnet-mvc": "Gap and spacing in MVC Bar Charts | UI for ASP.NET MVC demo"
                },
                "meta": {
                    "aspnet-mvc": "With this example, you will be able to take a closer look at gap and spacing in ASP.NET MVC Bar Charts. Set gap and spacing values to play with the demo."
                },
                "description": {
                    "aspnet-mvc": "<p>The Bar chart component allows you to control the distance between its categories as well as between series points within a category. This can be done through the <a href=\"http://docs.telerik.com/kendo-ui/api/javascript/dataviz/ui/chart#configuration-series.gap\">series.gap</a> and <a href=\"http://docs.telerik.com/kendo-ui/api/javascript/dataviz/ui/chart#configuration-series.spacing\">series.spacing</a> client-side settings of the chart.</p> <p>In this demo, you can play with the provided GAP and SPACING dropdowns to change the values of the above properties.</p>"
                }
            },
            {
                "text": "Error Bars",
                "url": "bar-charts/error-bars",
                "title": {
                    "aspnet-mvc": "This demo shows how to use ErrorBars for ASP.NET MVC Bar Chart"
                },
                "meta": {
                    "aspnet-mvc": "Example of using ErrorBars for ASP.NET MVC Bar Chart"
                },
                "description": {
                    "aspnet-mvc": "<p>This demo illustrates how to show variability of data using the Error Bars feature of the Telerik MVC Bar Chart. The Error bars are specified as part of the Series setting and are offered by the following Series types: Area, Vertical Area, Column, Bar, Line, Vertical Line, Scatter and ScatterLine.</p><p>The error bars support statistical calculations based on the series data. The supported types are <a href=\"http://en.wikipedia.org/wiki/Standard_error\">standard error</a> and <a href=\"http://en.wikipedia.org/wiki/Standard_deviation\">population standard deviation</a>. To specify that standard error should be used, you need to set \"stderr\" as a value, i.e.</p><p>Series -&gt; Column-&gt; .ErrorBars(errorBars =&gt; errorBars.Value(\"<strong>stderr</strong>\"))</p><p>You can find more information in the following help article: <a href=\"http://docs.telerik.com/kendo-ui/dataviz/chart/error-bars\">Error Bars</a>.</p>"
                }
            },
            {
                "text": "Custom Visuals",
                "url": "bar-charts/visuals",
                "title": {
                    "aspnet-mvc": "Example of using custom visuals for ASP.NET MVC Bar Chart"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how to use ustom visuals for the ASP.NET MVC Bar Chart"
                },
                "description": {
                    "aspnet-mvc": "<p>You can implement custom visualizations for the Bar/Column chart legend items, axis titles, labels, markers and series by utilizing the <a href=\"http://docs.telerik.com/kendo-ui/api/javascript/drawing\">Kendo Drawing API</a>. You can do that by setting a JavaScript function name as a string parameter of the Series <strong>Visual</strong> method:<br /> <br /> SeriesDefaults -&gt; .Column().Visual(\"columnVisual\") or <br /> Series -&gt; series.Column(&hellip;).Visual(\"columnVisual\")</p> <p>Various context information is available through the function argument fields. Such are <strong>rect</strong> (the <a href=\"http://docs.telerik.com/kendo-ui/api/javascript/geometry/rect\">kendo.geometry.Rect</a> that defines where the visual should be rendered), createVisual (a function that can be used to get the default visual) and options (different options depending on the item type).</p> <p>You can read more about it in the <a href=\"http://docs.telerik.com/kendo-ui/api/javascript/drawing\">Kendo UI JavaScript API reference</a>.</p>"
                }
            },
            {
                "text": "Pan and zoom",
                "url": "bar-charts/pan-and-zoom",
                "title": {
                    "aspnet-mvc": "Pan and zoom in Bar charts | Kendo UI Bar Chart demo"
                },
                "meta": {
                    "aspnet-mvc": "Enable pan and zoom effect in Kendo UI Bar charts. This example demonstrates how to enable pan and zoom for your bar charts."
                },
                "description": {
                    "aspnet-mvc": "<p>The Pan and Zoom features allow you to navigate through and zoom in/out the Telerik MVC Bar Chart. </p> <p>You can enable the pan feature through the Pannable setting as well as to lock the either the X or Y axis using the Lock method.</p> <p>To enable the Zoom set the Zoomable configuration option. You can also fine tune the mouse wheel and selection zooming through the available Mousewheel and Selection methods.</p>"
                }
            },
            {
                "text": "Binding to remote data",
                "url": "bar-charts/remote-data-binding",
                "title": {
                    "aspnet-mvc": "Binding to remote data demo | ASP.NET MVC Bar Charts"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how ASP.NET MVC Bar Charts can be bound to remote data to produce high-performance report in your business app."
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik MVC Chart offers two ways of data-binding:</p> <ul> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/overview\" target=\"_blank\">Server</a> - the chart will bind to a supplied model</li> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\" target=\"_blank\">Ajax</a> - the chart will perform Ajax requests to populate its series</li> </ul> <p>For remote data binding you need to specify a remote endpoint or web service returning data in JSON/JSONP format and utilize the DataSource as a mediator between the chart and the underlying data. To make the connection to the remote endpoint and process the data properly, the data source needs information about the web service URL(s), the request type, the response data type, and the structure (schema) of the response, in case it is more complex than a plain array of objects.</p> <p>You can see in this demo how the ASP.NET MVC Bar chart can be bound to remote data by configuring the DataSource transport which defines how the DataSource interacts with remote data.</p> <p>You can find more information about the data-binding capabilities of the MVC chart in this <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\">help article</a>.</p>"
                },
                "group": "Data Binding",
                "requiresServer": "true"
            },
            {
                "text": "Binding to local data",
                "url": "bar-charts/local-data-binding",
                "title": {
                    "aspnet-mvc": "Local data-binding example | ASP.NET MVC Bar Charts"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how the local data-binding is supported in ASP.NET MVC Bar Charts. Use the demo source code to try the feature of the component."
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik MVC Chart offers two ways of data-binding:</p> <ul> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/overview\" target=\"_blank\">Server</a> - the chart will bind to a supplied model</li> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\" target=\"_blank\">Ajax</a> - the chart will perform Ajax requests to populate its series</li> </ul> <p>For remote data binding you need to specify a remote endpoint or web service returning data in JSON/JSONP format and utilize the DataSource as a mediator between the chart and the underlying data. To make the connection to the remote endpoint and process the data properly, the data source needs information about the web service URL(s), the request type, the response data type, and the structure (schema) of the response, in case it is more complex than a plain array of objects.</p> <p>You can see in this demo how the ASP.NET MVC Bar chart can be bound to remote data by configuring the DataSource transport which defines how the DataSource interacts with remote data.</p> <p>You can find more information about the data-binding capabilities of the MVC chart in this <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\">help article</a>.</p>"
                }
            },
            {
                "text": "Binding to grouped data",
                "url": "bar-charts/grouped-data",
                "title": {
                    "aspnet-mvc": "Grouped data binding demo for ASP.NET MVC Bar Charts"
                },
                "meta": {
                    "aspnet-mvc": "This example shows the feature of binding to grouped data in ASP.NET MVC Bar Charts. See the source code to find how to use name templates for the data group."
                },
                "description": {
                    "aspnet-mvc": "<p>Telerik MVC charting extension can be integrated to a grouped data by <a href=\"http://docs.telerik.com/kendo-ui/api/javascript/data/datasource\">Kendo UI DataSource</a>. To do so you can follow the following steps:</p> <ol> <li>Bind the chart to a <a href=\"http://docs.telerik.com/KENDO-UI/api/javascript/dataviz/ui/chart#configuration-dataSource\">Kendo UI DataSource control</a>.</li> <li>Set the <a href=\"http://docs.telerik.com/KENDO-UI/api/javascript/dataviz/ui/chart#configuration-dataSource\">DataSource.group.field property</a> to the name of the column in the underlying data which will be the criteria for grouping the chart series items into series: Group(group =&gt; group.Add(model =&gt; model.Symbol)</li> <li>Bind the Y values of the series to the &ldquo;Close&rdquo; field: series.Area(model =&gt; model.Close)</li> <li>Bind the Category Axis to the Date field: .Categories(model =&gt; model.Date)</li> </ol> <p> This will result in as many series as the number of distinct values in the column (i.e., DataSource.group.field). For each value there will be a chart series in the chart. </p>"
                },
                "requiresServer": "true"
            }
        ],
        "category": "Charts"
    },
    {
        "text": "Barcode",
        "name": "barcode",
        "spriteCssClass": "barcodeIcon",
        "api": "dataviz/barcode",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/barcode/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/barcode"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/barcode"
        },
        "items": [
            {
                "text": "Basic usage",
                "url": "barcode/index",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Barcode Demo"
                },
                "meta": {
                    "aspnet-mvc": "This sample demonstrates the core functionality of ASP.NET MVC Barcode which helps you easily encode data in machine readable format."
                }
            },
            {
                "text": "API",
                "url": "barcode/api",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Barcode API Demo"
                },
                "meta": {
                    "aspnet-mvc": "This sample demonstrates the different symbologies the ASP.NET MVC Barcode supports and the different options that could be set."
                }
            }
        ],
        "category": "Barcodes"
    },
    {
        "text": "Box Plot Charts",
        "name": "box-plot-charts",
        "api": "dataviz/chart",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/chart/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/chart"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/chart"
        },
        "spriteCssClass": "chartBoxPlotIcon",
        "items": [
            {
                "text": "Basic usage",
                "url": "box-plot-charts/index",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Box Plot Charts Example"
                },
                "meta": {
                    "aspnet-mvc": "In this demo you will see in action the ASP.NET MVC Box Plot Chart HTMLHelper extension for Kendo UI Box Plot Charts component."
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik ASP.NET MVC chart is a powerful data visualization component, which allows you to graphically represent your data. It is useful when you would like to utilize modern browser technologies such as <a href=\"http://en.wikipedia.org/wiki/Scalable_Vector_Graphics\">SVG</a> or <a href=\"https://en.wikipedia.org/wiki/Canvas_element\">Canvas</a> (with a fallback to <a href=\"http://en.wikipedia.org/wiki/Vector_Markup_Language\">VML</a> for older IE versions) for interactive data visualizations. </p> <p>The component offers a variety of chart types such as area, bar, line, scatter, polar, radar, pie and donut, stock (OHLC) and many more.</p> <p>The Box Plot chart is useful for comparing distributions between different sets of numerical data. It depicts graphically numerical data by displaying a data distribution summary with six indicators (lower value, first quartile, median, mean, third quartile, upper value) and outliers for each set of data.<br /> <br /> The chart can fetch data for its series from either local or remote data source. You can find more information about the MVC chart in the <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/overview\">product documentation</a>.</p> <p><strong><br /> Key Features of Telerik MVC Charts</strong></p> <ul> <li>Various Chart Types</li> <li>A Number of Data Types</li> <li>High Performance</li> <li>Export to PDF</li> <li>Simple-to-Customize Look and Feel</li> <li>Rich Server and Client-side API</li> <li>Server and Client-side Data Binding</li> <li>Built-in Themes</li> <li>Intuitive Built-in Animations</li> <li>Multiple Series and Combination Charts</li> <li>Plot Bands</li> <li>Rich Cross-Browser and Mobile Support</li> </ul> <p>More about <a href=\"http://www.telerik.com/aspnet-mvc/charts\">Telerik MVC Charts</a>.</p>"
                }
            },
            {
                "text": "Vertical Box Plot",
                "url": "box-plot-charts/vertical",
                "new": true,
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Box Plot Charts Example"
                },
                "meta": {
                    "aspnet-mvc": "In this demo you will see in action the ASP.NET MVC Box Plot Chart HTMLHelper extension for Kendo UI Box Plot Charts component."
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik ASP.NET MVC chart is a powerful data visualization component, which allows you to graphically represent your data. It is useful when you would like to utilize modern browser technologies such as <a href=\"http://en.wikipedia.org/wiki/Scalable_Vector_Graphics\">SVG</a> or <a href=\"https://en.wikipedia.org/wiki/Canvas_element\">Canvas</a> (with a fallback to <a href=\"http://en.wikipedia.org/wiki/Vector_Markup_Language\">VML</a> for older IE versions) for interactive data visualizations. </p> <p>The component offers a variety of chart types such as area, bar, line, scatter, polar, radar, pie and donut, stock (OHLC) and many more.</p> <p>The Box Plot chart is useful for comparing distributions between different sets of numerical data. It depicts graphically numerical data by displaying a data distribution summary with six indicators (lower value, first quartile, median, mean, third quartile, upper value) and outliers for each set of data.<br /> <br /> The chart can fetch data for its series from either local or remote data source. You can find more information about the MVC chart in the <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/overview\">product documentation</a>.</p> <p><strong><br /> Key Features of Telerik MVC Charts</strong></p> <ul> <li>Various Chart Types</li> <li>A Number of Data Types</li> <li>High Performance</li> <li>Export to PDF</li> <li>Simple-to-Customize Look and Feel</li> <li>Rich Server and Client-side API</li> <li>Server and Client-side Data Binding</li> <li>Built-in Themes</li> <li>Intuitive Built-in Animations</li> <li>Multiple Series and Combination Charts</li> <li>Plot Bands</li> <li>Rich Cross-Browser and Mobile Support</li> </ul> <p>More about <a href=\"http://www.telerik.com/aspnet-mvc/charts\">Telerik MVC Charts</a>.</p>"
                }
            },
            {
                "text": "Binding to remote data",
                "url": "box-plot-charts/remote-data-binding",
                "title": {
                    "aspnet-mvc": "Binding to remote data example | ASP.NET MVC Box Plot Charts"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how ASP.NET MVC Box Plot Charts can be bound to remote data to produce high-performance report in your business app."
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik MVC Chart offers two ways of data-binding:</p> <ul> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/overview\" target=\"_blank\">Server</a> - the chart will bind to a supplied model</li> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\" target=\"_blank\">Ajax</a> - the chart will perform Ajax requests to populate its series</li> </ul> <p>For remote data binding you need to specify a remote endpoint or web service returning data in JSON/JSONP format and utilize the DataSource as a mediator between the chart and the underlying data. To make the connection to the remote endpoint and process the data properly, the data source needs information about the web service URL(s), the request type, the response data type, and the structure (schema) of the response, in case it is more complex than a plain array of objects.</p> <p>In this example the chart fetches its data from a MVC controller assigned via the DataSource read configuration. You can find more information about the data-binding capabilities of the MVC chart in this <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\">help article</a>.</p>"
                },
                "requiresServer": "true"
            },
            {
                "text": "Binding to local data",
                "url": "box-plot-charts/local-data-binding",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Box Plot Charts binding to local data demo"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how the local data-binding is supported in ASP.NET MVC Box Plot Charts. Use the demo source code to try the feature of the control."
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik MVC Box Plot chart can be instructed to display data from local data storage using its built-in data-binding capabilities. </p> <p>There are two ways to bind the chart:</p> <ul> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/overview\">Server</a> - the chart will bind to a supplied model</li> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\">Ajax</a> - the chart will perform Ajax requests to populate its series</li> </ul> <p>You can find additional information about how to utilize the data-binding capabilities of the MVC chart in <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\">the Getting Started section</a> of the product documentation.</p>"
                }
            }
        ],
        "category": "Charts"
    },
    {
        "text": "Bubble Charts",
        "name": "bubble-charts",
        "api": "dataviz/chart",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/chart/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/chart"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/chart"
        },
        "spriteCssClass": "chartBubbleIcon",
        "items": [
            {
                "text": "Basic usage",
                "url": "bubble-charts/index",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Bubble Charts demo"
                },
                "meta": {
                    "aspnet-mvc": "This example demonstrates the basic usage and core features of the ASP.NET MVC Bubble Chart control."
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik ASP.NET MVC chart is a powerful data visualization component, which allows you to graphically represent your data. It is useful when you would like to utilize modern browser technologies such as <a href=\"http://en.wikipedia.org/wiki/Scalable_Vector_Graphics\">SVG</a> or <a href=\"https://en.wikipedia.org/wiki/Canvas_element\">Canvas</a> (with a fallback to <a href=\"http://en.wikipedia.org/wiki/Vector_Markup_Language\">VML</a> for older IE versions) for interactive data visualizations. </p> <p>The component offers a variety of chart types such as area, bar, bubble, line, scatter, polar, radar, pie and donut, stock (OHLC) and many more.</p> <p>A Bubble chart shows the data as points with coordinates and size defined by their items' values. It is similar to the Scatter chart, in which the data points are replaced with bubbles. This allows a Bubble chart to display three dimensional data &mdash; two values for the items' coordinates and one for their size. A Bubble chart is useful for visualizing different scientific relationships (economic, social, etc.). This chart type's x-axis is also numerical and does not require items.<br /> <br /> The chart can fetch data for its series from either local or remote data source. You can find more information about the MVC chart in the <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/overview\">product documentation</a>.</p> <p><strong><br /> Key Features of Telerik MVC Charts</strong></p> <ul> <li>Various Chart Types</li> <li>A Number of Data Types</li> <li>High Performance</li> <li>Export to PDF</li> <li>Simple-to-Customize Look and Feel</li> <li>Rich Server and Client-side API</li> <li>Server and Client-side Data Binding</li> <li>Built-in Themes</li> <li>Intuitive Built-in Animations</li> <li>Multiple Series and Combination Charts</li> <li>Plot Bands</li> <li>Rich Cross-Browser and Mobile Support</li> </ul> <p>More about <a href=\"http://www.telerik.com/aspnet-mvc/charts\">Telerik MVC Charts</a>.</p>"
                }
            },
            {
                "text": "Binding to remote data",
                "url": "bubble-charts/remote-data-binding",
                "title": {
                    "aspnet-mvc": "Binding to remote data example | UI for ASP.NET MVC Bubble Chart"
                },
                "meta": {
                    "aspnet-mvc": "This demo illustrates the  binding to remote data feature of ASP.NET MVC Bubble Chart."
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik MVC Chart offers two ways of data-binding:</p> <ul> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/overview\" target=\"_blank\">Server</a> - the chart will bind to a supplied model</li> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\" target=\"_blank\">Ajax</a> - the chart will perform Ajax requests to populate its series</li> </ul> <p>For remote data binding you need to specify a remote endpoint or web service returning data in JSON/JSONP format and utilize the DataSource as a mediator between the chart and the underlying data. To make the connection to the remote endpoint and process the data properly, the data source needs information about the web service URL(s), the request type, the response data type, and the structure (schema) of the response, in case it is more complex than a plain array of objects.</p> <p>In this example the chart fetches its data from a MVC controller assigned via the DataSource read configuration. You can find more information about the data-binding capabilities of the MVC chart in this <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\">help article</a>.</p>"
                },
                "requiresServer": "true"
            },
            {
                "text": "Binding to local data",
                "url": "bubble-charts/local-data-binding",
                "title": {
                    "aspnet-mvc": "Local data binding mode in ASP.NET MVC Bubble chart control"
                },
                "meta": {
                    "aspnet-mvc": "This demo illustrates the powerful Binding to local data feature, supported in ASP.NET MVC Bubble Chart component."
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik MVC Bubble chart can be instructed to display data from local data storage using its built-in data-binding capabilities. </p> <p>There are two ways to bind the chart:</p> <ul> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/overview\">Server</a> - the chart will bind to a supplied model</li> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\">Ajax</a> - the chart will perform Ajax requests to populate its series.</li> </ul> <p>You can find additional information about how to utilize the data-binding capabilities of the MVC chart in <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\">the Getting Started section</a> of the product documentation.</p>"
                }
            },
            {
                "text": "Binding to grouped data",
                "url": "bubble-charts/grouped-data",
                "title": {
                    "aspnet-mvc": "Binding to grouped data example | ASP.NET MVC Bubble Charts"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how to bind the ASP.NET MVC Bubble Chart component to grouped data. See how you can implement the feature in your rich web app."
                },
                "description": {
                    "aspnet-mvc": "<p>Telerik MVC charting extension can be integrated to a grouped data by <a href=\"http://docs.telerik.com/kendo-ui/api/javascript/data/datasource\">Kendo UI DataSource</a>. To do, so you can follow the steps below:</p> <ol> <li>Bind the chart to a <a href=\"http://docs.telerik.com/KENDO-UI/api/javascript/dataviz/ui/chart#configuration-dataSource\">Kendo UI DataSource control</a>.</li> <li>Set the <a href=\"http://docs.telerik.com/KENDO-UI/api/javascript/dataviz/ui/chart#configuration-dataSource\">DataSource.group.field property</a> to the name of the column (e.g., the &ldquo;Country&rdquo; field) in the underlying data which will be the criteria for grouping the chart series items into series: Group(group =&gt; group.Add(model =&gt; model.Country)</li> <li>Bind the X, Y and Size values of the series to the &ldquo;Year, Standing and Number&rdquo; fields: </li> </ol> <p>series.Bubble(model =&gt; model.Year, model =&gt; model.Standing, model =&gt; model.Number)</p>"
                },
                "requiresServer": "true"
            }
        ],
        "category": "Charts"
    },
    {
        "text": "Bullet Charts",
        "name": "bullet-charts",
        "api": "dataviz/chart",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/chart/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/chart"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/chart"
        },
        "spriteCssClass": "chartBulletIcon",
        "items": [
            {
                "text": "Basic usage",
                "url": "bullet-charts/index",
                "title": {
                    "aspnet-mvc": "Basic usage of Telerik ASP.NET MVC Bullet Charts"
                },
                "meta": {
                    "aspnet-mvc": "This sample demonstrates how to use the ASP.NET MVC helper for Kendo UI bullet graph, powered by HTML5 and jQuery."
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik ASP.NET MVC chart is a powerful data visualization component, which allows you to graphically represent your data. It is useful when you would like to utilize modern browser technologies such as <a href=\"http://en.wikipedia.org/wiki/Scalable_Vector_Graphics\">SVG</a> or <a href=\"https://en.wikipedia.org/wiki/Canvas_element\">Canvas</a> (with a fallback to <a href=\"http://en.wikipedia.org/wiki/Vector_Markup_Language\">VML</a> for older IE versions) for interactive data visualizations. </p> <p>The component offers a variety of chart types such as area, bar, line, scatter, polar, radar, pie and donut, stock (OHLC) and many more.</p> <p>In this demo, you can see how to configure a Bullet chart, which is a variation of a <a href=\"http://demos.telerik.com/aspnet-mvc/bar-charts/index\">bar chart</a>. You can use it as a replacement for dashboard gauges and meters. The bullet graph compares a given quantitative measure (such as temperature) against qualitative ranges (e.g. warm, hot, mild, cool, chilly, cold, freezing, icy, frosty) and a symbol marker that encodes the comparative measure (for example the max temperature a year ago).<br /> <br /> The chart can fetch data for its series from either local or remote data source. You can find more information about the MVC chart in the <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/overview\">product documentation</a>.</p> <p><strong>Key Features of Telerik MVC Charts</strong></p> <ul> <li>Various Chart Types</li> <li>A Number of Data Types</li> <li>High Performance</li> <li>Export to PDF</li> <li>Simple-to-Customize Look and Feel</li> <li>Rich Server and Client-side API</li> <li>Server and Client-side Data Binding</li> <li>Built-in Themes</li> <li>Intuitive Built-in Animations</li> <li>Multiple Series and Combination Charts</li> <li>Plot Bands</li> <li>Rich Cross-Browser and Mobile Support</li> </ul> <p>More about <a href=\"http://www.telerik.com/aspnet-mvc/charts\">Telerik MVC Charts</a>.</p>"
                }
            },
            {
                "text": "Binding to local data",
                "url": "bullet-charts/local-data-binding",
                "title": {
                    "aspnet-mvc": "Local Data Binding in ASP.NET MVC Bullet Charts demo"
                },
                "meta": {
                    "aspnet-mvc": "In this example we will bind local data to the ASP.NET MVC Bullet Chart in order to show the behavior of the component."
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik MVC Bullet chart can be instructed to display data from local data storage using its built-in data-binding capabilities. </p> <p>There are two ways for databinding:</p> <ul> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/overview\">Server</a> - the chart will bind to a supplied model</li> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\">Ajax</a> - the chart will perform Ajax requests to populate its series.</li> </ul> <p>You can find additional information about how to utilize the data-binding capabilities of the MVC chart in <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\">the Getting Started section</a> of the product documentation.</p>"
                }
            },
            {
                "text": "Binding to remote data",
                "url": "bullet-charts/remote-data-binding",
                "title": {
                    "aspnet-mvc": "Binding ASP.NET MVC Bullet Chart to remote data"
                },
                "meta": {
                    "aspnet-mvc": "This online demo will show you how to bind ASP.NET MVC Bullet Chart to remote data."
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik MVC Chart offers two ways of data-binding:</p> <ul> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/overview\" target=\"_blank\">Server</a> - the chart will bind to a supplied model</li> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\" target=\"_blank\">Ajax</a> - the chart will perform Ajax requests to populate its series</li> </ul> <p>For remote data binding you need to specify a remote endpoint or web service returning data in JSON/JSONP format and utilize the DataSource as a mediator between the chart and the underlying data. To make the connection to the remote endpoint and process the data properly, the data source needs information about the web service URL(s), the request type, the response data type, and the structure (schema) of the response, in case it is more complex than a plain array of objects.</p> <p>In this example the chart fetches its data from a MVC controller assigned via the DataSource read configuration. You can find more information about the data-binding capabilities of the MVC chart in this <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\">help article</a>.</p>"
                },
                "requiresServer": "true"
            }
        ],
        "category": "Charts"
    },
    {
        "text": "Chart API",
        "name": "chart-api",
        "api": "dataviz/chart",
        "spriteCssClass": "chartIcon",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/chart/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/chart"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/chart"
        },
        "items": [
            {
                "text": "Methods",
                "url": "chart-api/index",
                "title": {
                    "aspnet-mvc": "Charting API methods for ASP.NET MVC and jQuery "
                },
                "meta": {
                    "aspnet-mvc": "Play with this demo and explore all API functions of Telerik Charting control for ASP.NET MVC."
                },
                "description": {
                    "aspnet-mvc": "<p>This demo shows how to get reference to the Kendo Chart and its series client-side objects, which allows you to customize series options like type, appearance, stacking and many more:</p> <ul> <li>Get reference to the Kendo UI Chart client-side object: var chart = $(\"#chart\").data(\"kendoChart\");</li> <li>Get reference to the series client object: series = chart.options.series,</li> <li>Set the series type: series[i].type = type;</li> <li>Stack the series: series[i].stack = stack;</li> </ul> <p>You can find a complete list of the series attributes in <a href=\"http://docs.telerik.com/kendo-ui/api/javascript/dataviz/ui/chart#configuration-series\">the control&rsquo;s API documentation</a>.</p>"
                }
            },
            {
                "text": "Events",
                "url": "chart-api/events",
                "title": {
                    "aspnet-mvc": "Chart API events in ASP.NET MVC | UI for ASP.NET MVC demos"
                },
                "meta": {
                    "aspnet-mvc": "This demo illustrates the use of Telerik ASP.NET MVC API events."
                },
                "description": {
                    "aspnet-mvc": "<p>The Chart exposes through its Events attribute many client-side events that allow easy and flexible use in a wide range of application scenarios:</p> <ul> <li>.SeriesClick()</li> <li>.SeriesHover()</li> <li>.DataBound()</li> <li>.AxisLabelClick()</li> <li>.PlotAreaClick()</li> <li>.Render()</li> <li>.LegendItemClick()</li> <li>.LegendItemHover()</li> <li>.DragStart()</li> <li>.Drag()</li> <li>.DragEnd()</li> <li>.ZoomStart()</li> <li>.Zoom()</li> <li>.ZoomEnd()</li> </ul>"
                },
                "requiresServer": "true"
            },
            {
                "text": "PDF Export",
                "url": "chart-api/pdf-export",
                "title": {
                    "aspnet-mvc": "Kendo UI Chart saveAsPDF API method"
                },
                "meta": {
                    "aspnet-mvc": "This example demonstrates how to save the chart contents to PDF directly in your browser"
                },
                "description": {
                    "aspnet-mvc": "<p>This example shows how to configure the PDF export settings of the Telerik MVC Charting helper. </p> <p>You can specify the Author, Creator, Date, FileName, AllPages, PaperSize, ProxyURL and other options, through the <strong>PDF</strong> property of the Chart helper.</p> <p>The <a href=\"http://docs.telerik.com/kendo-ui/api/javascript/dataviz/ui/chart#methods-saveAsPDF\">saveAsPDF</a> or <a href=\"http://docs.telerik.com/kendo-ui/api/javascript/dataviz/ui/chart#methods-exportPDF\">exportPDF</a> methods can be used to trigger export operation.</p>"
                }
            },
            {
                "text": "Advanced Export",
                "url": "chart-api/export",
                "title": {
                    "aspnet-mvc": "Kendo UI Charts Export API methods"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how to export charts to PDF, PNG Images or SVG and save them directly in the browser."
                },
                "description": {
                    "aspnet-mvc": "<p>This example demonstrates how to export charts to PDF, PNG Images or SVG and save the produced files directly in the browser. You can do that by getting a reference to the chart&rsquo;s client-side object<br /> <br /> var chart = $(\"#chart\").getKendoChart();<br /> <br /> and firing the <a href=\"http://docs.telerik.com/kendo-ui/api/javascript/dataviz/ui/chart#methods-exportPDF\">exportPDF</a>, <a href=\"http://docs.telerik.com/kendo-ui/api/javascript/dataviz/ui/chart#methods-exportImage\">exportImage</a> and <a href=\"http://docs.telerik.com/kendo-ui/api/javascript/dataviz/ui/chart#methods-exportSVG\">exportSVG</a> methods. Use the <a href=\"http://docs.telerik.com/kendo-ui/api/javascript/kendo#methods-saveAs\">kendo.saveAs</a> method to save the result and specify the file name.</p>"
                }
            },
            {
                "text": "Selection",
                "url": "chart-api/selection",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Chart API Selection Demo"
                },
                "meta": {
                    "aspnet-mvc": "In this demo you will see how the API is used for a selection in Telerik ASP.NET MVC Chart."
                },
                "description": {
                    "aspnet-mvc": "<p>This demo illustrates how to configure on the client the axis selection in the Telerik MVC Chart through the exposed Events -&gt; SelectStart, Select and SelectEnd chart events as well as the zoom and reverse attributes of the categoryAxis -&gt; select -&gt; mousewheel settings.</p>"
                }
            }
        ],
        "category": "Charts"
    },
    {
        "text": "Donut Charts",
        "name": "donut-charts",
        "api": "dataviz/chart",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/chart/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/chart"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/chart"
        },
        "spriteCssClass": "chartDonutIcon",
        "items": [
            {
                "text": "Basic usage",
                "url": "donut-charts/index",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Donut charts sample | UI for ASP.NET MVC demos"
                },
                "meta": {
                    "aspnet-mvc": "In this demo we show how Telerik jQuery-powered Donut charts can be implemented in ASP.NET MVC."
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik ASP.NET MVC chart is a powerful data visualization component, which allows you to graphically represent your data. It is useful when you would like to utilize modern browser technologies such as <a href=\"http://en.wikipedia.org/wiki/Scalable_Vector_Graphics\">SVG</a> or <a href=\"https://en.wikipedia.org/wiki/Canvas_element\">Canvas</a> (with a fallback to <a href=\"http://en.wikipedia.org/wiki/Vector_Markup_Language\">VML</a> for older IE versions) for interactive data visualizations. </p> <p>The component offers a variety of chart types such as area, bar, line, scatter, polar, radar, pie and donut, stock (OHLC) and many more.</p> <p>In this demo, you can learn how to register and configure a Donut chart, which displays data as sectors from a circle. The Donut chart is a Pie chart variation with ability to display single series of data in a two-dimensional circle. It is useful for displaying data as parts of a whole.<br /> <br /> The chart can fetch data for its series from either local or remote data source. You can find more information about the MVC chart in the <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/overview\">product documentation</a>.</p> <p><strong>Key Features of Telerik MVC Charts</strong></p> <ul> <li>Various Chart Types</li> <li>A Number of Data Types</li> <li>High Performance</li> <li>Export to PDF</li> <li>Simple-to-Customize Look and Feel</li> <li>Rich Server and Client-side API</li> <li>Server and Client-side Data Binding</li> <li>Built-in Themes</li> <li>Intuitive Built-in Animations</li> <li>Multiple Series and Combination Charts</li> <li>Plot Bands</li> <li>Rich Cross-Browser and Mobile Support</li> </ul> <p>More about <a href=\"http://www.telerik.com/aspnet-mvc/charts\">Telerik MVC Charts</a>.</p>"
                }
            },
            {
                "text": "Donut labels",
                "url": "donut-charts/donut-labels",
                "title": {
                    "aspnet-mvc": "Configuration of donut labels in ASP.NET MVC Donut charts"
                },
                "meta": {
                    "aspnet-mvc": "This example shows how to configure the values of ASP.NET MVC Donut Charts, enable/disable donut labels and specify how they are aligned to the chart."
                },
                "description": {
                    "aspnet-mvc": "<p>This example shows how to show/hide the labels of the ASP.NET MVC Donut Chart and specify how they are aligned.</p> <p>You can do that by getting a reference to the Chart client-object via:</p> <p>var chart = $(\"#chart\").data(\"kendoChart\")</p> <p>which will allow you to set and configure its series collection and attributes:<br /> <br /> var pieSeries = chart.options.series[0];<br /> pieSeries.labels.visible = true|false; // If set to true the chart will display the series labels.<br /> pieSeries.labels.align = \"circle\"; // \"circle\" - the labels are positioned in circle around the chart.\"column\" - the labels are positioned in columns to the left and right of the chart.</p> <p>You can find a complete list of the series attributes in <a href=\"http://docs.telerik.com/kendo-ui/api/javascript/dataviz/ui/chart#configuration-series\">the control&rsquo;s API documentation</a>.</p>"
                }
            },
            {
                "text": "Binding to remote data",
                "url": "donut-charts/remote-data-binding",
                "title": {
                    "aspnet-mvc": "Remote data binding in ASP.NET MVC Donut Charts"
                },
                "meta": {
                    "aspnet-mvc": "In this example you will see the remote data binding functionality of Telerik Grid for ASP.NET MVC."
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik MVC Chart offers two ways of data-binding:</p> <ul> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/overview\" target=\"_blank\">Server</a> - the chart will bind to a supplied model</li> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\" target=\"_blank\">Ajax</a> - the chart will perform Ajax requests to populate its series</li> </ul> <p>For remote data binding you need to specify a remote endpoint or web service returning data in JSON/JSONP format and utilize the DataSource as a mediator between the chart and the underlying data. To make the connection to the remote endpoint and process the data properly, the data source needs information about the web service URL(s), the request type, the response data type, and the structure (schema) of the response, in case it is more complex than a plain array of objects.</p> <p>In this example the chart fetches its data from a MVC controller assigned via the DataSource read configuration. You can find more information about the data-binding capabilities of the MVC chart in this <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\">help article</a>.</p>"
                },
                "requiresServer": "true"
            },
            {
                "text": "Binding to local data",
                "url": "donut-charts/local-data-binding",
                "title": {
                    "aspnet-mvc": "Binding ASP.NET Donut charts to local data"
                },
                "meta": {
                    "aspnet-mvc": "This example demonstrates the binding to local data feature in Telerik ASP.NET MVC Donut charts."
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik MVC Donut chart can be instructed to display data from local data storage using its built-in data-binding capabilities. </p> <p>There are two ways to bind the chart:</p> <ul> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/overview\">Server</a> - the chart will bind to a supplied model</li> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\">Ajax</a> - the chart will perform Ajax requests to populate its series.</li> </ul> <p>In this example you can see how to bind the chart using the server approach. You need to create an action method and pass the SpainElectricityBreakdown enumerator located in the \\Models\\Chart\\ChartDataRepository.cs file as a model. After that you should configure the data bound Percentage, Source and Explode fields for the Series. Note that the view has to be strongly typed so that the chart is able to load its data.</p> <p>You can find additional information about how to utilize the data-binding capabilities of the MVC chart in <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\">the Getting Started section</a> of the product documentation.</p>"
                }
            }
        ],
        "category": "Charts"
    },
    {
        "text": "Funnel Charts",
        "name": "funnel-charts",
        "api": "dataviz/chart",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/chart/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/chart"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/chart"
        },
        "spriteCssClass": "chartFunnelIcon",
        "items": [
            {
                "text": "Basic usage",
                "url": "funnel-charts/index",
                "title": {
                    "aspnet-mvc": "Example of ASP.NET MVC Funnel Charts"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows the core functionality of ASP.NET MVC Funnel Charts which visualize the breakdown of data into its elements."
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik ASP.NET MVC chart is a powerful data visualization component, which allows you to graphically represent your data. It is useful when you would like to utilize modern browser technologies such as <a href=\"http://en.wikipedia.org/wiki/Scalable_Vector_Graphics\">SVG</a> or <a href=\"https://en.wikipedia.org/wiki/Canvas_element\">Canvas</a> (with a fallback to <a href=\"http://en.wikipedia.org/wiki/Vector_Markup_Language\">VML</a> for older IE versions) for interactive data visualizations. </p> <p>The component offers a variety of chart types such as area, bar, line, scatter, polar, radar, pie and donut, stock (OHLC) and many more.</p> <p>This example illustrates how to register and configure a Funnel Chart. A Funnel chart displays a single series of data in progressively decreasing or increasing proportions, organized in segments, where each segment represents the value for the particular item from the series. The items' values can also influence the height and the shape of the corresponding segments.</p> <p>Funnel charts are usually used to represent stages in a sales process (e.g., show the amount of potential revenue for each stage); identify a potential problematic areas in any company's process; visualize website visitors trends and other.<br /> <br /> The chart can fetch data for its series from either local or remote data source. You can find more information about the MVC chart in the <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/overview\">product documentation</a>.</p> <p><strong><br /> Key Features of Telerik MVC Charts</strong></p> <ul> <li>Various Chart Types</li> <li>A Number of Data Types</li> <li>High Performance</li> <li>Export to PDF</li> <li>Simple-to-Customize Look and Feel</li> <li>Rich Server and Client-side API</li> <li>Server and Client-side Data Binding</li> <li>Built-in Themes</li> <li>Intuitive Built-in Animations</li> <li>Multiple Series and Combination Charts</li> <li>Plot Bands</li> <li>Rich Cross-Browser and Mobile Support</li> </ul> <p>More about <a href=\"http://www.telerik.com/aspnet-mvc/charts\">Telerik MVC Charts</a>.</p>"
                }
            },
            {
                "text": "Funnel labels",
                "url": "funnel-charts/funnel-labels",
                "title": {
                    "aspnet-mvc": "Configuration of Funnel labels in ASP.NET MVC funnel charts"
                },
                "meta": {
                    "aspnet-mvc": "This example shows how to configure the values of ASP.NET MVC Funnel Charts, enable/disable funnel labels and specify how they are aligned to the chart."
                },
                "description": {
                    "aspnet-mvc": "<p>You can see in this demo how to configure the labels of the MVC funnel chart. You can specify their properties for visibility, position and alignment, font color and size and so on through the SeriesDefaults -&gt; Funnel -&gt; Labels setting:</p> <ul> <li>Visibility: Labels -&gt; Visible</li> <li>Position and Alignment: Labels -&gt; Position and Labels -&gt; Alight </li> <li>Font color and size: Labels -&gt; Color and Labels -&gt; Font</li> </ul>"
                }
            },
            {
                "text": "Binding to remote data",
                "url": "funnel-charts/remote-data-binding",
                "title": {
                    "aspnet-mvc": "Binding to remote data demo for ASP.NET MVC Funnel Charts"
                },
                "meta": {
                    "aspnet-mvc": "This example shows how to bind ASP.NET MVC Funnel Charts to remote data."
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik MVC Chart offers two ways of data-binding:</p> <ul> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/overview\" target=\"_blank\">Server</a> - the chart will bind to a supplied model</li> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\" target=\"_blank\">Ajax</a> - the chart will perform Ajax requests to populate its series</li> </ul> <p>For remote data binding you need to specify a remote endpoint or web service returning data in JSON/JSONP format and utilize the DataSource as a mediator between the chart and the underlying data. To make the connection to the remote endpoint and process the data properly, the data source needs information about the web service URL(s), the request type, the response data type, and the structure (schema) of the response, in case it is more complex than a plain array of objects.</p> <p>In this example the chart fetches its data from a MVC controller assigned via the DataSource read configuration. You can find more information about the data-binding capabilities of the MVC chart in this <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\">help article</a>.</p>"
                },
                "requiresServer": "true"
            },
            {
                "text": "Binding to local data",
                "url": "funnel-charts/local-data-binding",
                "title": {
                    "aspnet-mvc": "Local data binding in ASP.NET MVC Funnel Charts"
                },
                "meta": {
                    "aspnet-mvc": "This demo illustrates how ASP.NET MVC funnel Chart control can be bound to local data to deliver a high-performance business application."
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik MVC Funnel chart can be instructed to display data from local data storage using its built-in data-binding capabilities. </p> <p>There are two ways for databinding:</p> <ul> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/overview\">Server</a> - the chart will bind to a supplied model</li> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\">Ajax</a> - the chart will perform Ajax requests to populate its series.</li> </ul> <p>You can find additional information about how to utilize the data-binding capabilities of the MVC chart in <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\">the Getting Started section</a> of the product documentation.</p>"
                }
            }
        ],
        "category": "Charts"
    },
    {
        "text": "Linear Gauge",
        "name": "linear-gauge",
        "spriteCssClass": "gaugeLinearIcon",
        "api": "dataviz/lineargauge",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/lineargauge/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/gauge"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/gauge"
        },
        "items": [
            {
                "text": "Basic usage",
                "url": "linear-gauge/index",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Linear Gauge Example"
                },
                "meta": {
                    "aspnet-mvc": "This example shows how you can easily implement ASP.NET MVC Linear Gauge in your MVC web application. Draw end users attention to a certain range of values."
                }
            },
            {
                "text": "Scale options",
                "url": "linear-gauge/scale-options",
                "title": {
                    "aspnet-mvc": "Scale customization example for ASP.NET MVC Linear Gauge"
                },
                "meta": {
                    "aspnet-mvc": "This sample illustrates how you can customize ASP.NET MVC Linear Gauge by changing the location of the gauge scale and its appearance."
                }
            },
            {
                "text": "Multiple pointers",
                "url": "linear-gauge/multiple-pointers",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Linear Gauge multiple pointers demo"
                },
                "meta": {
                    "aspnet-mvc": "This example shows how easily you can configure the ASP.NET MVC Linear gauge to use multiple pointers."
                }
            },
            {
                "text": "Export to PDF, Image, SVG",
                "url": "linear-gauge/export",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Linear Gauge export demo"
                },
                "meta": {
                    "aspnet-mvc": "This example shows how easily you can export the ASP.NET MVC linear gauge to PDF, Image and SVG."
                }
            }
        ],
        "category": "Gauges"
    },
    {
        "text": "Radial Gauge",
        "name": "radial-gauge",
        "spriteCssClass": "gaugeRadialIcon",
        "api": "dataviz/radialgauge",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/radialgauge/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/gauge"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/gauge"
        },
        "items": [
            {
                "text": "Basic usage",
                "url": "radial-gauge/index",
                "title": {
                    "aspnet-mvc": "Demo for core features in ASP.NET MVC Radial Gauge control"
                },
                "meta": {
                    "aspnet-mvc": "This sample demonstrates the core functionality of ASP.NET MVC Radial Gauge which helps you easily visualize an indicator within a range of values."
                }
            },
            {
                "text": "Scale options",
                "url": "radial-gauge/scale-options",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Radial Gauge scale customization demo"
                },
                "meta": {
                    "aspnet-mvc": "This example shows how you can easily use simple options to configure the ASP.NET MVC radial gauge, enable/disable scale ranges and gauge labels."
                }
            },
            {
                "text": "Multiple pointers",
                "url": "radial-gauge/multiple-pointers",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Radial Gauge multiple pointers demo"
                },
                "meta": {
                    "aspnet-mvc": "This example shows how easily you can configure the ASP.NET MVC radial gauge to use multiple pointers."
                }
            },
            {
                "text": "Export to PDF, Image, SVG",
                "url": "radial-gauge/export",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Radial Gauge export demo"
                },
                "meta": {
                    "aspnet-mvc": "This example shows how easily you can export the ASP.NET MVC radial gauge to PDF, Image and SVG."
                }
            }
        ],
        "category": "Gauges"
    },
    {
        "text": "Line Charts",
        "name": "line-charts",
        "api": "dataviz/chart",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/chart/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/chart"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/chart"
        },
        "spriteCssClass": "chartLineIcon",
        "items": [
            {
                "text": "Basic usage",
                "url": "line-charts/index",
                "title": {
                    "aspnet-mvc": " ASP.NET MVC Line Charts Control demo"
                },
                "meta": {
                    "aspnet-mvc": "This demo illustrates how you can use Telerik ASP.NET MVC Line Charts helper to show trends for several series on the same diagram & visualize them as lines."
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik ASP.NET MVC chart is a powerful data visualization component, which allows you to graphically represent your data. It is useful when you would like to utilize modern browser technologies such as <a href=\"http://en.wikipedia.org/wiki/Scalable_Vector_Graphics\">SVG</a> or <a href=\"https://en.wikipedia.org/wiki/Canvas_element\">Canvas</a> (with a fallback to <a href=\"http://en.wikipedia.org/wiki/Vector_Markup_Language\">VML</a> for older IE versions) for interactive data visualizations. </p> <p>The component offers a variety of chart types such as area, bar, line, scatter, polar, radar, pie and donut, stock (OHLC) and many more.</p> <p>In this example, you can see how to register and configure a Line chart. A Line chart shows data as continuous lines that pass through points defined by their items' values. It can be useful for showing a trend over time and comparing several (four in this demo) sets of similar data.</p> <p>The chart can fetch data for its series from either local or remote data source. You can find more information about the MVC chart in the <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/overview\">product documentation</a>.</p> <p><strong><br /> Key Features of Telerik MVC Charts</strong></p> <ul><li>Various Chart Types</li> <li>A Number of Data Types</li> <li>High Performance</li> <li>Export to PDF</li> <li>Simple-to-Customize Look and Feel</li> <li>Rich Server and Client-side API</li> <li>Server and Client-side Data Binding</li> <li>Built-in Themes</li> <li>Intuitive Built-in Animations</li> <li>Multiple Series and Combination Charts</li> <li>Plot Bands</li> <li>Rich Cross-Browser and Mobile Support</li> </ul> <p>More about <a href=\"http://www.telerik.com/aspnet-mvc/charts\">Telerik MVC Charts</a>.</p>"
                }
            },
            {
                "text": "Stacked line",
                "url": "line-charts/stacked-line",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Stacked Line Charts Demo"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how you can easily implement ASP.NET MVC Stacked Line Charts in your business webapp."
                },
                "group": "Line Chart Types",
                "description": {
                    "aspnet-mvc": "<p>This demo shows how to configure a Stacked line chart. To enable the stack feature set true as an argument of the the SeriesDefaults -&gt; Bar -&gt; Stack(true) method:</p> <p>.SeriesDefaults(series =&gt; series.Line().Stack(true))</p> <p>You can also divide the line chart on two parts, by setting:</p> <p>.MissingValues(ChartLineMissingValues.Gap)</p> <p>And having <strong>null</strong> data value entries in the series data, which will be used as a divider.</p> <p>For more information inspect the <a href=\"http://docs.telerik.com/kendo-ui/api/aspnet-mvc/kendo.mvc.ui.fluent/chartbuilder#methods-SeriesDefaults%28System.Action%3CKendo.Mvc.UI.Fluent.ChartSeriesDefaultsBuilder%3CT%3E%3E%29\">SeriesDefaults option</a> in the documentation.</p>"
                }
            },
            {
                "text": "100% Stacked line",
                "url": "line-charts/stacked100-line",
                "title": {
                    "aspnet-mvc": "100% stacked line example in Telerik ASP.NET MVC Line charts"
                },
                "meta": {
                    "aspnet-mvc": "This example illustrates how to implement 100% stacked line in Telerik line charts for ASP.NET MVC."
                },
                "description": {
                    "aspnet-mvc": "<p>The Line chart supports 100% stacking, where the last series is always rendered as a flat line on top of the value axis.</p> <p>You can enable the 100% stack feature through the SeriesDefaults -&gt; Line -&gt; Stack(ChartStackType.Stack100) method.</p> <p>For more information inspect the <a href=\"http://docs.telerik.com/kendo-ui/api/aspnet-mvc/kendo.mvc.ui.fluent/chartbuilder#methods-SeriesDefaults%28System.Action%3CKendo.Mvc.UI.Fluent.ChartSeriesDefaultsBuilder%3CT%3E%3E%29\">SeriesDefaults option</a> in the documentation.</p>"
                }
            },
            {
                "text": "Stepped line",
                "url": "line-charts/step-line",
                "title": {
                    "aspnet-mvc": "Steped line demo for Telerik ASP.NET MVC Line Charts"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how to configure step line style for Telerik jQuery-based Line Charts in ASP.NET MVC."
                },
                "description": {
                    "aspnet-mvc": "<p>The Stepped Line chart is a form of Line chart where each data point from the series is connected with vertical and horizontal lines to form a step-like progression. This type of line visualization is useful when you want to highlight the increase or decrease in values over time.</p> <p>You can configure a stepped area chart through the Series -&gt; Line -&gt; Style(ChartAreaStyle.<strong>Step</strong>) settings of the MVC Chart.</p>"
                }
            },
            {
                "text": "Smooth line",
                "url": "line-charts/smooth-line",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Smooth Line Charts for Kendo UI Line chart widget"
                },
                "meta": {
                    "aspnet-mvc": "In this demo you will figure out how to configure smooth line (spline) style chart in ASP.NET MVC."
                },
                "description": {
                    "aspnet-mvc": "<p>This demo shows how to configure smooth line (spline) style for the Telerik MVC Line chart.</p> <p>A Spline chart is a form of line/area chart where each data point from the series is connected with a curved line, which represents a rough approximation of the missing data points.</p> <p>You can configure a smooth line area chart through the Series -&gt; Line -&gt; Style(ChartLineStyle.Smooth) settings of the ASP.NET MVC Chart.</p>"
                }
            },
            {
                "text": "Date axis",
                "url": "line-charts/date-axis",
                "title": {
                    "aspnet-mvc": "Date axis in ASP.NET MVC Line Charts"
                },
                "meta": {
                    "aspnet-mvc": "This example shows how date axis functionality works in Telerik Line Charts for ASP.NET MVC."
                },
                "group": "Functionality",
                "description": {
                    "aspnet-mvc": "<p>You can scale the date axis of your ASP.NET MVC Line Chart to get a better visualization of the seasonal data in your app. This can be done by modifying:</p> <ul> <li>The base date unit of the x-axis through the CategoryAxis.BaseUnit property, which takes seconds, minutes, hours, days, week, months and years</li> <li>The default aggregates of the series through the Series.Aggregate property, which takes max, min, sum, avg and count.</li> </ul>"
                }
            },
            {
                "text": "Logarithmic axis",
                "url": "line-charts/logarithmic-axis",
                "title": {
                    "aspnet-mvc": "Logarithmic axis sample for ASP.NET MVC Line Charts"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how you can use a logarithmic axis for the ASP.NET MVC Line Chart."
                },
                "description": {
                    "aspnet-mvc": "<p>A logarithmic axis is a special numeric axis that transforms the actual values by using a logarithmic function with a particular base. A logarithmic axis is useful for displaying values that cover different orders of magnitude because it lets large values display together with small values in a more condensed scale than the default linear axis.</p> <p>This demo shows how you can use a logarithmic axis for the ASP.NET MVC Line Chart by setting the ValueAxis -&gt; Logarithmic() method. The base of the logarithmic axis is defined by the interval between the major divisions, controlled by the MajorUnit property.</p>"
                },
                "requiresServer": "true"
            },
            {
                "text": "Multi-axis",
                "url": "line-charts/multiple-axes",
                "title": {
                    "aspnet-mvc": "Multi-axes feature example | ASP.NET MVC Line Charts control"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how easily ASP.NET MVC Line Charts can be customized to achieve what you want in your app. Apply multiple axes to your ASP.NET MVC Line Charts."
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik ASP.NET MVC Line chart supports multiple axis. This helps you leverage the best charting performance and visualize data on any number axis to provide solid business reports for your users.</p> <p>The example shows a weather report and includes information for the: <em>max and min temperatures, wind speed and rainfall in mm</em>. Note that each of them has unique name which is set through the <strong>ValueAxis.Title </strong>method. You can also set the <strong>CategoryAxis.AxisCrossingValue</strong> method to specify the alignment of the value axes.</p>"
                }
            },
            {
                "text": "Notes",
                "url": "line-charts/notes",
                "title": {
                    "aspnet-mvc": "Notes feature example | ASP.NET MVC Line Charts Control"
                },
                "meta": {
                    "aspnet-mvc": "This demo illustrates how you can use Telerik ASP.NET MVC Line Charts helper to show trends for several series on the same diagram & visualize them as lines."
                },
                "description": {
                    "aspnet-mvc": "<p>In this demo, you can see how to add notes for the Min and Max values of the Line chart.</p> <p>To do that you need to set the Series -&gt; Line -&gt; Notes and NoteTextField setting which will also allow you to specify the note and its label positions.</p>"
                }
            },
            {
                "text": "Error Bars",
                "url": "line-charts/error-bars",
                "title": {
                    "aspnet-mvc": "Example of using ErrorBars for ASP.NET MVC Line Chart"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how to use ErrorBars for ASP.NET MVC Line Chart"
                },
                "description": {
                    "aspnet-mvc": "<p>This demo illustrates how to show variability of data using the Error Bars feature of the Telerik MVC Line Chart. The Error bars are specified as part of the Series setting and are offered by the following Series types: Area, Vertical Area, Column, Bar, Line, Vertical Line, Scatter and ScatterLine.</p> <p>The error bars support statistical calculations based on the series data. The supported types are <a href=\"http://docs.telerik.com/kendo-ui/dataviz/chart/error-bars#setting-a-percentage-value\">percentage value</a>, <a href=\"http://en.wikipedia.org/wiki/Standard_error\">standard error</a> and <a href=\"http://en.wikipedia.org/wiki/Standard_deviation\">population standard deviation</a> and other. To specify that percentage error should be used, you need to set \"percentage(Int)\" as a value, i.e.</p><p>.ErrorBars(errorBars =&gt; errorBars.Value(\"percentage(20\"))</p><p>You can find more information in the following help article: <a href=\"http://docs.telerik.com/kendo-ui/dataviz/chart/error-bars\">Error Bars</a>.</p>"
                }
            },
            {
                "text": "Custom Visuals",
                "url": "line-charts/visuals",
                "title": {
                    "aspnet-mvc": "Example of using custom visuals for ASP.NET MVC Line Chart"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how to use ustom visuals for the ASP.NET MVC Line Chart"
                },
                "description": {
                    "aspnet-mvc": "<p>You can implement custom visualizations for the Line chart markers and highlights by utilizing the <a href=\"http://docs.telerik.com/kendo-ui/api/javascript/drawing\">Kendo Drawing API</a>. You can do that by setting a JavaScript function name as a string parameter of the Series:</p> <ul> <li>Markers -&gt; Visual method: .Markers(markers =&gt; markers.Visual(\"markerVisual\"))</li> <li>Highlight -&gt; Toggle method -&gt; .Highlight(highlight =&gt; highlight.Toggle(\"toggleHandler\")); </li> </ul> <p>Various context information is available through the function argument fields. Such are <strong>rect</strong> (the <a href=\"http://docs.telerik.com/kendo-ui/api/javascript/geometry/rect\">kendo.geometry.Rect</a> that defines where the visual should be rendered), createVisual (a function that can be used to get the default visual) and options (different options depending on the item type).</p> <p>You can read more about it in the <a href=\"http://docs.telerik.com/kendo-ui/api/javascript/drawing\">Kendo UI JavaScript API reference</a>.</p>"
                }
            },
            {
                "text": "Binding to remote data",
                "url": "line-charts/remote-data-binding",
                "title": {
                    "aspnet-mvc": "Binding to remote data - Telerik ASP.NET MVC Line Charts demo"
                },
                "meta": {
                    "aspnet-mvc": "This example demonstrates how Telerik ASP.NET MVC Line charts can be bound to remote data source."
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik MVC Chart offers two ways of data-binding:</p> <ul> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/overview\" target=\"_blank\">Server</a> - the chart will bind to a supplied model</li> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\" target=\"_blank\">Ajax</a> - the chart will perform Ajax requests to populate its series</li> </ul> <p>For remote data binding you need to specify a remote endpoint or web service returning data in JSON/JSONP format and utilize the DataSource as a mediator between the chart and the underlying data. To make the connection to the remote endpoint and process the data properly, the data source needs information about the web service URL(s), the request type, the response data type, and the structure (schema) of the response, in case it is more complex than a plain array of objects.</p> <p>In this example the chart fetches its data from a MVC controller assigned via the DataSource read configuration. You can find more information about the data-binding capabilities of the MVC chart in this <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\">help article</a>.</p>"
                },
                "group": "Data Binding",
                "requiresServer": "true"
            },
            {
                "text": "Binding to local data",
                "url": "line-charts/local-data-binding",
                "title": {
                    "aspnet-mvc": "Binding to local data example | ASP.NET MVC Line Charts"
                },
                "meta": {
                    "aspnet-mvc": "This example illustrates how ASP.NET MVC Line Charts use existing objects as data points."
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik MVC Line chart can be instructed to display data from local data storage using its built-in data-binding capabilities. </p> <p>There are two ways to bind the chart:</p> <ul> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/overview\">Server</a> - the chart will bind to a supplied model</li> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\">Ajax</a> - the chart will perform Ajax requests to populate its series</li> </ul> <p>In this example you can see how to bind the chart using the server approach. You need to create an action method and pass the InternetUsers list located in the \\Models\\Chart\\ChartDataRepository.cs file as a model. After that you should configure the data bound fields for the Series (series =>{series.Area(model => model.Value)}) and Category Axis (axis => axis.Categories(model => model.Year)) Note that the view has to be strongly typed so that the chart is able to load its data.</p> <p>You can find additional information about how to utilize the data-binding capabilities of the MVC chart in <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\">the Getting Started section</a> of the product documentation.</p>"
                }
            },
            {
                "text": "Binding to grouped data",
                "url": "line-charts/grouped-data",
                "title": {
                    "aspnet-mvc": "Binding to grouped data demo | ASP.NET MVC Line Charts"
                },
                "meta": {
                    "aspnet-mvc": "This example illustrates how binding to grouped data feature works in ASP.NET MVC Line Charts."
                },
                "description": {
                    "aspnet-mvc": "<p>Telerik MVC charting extension can be integrated to a grouped data by <a href=\"http://docs.telerik.com/kendo-ui/api/javascript/data/datasource\">Kendo UI DataSource</a>. To do, so you can follow the steps below:</p> <ol> <li>Bind the chart to a <a href=\"http://docs.telerik.com/kendo-ui/framework/datasource/overview\">Kendo UI DataSource control</a>.</li> <li>Set the <a href=\"http://docs.telerik.com/kendo-ui/framework/datasource/basic-usage#working-with-grouped-data\">DataSource.group.field property</a> to the name (e.g., the &ldquo;Symbol&rdquo; field) of the column in the underlying data which will be the criteria for grouping the chart series items into series Group(group =&gt; group.Add(model =&gt; model.Symbol)</li> <li>Bind the Y values of the series to the corresponding data source field (e.g., the \"Close\" field): series.Area(model =&gt; model.Close)</li> <li>Bind the Category Axis to the corresponding field (e.g., the \"Date\" field): .Categories(model =&gt; model.Date)</li> </ol> <p> This will result in as many series as the number of distinct values in the DataSource.group.field column (e.g., \"Symbol\"). &nbsp;Since the &ldquo;Symbol&rdquo; field in this example contains three distinct values (\"1. GOOG (close)\", \"2. AAPL (close)\" and \"3. AMZN (close)\") the chart will create three series as well.</p>"
                },
                "requiresServer": "true"
            }
        ],
        "category": "Charts"
    },
    {
        "text": "Diagram",
        "name": "diagram",
        "api": "dataviz/diagram",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/diagram/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/diagram"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/diagram"
        },
        "spriteCssClass": "diagramIcon",
        "items": [
            {
                "text": "Basic usage",
                "url": "diagram/index",
                "title": {
                    "aspnet-mvc": "Example of ASP.NET MVC Diagram with a simple layout"
                },
                "meta": {
                    "aspnet-mvc": "With this demo built with ASP.NET MVC, you will be able to find out how ASP.NET MVC Diagram control can be implemented for hierarchical diagrams."
                },
                "packages": [
                    "!mvc-core"
                ]
            },
            {
                "text": "Built-in Layouts",
                "url": "diagram/layout",
                "title": {
                    "aspnet-mvc": "Example of ASP.NET MVC Diagram with different layouts"
                },
                "meta": {
                    "aspnet-mvc": "This sample demonstrates the built-in layouts which are specific to ASP.NET MVC Diagram component."
                },
                "packages": [
                    "!mvc-core"
                ]
            },
            {
                "text": "Editing",
                "url": "diagram/editing",
                "title": {
                    "aspnet-mvc": "Example of ASP.NET MVC Diagram with editing"
                },
                "meta": {
                    "aspnet-mvc": "In this example you will learn how you can easily use editing operations in ASP.NET MVC Diagram."
                },
                "packages": [
                    "!mvc-core"
                ]
            },
            {
                "text": "PDF Export",
                "url": "diagram/pdf-export",
                "title": {
                    "aspnet-mvc": "Kendo UI Diagram saveAsPDF API method"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how to save the diagram as PDF directly in the browser."
                },
                "packages": [
                    "!mvc-core"
                ]
            },
            {
                "text": "Advanced Export",
                "url": "diagram/export",
                "title": {
                    "aspnet-mvc": "Kendo UI Diagram Export API methods"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how to export diagrams to PDF, PNG Images or SVG and save them directly in the browser."
                },
                "packages": [
                    "!mvc-core"
                ]
            },
            {
                "text": "Events",
                "url": "diagram/events",
                "title": {
                    "aspnet-mvc": "Example of using events in ASP.NET MVC Diagram control"
                },
                "meta": {
                    "aspnet-mvc": "This example demonstrates all the different events available in Telerik ASP.NET MVC Diagram control."
                },
                "packages": [
                    "!mvc-core"
                ]
            },
            {
                "text": "API",
                "url": "diagram/api",
                "title": {
                    "aspnet-mvc": "Example of ASP.NET MVC Diagram API"
                },
                "meta": {
                    "aspnet-mvc": "The API Functions of ASP.NET MVC Diagram control give you the option to add/remove shapes and connections, set the current pan and zoom, select elements."
                },
                "packages": [
                    "!mvc-core"
                ]
            }
        ],
        "category": "Diagrams & Maps"
    },
    {
        "text": "Map",
        "name": "map",
        "api": "dataviz/map",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/map/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/map"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/map"
        },
        "spriteCssClass": "mapIcon",
        "items": [
            {
                "text": "Basic usage",
                "url": "map/index",
                "title": {
                    "aspnet-mvc": "Example of ASP.NET MVC Map with a simple tile layer"
                },
                "meta": {
                    "aspnet-mvc": "With this demo built with ASP.NET MVC, you will be able to find out how ASP.NET MVC Map control can be implemented for tile maps."
                }
            },
            {
                "text": "Bing tile layer",
                "url": "map/bing",
                "title": {
                    "aspnet-mvc": "Bing tile layer in ASP.NET MVC Map"
                },
                "meta": {
                    "aspnet-mvc": "This demo demostrates how you can use Bing tile layer in your ASP.NET MVC Map."
                }
            },
            {
                "text": "Bubble layer",
                "url": "map/bubble-layer",
                "title": {
                    "aspnet-mvc": "Displaying Bubble Kendo UI map layer"
                },
                "meta": {
                    "aspnet-mvc": "This demo illustrates how to bind a Kendo UI bubble map layer to remote data."
                },
                "requiresServer": "true"
            },
            {
                "text": "Binding to GeoJSON",
                "url": "map/geojson",
                "title": {
                    "aspnet-mvc": "Displaying GeoJSON shapes in ASP.NET MVC map"
                },
                "meta": {
                    "aspnet-mvc": "This demo illustrates how to bind an ASP.NET MVC map layer to GeoJSON shapes."
                },
                "requiresServer": "true"
            },
            {
                "text": "Binding markers to remote data",
                "url": "map/remote-markers",
                "title": {
                    "aspnet-mvc": "Load map markers in a ASP.NET MVC map layer"
                },
                "meta": {
                    "aspnet-mvc": "This demo illustrates how to bind a ASP.NET MVC marker layer."
                },
                "requiresServer": "true"
            },
            {
                "text": "Export",
                "url": "map/export",
                "title": {
                    "aspnet-mvc": "Kendo UI Map Export API methods"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how to export maps to PDF, PNG Images or SVG and save them directly in the browser."
                }
            },
            {
                "text": "Events",
                "url": "map/events",
                "title": {
                    "aspnet-mvc": "Events API for ASP.NET MVC Map component"
                },
                "meta": {
                    "aspnet-mvc": "This sample demonstrates the events which are specific to ASP.NET MVC Map component."
                },
                "requiresServer": "true"
            },
            {
                "text": "API",
                "url": "map/api",
                "title": {
                    "aspnet-mvc": "API for ASP.NET MVC Map component"
                },
                "meta": {
                    "aspnet-mvc": "This sample demonstrates the public methods which are specific to ASP.NET MVC Map component."
                },
                "requiresServer": "true"
            }
        ],
        "category": "Diagrams & Maps"
    },
    {
        "text": "Pie Charts",
        "name": "pie-charts",
        "api": "dataviz/chart",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/chart/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/chart"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/chart"
        },
        "spriteCssClass": "chartPieIcon",
        "items": [
            {
                "text": "Basic usage",
                "url": "pie-charts/index",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Pie Charts example "
                },
                "meta": {
                    "aspnet-mvc": "This example illustrates core functionality of Telerik pie charts extension for ASP.NET MVC."
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik ASP.NET MVC chart is a powerful data visualization component, which allows you to graphically represent your data. It is useful when you would like to utilize modern browser technologies such as <a href=\"http://en.wikipedia.org/wiki/Scalable_Vector_Graphics\">SVG</a> or <a href=\"https://en.wikipedia.org/wiki/Canvas_element\">Canvas</a> (with a fallback to <a href=\"http://en.wikipedia.org/wiki/Vector_Markup_Language\">VML</a> for older IE versions) for interactive data visualizations. </p> <p>The component offers a variety of chart types such as area, bar, line, scatter, polar, radar, pie and donut, stock (OHLC) and many more.</p> <p>In this example, you can see how to register and configure a Pie chart. This chart type displays the data as sectors from a circle and is useful for displaying data as parts of a whole. The Pie chart displays a single series of data in a two-dimensional circle. <br /> <br /> The chart can fetch data for its series from either local or remote data source. You can find more information about the MVC chart in the <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/overview\">product documentation</a>.</p> <p><strong><br />Key Features of Telerik MVC Charts</strong></p> <ul> <li>Various Chart Types</li> <li>A Number of Data Types</li> <li>High Performance</li> <li>Export to PDF</li> <li>Simple-to-Customize Look and Feel</li> <li>Rich Server and Client-side API</li> <li>Server and Client-side Data Binding</li> <li>Built-in Themes</li> <li>Intuitive Built-in Animations</li> <li>Multiple Series and Combination Charts</li> <li>Plot Bands</li> <li>Rich Cross-Browser and Mobile Support</li> </ul> <p>More about <a href=\"http://www.telerik.com/aspnet-mvc/charts\">Telerik MVC Charts</a>.</p>"
                }
            },
            {
                "text": "Pie labels",
                "url": "pie-charts/pie-labels",
                "title": {
                    "aspnet-mvc": "Pie labels demo | ASP.NET MVC Pie Charts"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how the animated pie labels work in ASP.NET MVC Pie Charts and lets you play with the configuration of the labels."
                },
                "description": {
                    "aspnet-mvc": "<p>This example shows how to show/hide the labels of the ASP.NET MVC Pie Chart and specify how they are aligned.</p> <p>You can do that by getting a reference to the Chart client-object via:</p> <p>var chart = $(\"#chart\").data(\"kendoChart\")</p> <p>which will allow you to set and configure its series collection and attributes:<br /> <br /> var pieSeries = chart.options.series[0];<br /> pieSeries.labels.visible = true|false; // If set to true the chart will display the series labels.<br /> pieSeries.labels.align = \"circle\"; // \"circle\" - the labels are positioned in circle around the chart.\"column\" - the labels are positioned in columns to the left and right of the chart.</p> <p>You can find a complete list of the series attributes in <a href=\"http://docs.telerik.com/kendo-ui/api/javascript/dataviz/ui/chart#configuration-series\">the control&rsquo;s API documentation</a>.</p>"
                }
            },
            {
                "text": "Binding to remote data",
                "url": "pie-charts/remote-data-binding",
                "title": {
                    "aspnet-mvc": "Binding to remote data example | ASP.NET MVC Pie Charts"
                },
                "meta": {
                    "aspnet-mvc": "This demo illustrates how ASP.NET MVC Pie Charts can be bound to remote data by configuring Kendo UI DataSource component."
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik MVC Chart offers two ways of data-binding:</p> <ul> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/overview\" target=\"_blank\">Server</a> - the chart will bind to a supplied model</li> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\" target=\"_blank\">Ajax</a> - the chart will perform Ajax requests to populate its series</li> </ul> <p>For remote data binding you need to specify a remote endpoint or web service returning data in JSON/JSONP format and utilize the DataSource as a mediator between the chart and the underlying data. To make the connection to the remote endpoint and process the data properly, the data source needs information about the web service URL(s), the request type, the response data type, and the structure (schema) of the response, in case it is more complex than a plain array of objects.</p> <p>In this example the chart fetches its data from a MVC controller assigned via the DataSource read configuration. You can find more information about the data-binding capabilities of the MVC chart in this <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\">help article</a>.</p>"
                },
                "requiresServer": "true"
            },
            {
                "text": "Binding to local data",
                "url": "pie-charts/local-data-binding",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Pie Charts binding to local data demo"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how ASP.NET MVC Pie Charts use existing objects as data points. The example illustrates binding to local data feature of the control."
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik MVC Pie chart can be instructed to display data from local data storage using its built-in data-binding capabilities. </p> <p>There are two ways to bind the chart:</p> <ul> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/overview\">Server</a> - the chart will bind to a supplied model</li> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\">Ajax</a> - the chart will perform Ajax requests to populate its series.</li> </ul> <p>In this example you can see how to bind the chart using the server approach. You need to create an action method and pass the SpainElectricityBreakdown enumerator located in the \\Models\\Chart\\ChartDataRepository.cs file as a model. After that you should configure the data bound Percentage, Source and Explode fields for the Series. Note that the view has to be strongly typed so that the chart is able to load its data.</p><p>You can find additional information about how to utilize the data-binding capabilities of the MVC chart in <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\">the Getting Started section</a> of the product documentation.</p>"
                }
            }
        ],
        "category": "Charts"
    },
    {
        "text": "Polar Charts",
        "name": "polar-charts",
        "api": "dataviz/chart",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/chart/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/chart"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/chart"
        },
        "spriteCssClass": "chartPolarIcon",
        "items": [
            {
                "text": "Polar line",
                "url": "polar-charts/index",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Polar Charts Demo"
                },
                "meta": {
                    "aspnet-mvc": "This demo illustrates how ASP.NET MVC Polar Charts control can be added to your web page in order to visualize quantitive data. Learn how to define your polar chart."
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik ASP.NET MVC chart is a powerful data visualization component, which allows you to graphically represent your data. It is useful when you would like to utilize modern browser technologies such as <a href=\"http://en.wikipedia.org/wiki/Scalable_Vector_Graphics\">SVG</a> or <a href=\"https://en.wikipedia.org/wiki/Canvas_element\">Canvas</a> (with a fallback to <a href=\"http://en.wikipedia.org/wiki/Vector_Markup_Language\">VML</a> for older IE versions) for interactive data visualizations. </p> <p>The component offers a variety of chart types such as area, bar, line, scatter, polar, radar, pie and donut, stock (OHLC) and many more.</p> <p>The Polar chart, demonstrated in this demo, shows data in a circular plot area in polar coordinates where each data point is represented by a distance/radius and an angle, beginning of the coordinate system. Polar charts are useful for visualizing scientific data like precipitation/heat distribution in the Earth's poles and other multivariate data.<br /> <br /> The chart can fetch data for its series from either local or remote data source. You can find more information about the MVC chart in the <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/overview\">product documentation</a>.</p> <p><strong><br /> Key Features of Telerik MVC Charts</strong></p> <ul> <li>Various Chart Types</li> <li>A Number of Data Types</li> <li>High Performance</li> <li>Export to PDF</li> <li>Simple-to-Customize Look and Feel</li> <li>Rich Server and Client-side API</li> <li>Server and Client-side Data Binding</li> <li>Built-in Themes</li> <li>Intuitive Built-in Animations</li> <li>Multiple Series and Combination Charts</li> <li>Plot Bands</li> <li>Rich Cross-Browser and Mobile Support</li> </ul> <p>More about <a href=\"http://www.telerik.com/aspnet-mvc/charts\">Telerik MVC Charts</a>.</p>"
                }
            },
            {
                "text": "Smooth polar line",
                "url": "polar-charts/smooth-polar-line",
                "title": {
                    "aspnet-mvc": "Smooth line (spline) style for ASP.NET MVC Polar Charts"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how to configure the ASP.NET MVC Polar Charts to use smooth line (spline) style"
                },
                "description": {
                    "aspnet-mvc": "<p>This demo shows how to configure <em>smooth (spline)</em> polar line style for the Telerik MVC Polar chart.</p> <p>A Spline chart is a form of line/area chart where each data point from the series is connected with a curved line, which represents a rough approximation of the missing data points.</p> <p>You can configure a smooth polar area chart through the Series -&gt; PolarLine -&gt; Style(ChartPolarLineStyle.Smooth) setting.</p>"
                }
            },
            {
                "text": "Polar scatter",
                "url": "polar-charts/polar-scatter",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Polar Charts | Example of polar scatter chart"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how to configure ASP.NET MVC Polar Scatter Chart."
                },
                "description": {
                    "aspnet-mvc": "<p>This example demonstrates how to create a polar scatter chart, which series type is represented on the chart as non-connected data points.</p> <p>You can define the polar scatter series through the Series -&gt; PolarScatter setting.</p>"
                }
            },
            {
                "text": "Polar area",
                "url": "polar-charts/polar-area",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Polar Charts | Example of polar area chart"
                },
                "meta": {
                    "aspnet-mvc": "This demo illustrates how to configure ASP.NET MVC Polar Area Chart."
                },
                "description": {
                    "aspnet-mvc": "<p>This demo shows how to create a polar area chart, which series type is represented by data points connected with straight line segments that enclose a filled area together with the chart pole.</p> <p>You can configure such chart from the Series -&gt; PolarArea configuration setting</p>"
                }
            },
            {
                "text": "Binding to remote data",
                "url": "polar-charts/remote-data-binding",
                "title": {
                    "aspnet-mvc": "Example of ASP.NET MVC Polar Chart bound to remote data"
                },
                "meta": {
                    "aspnet-mvc": "See how ASP.NET MVC Polar Chart can be bound to remote data by configuring the DataSource transport which defines how the DataSource interacts with remote data."
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik MVC Chart offers two ways of data-binding:</p> <ul> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/overview\" target=\"_blank\">Server</a> - the chart will bind to a supplied model</li> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\" target=\"_blank\">Ajax</a> - the chart will perform Ajax requests to populate its series</li> </ul> <p>For remote data binding you need to specify a remote endpoint or web service returning data in JSON/JSONP format and utilize the DataSource as a mediator between the chart and the underlying data. To make the connection to the remote endpoint and process the data properly, the data source needs information about the web service URL(s), the request type, the response data type, and the structure (schema) of the response, in case it is more complex than a plain array of objects.</p> <p>In this example the chart fetches its data from a MVC controller assigned via the DataSource read configuration. You can find more information about the data-binding capabilities of the MVC chart in this <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\">help article</a>.</p>"
                },
                "requiresServer": "true"
            },
            {
                "text": "Binding to local data",
                "url": "polar-charts/local-data-binding",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Polar Charts binding to local data example"
                },
                "meta": {
                    "aspnet-mvc": "This sample demonstrates how ASP.NET MVC Polar Chart can use existing objects as data points."
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik MVC Polar chart can be instructed to display data from local data storage using its built-in data-binding capabilities. </p> <p>There are two ways to bind the chart:</p> <ul> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/overview\">Server</a> - the chart will bind to a supplied model</li> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\">Ajax</a> - the chart will perform Ajax requests to populate its series.</li> </ul> <p>In this example you can see how to bind the chart using the server approach. You need to create an action method and pass the SunPosition list located in the \\Models\\Chart\\ChartDataRepository.Polar.cs file as a model. After that you should configure the data bound Azimuth and Altitude fields for the Series. Note that the view has to be strongly typed so that the chart is able to load its data.</p><p>You can find additional information about how to utilize the data-binding capabilities of the MVC chart in <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\">the Getting Started section</a> of the product documentation.</p>"
                }
            }
        ],
        "category": "Charts"
    },
    {
        "text": "QR Code",
        "name": "qrcode",
        "spriteCssClass": "qrcodeIcon",
        "api": "dataviz/qrcode",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/rqcode/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/qrcode"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/qrcode"
        },
        "items": [
            {
                "text": "Basic usage",
                "url": "qrcode/index",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC QRCode Demo"
                },
                "meta": {
                    "aspnet-mvc": "This sample demonstrates the core functionality of ASP.NET MVC QRCode which helps you easily encode large amounts of data in a machine readable format."
                }
            },
            {
                "text": "API",
                "url": "qrcode/api",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC QRCode API demo"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how ASP.NET MVC QRCode control API works and what kind of functions it supports."
                }
            }
        ],
        "category": "Barcodes"
    },
    {
        "text": "Radar Charts",
        "name": "radar-charts",
        "api": "dataviz/chart",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/chart/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/chart"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/chart"
        },
        "spriteCssClass": "chartRadarIcon",
        "items": [
            {
                "text": "Radar line",
                "url": "radar-charts/index",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Radar Charts Demo"
                },
                "meta": {
                    "aspnet-mvc": "This demo illustrates how ASP.NET MVC Radar Charts control can be added to your web page in order to visualize quantitive data. Learn how to define your radar chart."
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik ASP.NET MVC chart is a powerful data visualization component, which allows you to graphically represent your data. It is useful when you would like to utilize modern browser technologies such as <a href=\"http://en.wikipedia.org/wiki/Scalable_Vector_Graphics\">SVG</a> or <a href=\"https://en.wikipedia.org/wiki/Canvas_element\">Canvas</a> (with a fallback to <a href=\"http://en.wikipedia.org/wiki/Vector_Markup_Language\">VML</a> for older IE versions) for interactive data visualizations. </p> <p>The component offers a variety of chart types such as area, bar, line, scatter, polar, radar, pie and donut, stock (OHLC) and many more.</p> <p>This demo demonstrates the Radar Line type which series are represented on the chart as data points connected with straight line.<br /> <br /> The chart can fetch data for its series from either local or remote data source. You can find more information about the MVC chart in the <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/overview\">product documentation</a>.</p> <p><strong><br /> Key Features of Telerik MVC Charts</strong></p> <ul> <li>Various Chart Types</li> <li>A Number of Data Types</li> <li>High Performance</li> <li>Export to PDF</li> <li>Simple-to-Customize Look and Feel</li> <li>Rich Server and Client-side API</li> <li>Server and Client-side Data Binding</li> <li>Built-in Themes</li> <li>Intuitive Built-in Animations</li> <li>Multiple Series and Combination Charts</li> <li>Plot Bands</li> <li>Rich Cross-Browser and Mobile Support</li> </ul> <p>More about <a href=\"http://www.telerik.com/aspnet-mvc/charts\">Telerik MVC Charts</a>.</p>"
                },
                "packages": [
                    "!mvc-core"
                ]
            },
            {
                "text": "Smooth radar line",
                "url": "radar-charts/smooth-radar-line",
                "title": {
                    "aspnet-mvc": "Smooth line (spline) style for the ASP.NET MVC Radar Charts"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how to configure the ASP.NET MVC Radar Charts to use smooth line style (spline)."
                },
                "description": {
                    "aspnet-mvc": "<p>This demo shows how to configure <em>smooth (spline)</em> radar line style for the Telerik MVC Radar Chart.</p> <p>A Spline chart is a form of line/area chart where each data point from the series is connected with a curved line, which represents a rough approximation of the missing data points.</p> <p>You can configure a smooth polar area chart through the Series or SeriesDefaults -&gt; RadarLine -&gt; Style(ChartPolarLineStyle.Smooth) setting.</p>"
                },
                "requiresServer": "true",
                "packages": [
                    "!mvc-core"
                ]
            },
            {
                "text": "Radar area",
                "url": "radar-charts/radar-area",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Radar Charts | Example of radar area chart"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how to configure ASP.NET MVC Radar Area Chart"
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik ASP.NET MVC chart is a powerful data visualization component, which allows you to graphically represent your data. It is useful when you would like to utilize modern browser technologies such as <a href=\"http://en.wikipedia.org/wiki/Scalable_Vector_Graphics\">SVG</a> or <a href=\"https://en.wikipedia.org/wiki/Canvas_element\">Canvas</a> (with a fallback to <a href=\"http://en.wikipedia.org/wiki/Vector_Markup_Language\">VML</a> for older IE versions) for interactive data visualizations. </p> <p>The component offers a variety of chart types such as area, bar, line, scatter, polar, radar, pie and donut, stock (OHLC) and many more.</p><p>This demo shows how to create a radar area chart, which series type is represented by data points connected with straight line segments that enclose a filled area. You can configure this chart from the Series -&gt; RadarArea configuration setting.</p><p>The chart can fetch data for its series from either local or remote data source. You can find more information about the MVC chart in the <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/overview\">product documentation</a>.</p> <p><strong><br /> Key Features of Telerik MVC Charts</strong></p> <ul>"
                },
                "packages": [
                    "!mvc-core"
                ]
            },
            {
                "text": "Radar column",
                "url": "radar-charts/radar-column",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Radar Charts | Example of radar column chart"
                },
                "meta": {
                    "aspnet-mvc": "This demo illustrates how to display a ASP.NET MVC Radar Column Chart"
                },
                "description": {
                    "aspnet-mvc": "<p>This example displays how to create a radar column chart, which series type is represented as data columns whose height varies according to their value.</p> <p>You can configure this chart from the Series -&gt; RadarColumn configuration setting.</p>"
                },
                "packages": [
                    "!mvc-core"
                ]
            },
            {
                "text": "Binding to remote data",
                "url": "radar-charts/remote-data-binding",
                "title": {
                    "aspnet-mvc": "Example of ASP.NET MVC Radar Charts bound to remote data"
                },
                "meta": {
                    "aspnet-mvc": "See how ASP.NET MVC Radar Chart can be bound to remote data by configuring the DataSource transport which defines how the DataSource interacts with remote data."
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik MVC Chart offers two ways of data-binding:</p> <ul> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/overview\" target=\"_blank\">Server</a> - the chart will bind to a supplied model</li> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\" target=\"_blank\">Ajax</a> - the chart will perform Ajax requests to populate its series</li> </ul> <p>For remote data binding you need to specify a remote endpoint or web service returning data in JSON/JSONP format and utilize the DataSource as a mediator between the chart and the underlying data. To make the connection to the remote endpoint and process the data properly, the data source needs information about the web service URL(s), the request type, the response data type, and the structure (schema) of the response, in case it is more complex than a plain array of objects.</p> <p>In this example the chart fetches its data from a MVC controller assigned via the DataSource read configuration. You can find more information about the data-binding capabilities of the MVC chart in this <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\">help article</a>.</p>"
                },
                "requiresServer": "true",
                "packages": [
                    "!mvc-core"
                ]
            },
            {
                "text": "Binding to local data",
                "url": "radar-charts/local-data-binding",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Radar Charts binding to local data example"
                },
                "meta": {
                    "aspnet-mvc": "This sample demonstrates how ASP.NET MVC Radar chart can use existing objects as data points."
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik MVC Radar chart can be instructed to display data from local data storage using its built-in data-binding capabilities. </p> <p>There are two ways to bind the chart:</p> <ul> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/overview\">Server</a> - the chart will bind to a supplied model</li> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\">Ajax</a> - the chart will perform Ajax requests to populate its series.</li> </ul> <p>In this example you can see how to bind the chart using the server approach. You need to create an action method and pass the ProteinQualityData list located in the \\Models\\Chart\\ChartDataRepository.Radar.cs file as a model. After that you should configure the data bound Score and Abbr fields for the Series and Categories. Note that the view has to be strongly typed so that the chart is able to load its data.</p><p>You can find additional information about how to utilize the data-binding capabilities of the MVC chart in <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\">the Getting Started section</a> of the product documentation.</p>"
                },
                "packages": [
                    "!mvc-core"
                ]
            },
            {
                "text": "Binding to grouped data",
                "url": "radar-charts/grouped-data",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Radar Charts | Example of binding to grouped data"
                },
                "meta": {
                    "aspnet-mvc": "With this example you will learn how to bind grouping data to ASP.NET MVC Radar Charts."
                },
                "description": {
                    "aspnet-mvc": "<p>Telerik MVC charting extension can be integrated to a grouped data by <a href=\"http://docs.telerik.com/kendo-ui/api/javascript/data/datasource\">Kendo UI DataSource</a>. To do, so you can follow the steps below:</p> <ol> <li>Bind the chart to a <a href=\"http://docs.telerik.com/kendo-ui/framework/datasource/overview\">Kendo UI DataSource control</a>.</li> <li>Set the <a href=\"http://docs.telerik.com/kendo-ui/framework/datasource/basic-usage#working-with-grouped-data\">DataSource.group.field property</a> to the name (e.g., the \"Category\" field) of the column in the underlying data which will be the criteria for grouping the chart series items into series Group(group =&gt; group.Add(model =&gt; model.Category))</li> <li>Bind the RadarColumn values of the series to the corresponding data source field (e.g., the \"Frequency\" and \"DirText\" fields): series.RadarColumn(model =&gt; model.Frequency, categoryExpression: model =&gt; model.DirText)</li> <li>Hide the Value Axis: ValueAxis -&gt; Visible(false) </li> </ol> <p>This will result in as many series as the number of distinct values in the DataSource.group.field column (e.g. \"Category\"). </p>"
                },
                "requiresServer": "true",
                "packages": [
                    "!mvc-core"
                ]
            }
        ],
        "category": "Charts"
    },
    {
        "text": "Range Bar Charts",
        "api": "dataviz/chart",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/chart/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/chart"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/chart"
        },
        "items": [
            {
                "text": "Basic usage",
                "url": "range-bar-charts/index",
                "title": {
                    "aspnet-mvc": "Demo for Kendo UI Range Bar Chart"
                },
                "meta": {
                    "aspnet-mvc": "This example illustrates the basic usage of Kendo UI Range Bar Chart which enables the user to show customized range bar charts."
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik ASP.NET MVC chart is a powerful data visualization component, which allows you to graphically represent your data. It is useful when you would like to utilize modern browser technologies such as <a href=\"http://en.wikipedia.org/wiki/Scalable_Vector_Graphics\">SVG</a> or <a href=\"https://en.wikipedia.org/wiki/Canvas_element\">Canvas</a> (with a fallback to <a href=\"http://en.wikipedia.org/wiki/Vector_Markup_Language\">VML</a> for older IE versions) for interactive data visualizations. </p> <p>The component offers a variety of chart types such as area, bar, line, scatter, polar, radar, pie and donut, stock (OHLC) and many more.</p> <p>This demo shows how to create a Range Bar chart, which displays data as bars where each bar represents a value range that spans between its minimum (i.e., From property) and maximum (i.e., To property) levels. A Range Bar type has floating bars unlike the standard Ba chart that has anchored bars to its x-axis.</p> <p>This chart type is useful for comparing the low and high levels of value ranges (e.g., employees' working time, blood glucose levels per day, average minimum and maximum temperatures and rainfalls over time, etc.).</p> <p>The chart can fetch data for its series from either local or remote data source. You can find more information about the MVC chart in the <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/overview\">product documentation</a>.</p> <p><strong><br /> Key Features of Telerik MVC Charts</strong></p> <ul> <li>Various Chart Types</li> <li>A Number of Data Types</li> <li>High Performance</li> <li>Export to PDF</li> <li>Simple-to-Customize Look and Feel</li> <li>Rich Server and Client-side API</li> <li>Server and Client-side Data Binding</li> <li>Built-in Themes</li> <li>Intuitive Built-in Animations</li> <li>Multiple Series and Combination Charts</li> <li>Plot Bands</li> <li>Rich Cross-Browser and Mobile Support</li> </ul> <p>More about <a href=\"http://www.telerik.com/aspnet-mvc/charts\">Telerik MVC Charts</a>.</p>"
                },
                "packages": [
                    "!mvc-core"
                ]
            },
            {
                "text": "Binding to local data",
                "url": "range-bar-charts/local-data-binding",
                "title": {
                    "aspnet-mvc": "Local data-binding example | Kendo UI Range Bar Charts"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how the local data-binding is supported in Kendo UI Range Bar Charts. Use the demo source code to try the feature of the widget."
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik MVC Range Bar chart can be instructed to display data from local data storage using its built-in data-binding capabilities. </p> <p>There are two ways to bind the chart:</p> <ul> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/overview\">Server</a> - the chart will bind to a supplied model</li> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\">Ajax</a> - the chart will perform Ajax requests to populate its series.</li> </ul> <p>You can learn from this demo how to bind the chart using the server approach. You need to create an action method and pass the RangeBarChartsLocalDataViewModel list model. After that you should configure the data bound FromA, ToA, FromB and ToB fields for the Series. Note that the view has to be strongly typed so that the chart is able to load its data.</p><p>You can find additional information about how to utilize the data-binding capabilities of the MVC chart in <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\">the Getting Started section</a> of the product documentation.</p>"
                },
                "packages": [
                    "!mvc-core"
                ]
            },
            {
                "text": "Binding to remote data",
                "url": "range-bar-charts/remote-data-binding",
                "title": {
                    "aspnet-mvc": "Binding to remote data demo | Kendo UI HTML5 jQuery Range Bar Charts"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how Kendo UI Range Bar Chart widget can be bound to remote data to produce high-performance report in your business app."
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik MVC Chart offers two ways of data-binding:</p> <ul> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/overview\" target=\"_blank\">Server</a> - the chart will bind to a supplied model</li> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\" target=\"_blank\">Ajax</a> - the chart will perform Ajax requests to populate its series</li> </ul> <p>For remote data binding you need to specify a remote endpoint or web service returning data in JSON/JSONP format and utilize the DataSource as a mediator between the chart and the underlying data. To make the connection to the remote endpoint and process the data properly, the data source needs information about the web service URL(s), the request type, the response data type, and the structure (schema) of the response, in case it is more complex than a plain array of objects.</p> <p>In this example the chart fetches its data from a MVC controller assigned via the DataSource read configuration. You can find more information about the data-binding capabilities of the MVC chart in this <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\">help article</a>.</p>"
                },
                "requiresServer": "true",
                "packages": [
                    "!mvc-core"
                ]
            }
        ],
        "spriteCssClass": "chartRangeBarIcon",
        "name": "range-bar-charts",
        "category": "Charts"
    },
    {
        "text": "Scatter Charts",
        "name": "scatter-charts",
        "api": "dataviz/chart",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/chart/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/chart"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/chart"
        },
        "spriteCssClass": "chartScatterIcon",
        "items": [
            {
                "text": "Basic usage",
                "url": "scatter-charts/index",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Scatter Charts Demo"
                },
                "meta": {
                    "aspnet-mvc": "This example shows the most important features and functionality of ASP.NET MVC Scatter Charts."
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik ASP.NET MVC chart is a powerful data visualization component, which allows you to graphically represent your data. It is useful when you would like to utilize modern browser technologies such as <a href=\"http://en.wikipedia.org/wiki/Scalable_Vector_Graphics\">SVG</a> or <a href=\"https://en.wikipedia.org/wiki/Canvas_element\">Canvas</a> (with a fallback to <a href=\"http://en.wikipedia.org/wiki/Vector_Markup_Language\">VML</a> for older IE versions) for interactive data visualizations. </p> <p>The component offers a variety of chart types such as area, bar, line, scatter, polar, radar, pie and donut, stock (OHLC) and many more.</p> <p>You can see in this sample demonstration of a Scatter chart, which shows data as points defined by their items' values. Scatter charts are useful for showing the relation between different sets of data, for example scientific (experimental) results.</p> <p>The chart can fetch data for its series from either local or remote data source. You can find more information about the MVC chart in the <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/overview\">product documentation</a>.</p> <p><strong><br /> Key Features of Telerik MVC Charts</strong></p> <ul> <li>Various Chart Types</li> <li>A Number of Data Types</li> <li>High Performance</li> <li>Export to PDF</li> <li>Simple-to-Customize Look and Feel</li> <li>Rich Server and Client-side API</li> <li>Server and Client-side Data Binding</li> <li>Built-in Themes</li> <li>Intuitive Built-in Animations</li> <li>Multiple Series and Combination Charts</li> <li>Plot Bands</li> <li>Rich Cross-Browser and Mobile Support</li> </ul> <p>More about <a href=\"http://www.telerik.com/aspnet-mvc/charts\">Telerik MVC Charts</a>.</p>"
                }
            },
            {
                "text": "Scatter line chart",
                "url": "scatter-charts/scatter-line",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Scatter Line Charts Demo"
                },
                "meta": {
                    "aspnet-mvc": "This sample demonstrates how ASP.NET MVC Scatter Line Charts combines Line and Scatter chart types in your rich data visualizations."
                },
                "description": {
                    "aspnet-mvc": "<p>This example demonstrates how to create a scatter line chart, which is useful for displaying numerical data.</p> <p>You can define the scatter line series through the Series -&gt; ScatterLine setting.</p>"
                },
                "group": "Scatter Chart Types"
            },
            {
                "text": "Smooth scatter line",
                "url": "scatter-charts/smooth-scatter-line",
                "title": {
                    "aspnet-mvc": "Smooth line (spline) style for the ASP.NET MVC Scatter Line Chart"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how to configure the ASP.NET MVC Scatter Line Chart to use smooth line (spline) style."
                },
                "description": {
                    "aspnet-mvc": "<p>This example demonstrates how to create a smoother scatter line chart, in which the series items are connected with a fitted curve which represents a rough approximation of the missing data points.</p> <p>You can define the scatter line series through the Series -&gt; ScatterLine -&gt; Style(ChartScatterLineStyle.Smooth) setting.</p>"
                }
            },
            {
                "text": "Date axis",
                "url": "scatter-charts/date-axis",
                "title": {
                    "aspnet-mvc": "Date Axis demo in ASP.NET MVC Scatter Charts"
                },
                "meta": {
                    "aspnet-mvc": "This example illustrates all properties, specific to date value axis of ASP.NET MVC Scatter Charts."
                },
                "group": "Functionality",
                "description": {
                    "aspnet-mvc": "<p>This example illustrates how to data bind date time spans with Scatter Charts using a <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/overview\">server binding</a>.</p>"
                },
                "requiresServer": "true"
            },
            {
                "text": "Multi-axis",
                "url": "scatter-charts/multiple-axes",
                "title": {
                    "aspnet-mvc": "Multiple axes in ASP.NET MVC Scatter Charts | ASP.NET MVC Demos"
                },
                "meta": {
                    "aspnet-mvc": "This demo illustrates how array of values for multi-axis ASP.NET MVC Scatter Charts are displayed on the plot area."
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik ASP.NET MVC Scatter chart supports multiple axis. This helps you leverage the best charting performance and visualize data on any number axis to provide solid business reports for your users.</p> <p>The example shows a Dyno run report and includes information for the: <em>torgue and power</em>. Note that each of them has unique name which is set through the <strong>XAxis and YAxis Title </strong>method.</p>"
                },
                "packages": [
                    "!mvc-core"
                ]
            },
            {
                "text": "Pan and zoom",
                "url": "scatter-charts/pan-and-zoom",
                "title": {
                    "aspnet-mvc": "Pan and zoom in Kendo UI Scatter Charts"
                },
                "meta": {
                    "aspnet-mvc": "In this example we demonstrate how to enable pan and zoom effects in Kendo UI Scatter Charts."
                },
                "description": {
                    "aspnet-mvc": "<p>The Pan and Zoom features allow you to navigate through and zoom in/out the Telerik MVC Scatter Chart.</p><p>You can enable the pan feature through the Pannable setting and the Zoom set the Zoomable configuration option.</p>"
                }
            },
            {
                "text": "Binding to remote data",
                "url": "scatter-charts/remote-data-binding",
                "title": {
                    "aspnet-mvc": "Remote data-bound scatter series | ASP.NET MVC Scatter Charts"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how scatter series of ASP.NET MVC Scatter Charts can be bound to remote data source items."
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik MVC Chart offers two ways of data-binding:</p> <ul> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/overview\" target=\"_blank\">Server</a> - the chart will bind to a supplied model</li> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\" target=\"_blank\">Ajax</a> - the chart will perform Ajax requests to populate its series</li> </ul> <p>For remote data binding you need to specify a remote endpoint or web service returning data in JSON/JSONP format and utilize the DataSource as a mediator between the chart and the underlying data. To make the connection to the remote endpoint and process the data properly, the data source needs information about the web service URL(s), the request type, the response data type, and the structure (schema) of the response, in case it is more complex than a plain array of objects.</p> <p>In this example the chart fetches its data from a MVC controller assigned via the DataSource read configuration. You can find more information about the data-binding capabilities of the MVC chart in this <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\">help article</a>.</p>"
                },
                "group": "Data Binding",
                "requiresServer": "true"
            },
            {
                "text": "Binding to local data",
                "url": "scatter-charts/local-data-binding",
                "title": {
                    "aspnet-mvc": "Example of binding to local data in ASP.NET MVC Scatter Charts"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how ASP.NET MVC Scatter Charts can use local objects as data points in the HTML5 visualization."
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik MVC Area chart can be instructed to display data from local data storage using its built-in data-binding capabilities. </p> <p>There are two ways to bind the chart:</p> <ul> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/overview\">Server</a> - the chart will bind to a supplied model</li> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\">Ajax</a> - the chart will perform Ajax requests to populate its series</li> </ul> <p>In this example you can see how to bind the chart using the server approach. You need to create an action method and pass the PricePerformanceData list located in the \\Models\\Chart\\ChartDataRepository.cs file as a model. After that you should configure the data bound fields for the Series: series.Scatter(model => model.Price, model => model.Performance). Note that the view has to be strongly typed so that the chart is able to load its data.</p> <p>You can find additional information about how to utilize the data-binding capabilities of the MVC chart in <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\">the Getting Started section</a> of the product documentation.</p>"
                }
            },
            {
                "text": "Binding to grouped data",
                "url": "scatter-charts/grouped-data",
                "title": {
                    "aspnet-mvc": "Example of ASP.NET MVC Scatter Charts bound to grouped data"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how define a group of values in ASP.NET MVC Scatter Charts by configuring the parameters in the DataSource component."
                },
                "description": {
                    "aspnet-mvc": "<p>Telerik MVC charting extension can be integrated to a grouped data by <a href=\"http://docs.telerik.com/kendo-ui/api/javascript/data/datasource\">Kendo UI DataSource</a>. To do, so you can follow the steps below:</p> <ol> <li>Bind the chart to a <a href=\"http://docs.telerik.com/kendo-ui/framework/datasource/overview\">Kendo UI DataSource control</a>.</li> <li>Set the <a href=\"http://docs.telerik.com/kendo-ui/framework/datasource/basic-usage#working-with-grouped-data\">DataSource.group.field property</a> to the name (e.g., the \"Symbol\" field) of the column in the underlying data which will be the criteria for grouping the chart series items into series Group(group =&gt; group.Add(model =&gt; model.Symbol)</li> <li>Bind the Y values of the series to the corresponding data source field (e.g., the \"Date\" and \"Close\" fields): series.ScatterLine(model =&gt; model.Date, model =&gt; model.Close)</li> </ol> <p><br /> This will result in as many series as the number of distinct values in the DataSource.group.field column (e.g., &ldquo;Symbol&rdquo;). &nbsp;Since the &ldquo;Symbol&rdquo; field in this example contains three distinct values (&ldquo;1. GOOG (close)&rdquo;, &ldquo;2. AAPL (close)&rdquo; and &ldquo;3. AMZN (close)&rdquo;) the chart will create three series as well.</p>"
                },
                "requiresServer": "true"
            }
        ],
        "category": "Charts"
    },
    {
        "text": "Sparklines",
        "name": "sparklines",
        "api": "dataviz/sparkline",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/sparkline/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/sparkline"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/sparkline"
        },
        "spriteCssClass": "sparklineIcon",
        "items": [
            {
                "text": "Basic usage",
                "url": "sparklines/index",
                "title": {
                    "aspnet-mvc": "ASP.NET MVC Sparklines Usage | UI for ASP.NET MVC demos"
                },
                "meta": {
                    "aspnet-mvc": "This example demonstrates the common usage of Telerik ASP.NET MVC Sparklines."
                },
                "description": {
                    "aspnet-mvc": "<p>A Sparkline is a very small chart, drawn without axes, coordinates, legend, title and other chart-specific elements. It behaves like an inline element (rendered inside a span) as opposed to the standard charts, which behave like block elements (rendered inside divs) so that it can be easily embedded in text.</p> <p>You can specify the sparkline type through the Type property: .Type(SparklineType.[Area|Bar|Bullet|Column|Line|Pie])</p>"
                },
                "packages": [
                    "!mvc-core"
                ]
            },
            {
                "text": "Binding to remote data",
                "url": "sparklines/remote-data-binding",
                "title": {
                    "aspnet-mvc": "Binding to remote data in ASP.NET MVC Sparkline Chart"
                },
                "meta": {
                    "aspnet-mvc": "This ASP.NET MVC Demo shows how to bind to remote data in ASP.NET MVC Sparklines charting control."
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik MVC Chart offers two ways of data-binding:</p> <ul> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/overview\" target=\"_blank\">Server</a> - the chart will bind to a supplied model</li> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\" target=\"_blank\">Ajax</a> - the chart will perform Ajax requests to populate its series</li> </ul> <p>For remote data binding you need to specify a remote endpoint or web service returning data in JSON/JSONP format and utilize the DataSource as a mediator between the chart and the underlying data. To make the connection to the remote endpoint and process the data properly, the data source needs information about the web service URL(s), the request type, the response data type, and the structure (schema) of the response, in case it is more complex than a plain array of objects.</p> <p>In this example the chart fetches its data from a MVC controller assigned via the DataSource read configuration. You can find more information about the data-binding capabilities of the MVC chart in this <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\">help article</a>.</p>"
                },
                "packages": [
                    "!mvc-core"
                ]
            },
            {
                "text": "Binding to local data",
                "url": "sparklines/local-data-binding",
                "title": {
                    "aspnet-mvc": "Local data binding in ASP.NET MVC Sparkline Chart"
                },
                "meta": {
                    "aspnet-mvc": "Learn how to bind local data to ASP.NET MVC Sparkline charting component. Try it now!"
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik MVC Area chart can be instructed to display data from local data storage using its built-in data-binding capabilities. </p> <p>There are two ways to bind the chart:</p> <ul> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/overview\">Server</a> - the chart will bind to a supplied model</li> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\">Ajax</a> - the chart will perform Ajax requests to populate its series</li> </ul> <p>In this example you can see how to bind the chart using the server approach. You need to create an action method and pass the CompensationData list located in the \\Models\\Chart\\ChartDataRepository.cs file as a model. After that you should configure the data bound fields for the Series, i.e. .ValueAxis(axis => axis.Numeric().Max(50)). Note that the view has to be strongly typed so that the chart is able to load its data.</p><p>You can find additional information about how to utilize the data-binding capabilities of the MVC chart in <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\">the Getting Started section</a> of the product documentation.</p>"
                },
                "packages": [
                    "!mvc-core"
                ]
            }
        ],
        "category": "Charts"
    },
    {
        "text": "Stock Charts",
        "name": "financial",
        "api": "dataviz/stock-chart",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/stockchart/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/chart"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/chart"
        },
        "spriteCssClass": "chartStockIcon",
        "items": [
            {
                "text": "Basic usage",
                "url": "financial/index",
                "title": {
                    "aspnet-mvc": "Example of ASP.NET MVC charts for stock analysis apps"
                },
                "meta": {
                    "aspnet-mvc": "See how you can implement ASP.NET MVC stock chart in your financial app."
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik ASP.NET MVC chart is a powerful data visualization component, which allows you to graphically represent your data. It is useful when you would like to utilize modern browser technologies such as <a href=\"http://en.wikipedia.org/wiki/Scalable_Vector_Graphics\">SVG</a> or <a href=\"https://en.wikipedia.org/wiki/Canvas_element\">Canvas</a> (with a fallback to <a href=\"http://en.wikipedia.org/wiki/Vector_Markup_Language\">VML</a> for older IE versions) for interactive data visualizations. </p> <p>The component offers a variety of chart types such as area, bar, line, scatter, polar, radar, pie and donut, stock (OHLC) and many more.</p> <p>The Stock Chart type, demonstrated in this example, can visualize the price movements of any financial instrument over the time. The chart describes the high, low, opening and closing prices for a single day by combining the Bar and Line charts. The High price is represented by the top of the upper thin line, while the Low price by the bottom of the lower line. The Open and Close prices are represented by the wide part (the body) of the item. If the close price is higher than the open price, the body is hollowed (usually colored white or green), otherwise it is filled (usually colored black or red). <br /> <br /> The financial chart also offers zooming and scrolling functionality, which is exposed by the Navigator pane, located below the main chart.</p> <p>The chart can fetch data for its series from either local or remote data source. You can find more information about the MVC chart in the <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/overview\">product documentation</a>.</p> <p><strong><br /> Key Features of Telerik MVC Charts</strong></p> <ul> <li>Various Chart Types</li> <li>A Number of Data Types</li> <li>High Performance</li> <li>Export to PDF</li> <li>Simple-to-Customize Look and Feel</li> <li>Rich Server and Client-side API</li> <li>Server and Client-side Data Binding</li> <li>Built-in Themes</li> <li>Intuitive Built-in Animations</li> <li>Multiple Series and Combination Charts</li> <li>Plot Bands</li> <li>Rich Cross-Browser and Mobile Support</li> </ul> <p>More about <a href=\"http://www.telerik.com/aspnet-mvc/charts\">Telerik MVC Charts</a>.</p>"
                },
                "requiresServer": "true"
            },
            {
                "text": "Multiple panes",
                "url": "financial/panes",
                "title": {
                    "aspnet-mvc": "Multiple panes in ASP.NET MVC stock chart"
                },
                "meta": {
                    "aspnet-mvc": "This demo illustrates the use of multiple graph panes in ASP.NET MVC Stock chart."
                },
                "description": {
                    "aspnet-mvc": "<p>This demo illustrates the use of multiple graph panes in ASP.NET MVC Stock chart. You can define a pane through the Panes collection and set it&rsquo;s a title and height:</p> <p>panes.Add(\"volumePane\").Title(\"Volume\").Height(150);</p> <p>If you want to render a specific axis inside the newly create pane with name volumePane use the ValueAxis -&gt; Pane setting: ValueAxis(axis =&gt; axis.Numeric(\"volumeAxis\").Pane(\"volumePane\").Visible(false))</p>"
                },
                "requiresServer": "true"
            },
            {
                "text": "Virtualization",
                "url": "financial/virtualization",
                "title": {
                    "aspnet-mvc": "Virtualization in ASP.NET MVC Stock Chart"
                },
                "meta": {
                    "aspnet-mvc": "In this example we show you how the virtualization works in ASP.NET MVC  Stock Chart for rich data visualization."
                },
                "description": {
                    "aspnet-mvc": "<p>In this example you can see how the virtualization works in ASP.NET MVC Stock Chart for rich data visualization. To enable it you have to set the true parameter of the DataSource -&gt; ServerOperation(true) method.</p>"
                }
            },
            {
                "text": "PDF Export",
                "url": "financial/pdf-export",
                "title": {
                    "aspnet-mvc": "Kendo UI StockChart saveAsPDF API method"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how to save the Stock Chart as PDF directly in the browser."
                },
                "description": {
                    "aspnet-mvc": "<p>This example shows how to configure the PDF export settings of the Telerik MVC Charting helper. </p> <p>You can specify the Author, Creator, Date, FileName, AllPages, PaperSize, ProxyURL and other options, through the <strong>PDF</strong> property of the Chart helper.</p> The <a href=\"http://docs.telerik.com/kendo-ui/api/javascript/dataviz/ui/chart#methods-saveAsPDF\">saveAsPDF</a> or <a href=\"http://docs.telerik.com/kendo-ui/api/javascript/dataviz/ui/chart#methods-exportPDF\">exportPDF</a> methods can be used to trigger export operation.</p>"
                }
            }
        ],
        "category": "Charts"
    },
    {
        "text": "TreeMap",
        "spriteCssClass": "treemapIcon",
        "api": "dataviz/treemap",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/treemap/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/treemap"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/treemap"
        },
        "items": [
            {
                "text": "Basic usage",
                "url": "treemap/index",
                "title": {
                    "aspnet-mvc": "Kendo UI TreeMap Demo"
                },
                "meta": {
                    "aspnet-mvc": ""
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik MVC TreeMap component suits perfectly for visualization of hierarchical data in a traditional tree structure. The extension provides three options (Squarified, Horizontal and Vertical) for displaying the data, which could be managed by the Type treemap setting.</p> <p>The main advantages of the control are that you could:</p> <ul> <li>Visualize huge data in a meaningful and colorized way (i.e. files system structure divided by size; the popularity of different tech devices on the market, and other)</li> <li>Optimize space on your web page by its compact structure</li> </ul> <p>You can learn more in the documentation: <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/treemap/overview\" target=\"_blank\">TreeMap</a>.</p>"
                }
            },
            {
                "text": "Events",
                "url": "treemap/events",
                "title": {
                    "aspnet-mvc": "Events in Kendo UI TreeMap"
                },
                "meta": {
                    "aspnet-mvc": ""
                },
                "description": {
                    "aspnet-mvc": "<p>The sample demonstrates the usage of the ItemCreated and DataBound events of the MVC Treemap helper. The ItemCreated event is fired when a tile has been created, while the DataBound one is triggered when the widget is bound to data from its DataSource.</p>"
                }
            }
        ],
        "name": "treemap",
        "category": "Charts"
    },
    {
        "text": "Waterfall Charts",
        "name": "waterfall-charts",
        "api": "dataviz/chart",
        "documentation": {
            "aspnet-mvc": "getting-started/using-kendo-with/aspnet-mvc/helpers/chart/overview"
        },
        "forum": {
            "aspnet-mvc": "aspnet-mvc/chart"
        },
        "codelibrary": {
            "aspnet-mvc": "aspnet-mvc/chart"
        },
        "items": [
            {
                "text": "Basic usage",
                "url": "waterfall-charts/index",
                "title": {
                    "aspnet-mvc": "Demo for Kendo UI Waterfall Chart"
                },
                "meta": {
                    "aspnet-mvc": "This example illustrates the basic usage of Kendo UI Waterfall Chart."
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik ASP.NET MVC chart is a powerful data visualization component, which allows you to graphically represent your data. It is useful when you would like to utilize modern browser technologies such as <a href=\"http://en.wikipedia.org/wiki/Scalable_Vector_Graphics\">SVG</a> or <a href=\"https://en.wikipedia.org/wiki/Canvas_element\">Canvas</a> (with a fallback to <a href=\"http://en.wikipedia.org/wiki/Vector_Markup_Language\">VML</a> for older IE versions) for interactive data visualizations. </p> <p>The component offers a variety of chart types such as area, bar, line, scatter, polar, radar, pie and donut, stock (OHLC), waterfall and other.</p> <p>A Waterfall chart type shows the cumulative effect of positive or negative values on the starting point. Its purpose is to provide a better understanding of how an initial amount is influenced by subsequently added positive or negative values. A Waterfall chart is useful for different types of quantitative analysis related to inventory, cash flows, performance, etc.</p> <p>The chart can fetch data for its series from either local or remote data source. You can find more information about the MVC chart in the <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/overview\">product documentation</a>.</p> <p><strong><br /> Key Features of Telerik MVC Charts</strong></p> <ul> <li>Various Chart Types</li> <li>A Number of Data Types</li> <li>High Performance</li> <li>Export to PDF</li> <li>Simple-to-Customize Look and Feel</li> <li>Rich Server and Client-side API</li> <li>Server and Client-side Data Binding</li> <li>Built-in Themes</li> <li>Intuitive Built-in Animations</li> <li>Multiple Series and Combination Charts</li> <li>Plot Bands</li> <li>Rich Cross-Browser and Mobile Support</li> </ul> <p>More about <a href=\"http://www.telerik.com/aspnet-mvc/charts\">Telerik MVC Charts</a>.</p>"
                }
            },
            {
                "text": "Horizontal Waterfall",
                "url": "waterfall-charts/horizontal",
                "title": {
                    "aspnet-mvc": "Demo for horizontal Kendo UI Waterfall Chart"
                },
                "meta": {
                    "aspnet-mvc": "This example illustrates how to set the Kendo UI Waterfall Chart orientation."
                },
                "description": {
                    "aspnet-mvc": "<p>A Horizontal Waterfall chart type shows the cumulative effect of positive or negative values on the starting point. You can use it to provide a better understanding of how an initial amount is influenced by subsequently added positive or negative values. A Horizontal Waterfall chart is useful for different types of quantitative analysis related to inventory, cash flows, performance, etc. This chart type looks like a Range Bar chart where the low or high value of a subsequent item is connected to the preceding one with a thin line.</p>"
                }
            },
            {
                "text": "Binding to local data",
                "url": "waterfall-charts/local-data-binding",
                "title": {
                    "aspnet-mvc": "Local data-binding example | Kendo UI Waterfall Charts"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how the local data-binding is supported in Kendo UI Waterfall Charts. Use the demo source code to try the feature of the widget."
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik MVC waterfall chart can be instructed to display data from local data storage using its built-in data-binding capabilities. </p> <p>There are two ways to bind the chart:</p> <ul> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/overview\">Server</a> - the chart will bind to a supplied model</li> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\">Ajax</a> - the chart will perform Ajax requests to populate its series</li> </ul> <p>In this example you can see how to bind the chart using the strongly typed server approach. You need to create an action method and supply the CashFlowData model array. After that you should configure the data bound fields for the Series: .Series(series => series.Waterfall(model => model.Amount, model => model.Period, model => model.Summary)) </p> <p>You can find additional information about how to utilize the data-binding capabilities of the MVC chart in <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\">the Getting Started section</a> of the product documentation.</p>"
                }
            },
            {
                "text": "Binding to remote data",
                "url": "waterfall-charts/remote-data-binding",
                "title": {
                    "aspnet-mvc": "Binding to remote data demo | Kendo UI HTML5 jQuery Waterfall Charts"
                },
                "meta": {
                    "aspnet-mvc": "This demo shows how Kendo UI Waterfall Chart widget can be bound to remote data to produce high-performance report in your business app."
                },
                "description": {
                    "aspnet-mvc": "<p>The Telerik MVC Chart offers two ways of data-binding:</p> <ul> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/overview\" target=\"_blank\">Server</a> - the chart will bind to a supplied model</li> <li><a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\" target=\"_blank\">Ajax</a> - the chart will perform Ajax requests to populate its series</li> </ul> <p>For remote data binding you need to specify a remote endpoint or web service returning data in JSON/JSONP format and utilize the DataSource as a mediator between the chart and the underlying data. To make the connection to the remote endpoint and process the data properly, the data source needs information about the web service URL(s), the request type, the response data type, and the structure (schema) of the response, in case it is more complex than a plain array of objects.</p> <p>In this example the chart fetches its data from a MVC controller assigned via the DataSource read configuration. You can find more information about the data-binding capabilities of the MVC chart in this <a href=\"http://docs.telerik.com/kendo-ui/aspnet-mvc/helpers/chart/ajax-binding\">help article</a>.</p>"
                },
                "requiresServer": "true"
            }
        ],
        "spriteCssClass": "chartWaterfallIcon",
        "category": "Charts"
    }
]
