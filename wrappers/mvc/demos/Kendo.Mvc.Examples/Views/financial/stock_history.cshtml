<div class="demo-section k-content wide hidden-on-narrow">
    <h3 class="example-title">Stock<span>History</span></h3>
    <h4 class="example-description">Kendo UI Data Visualization Project</h4>

    @(Html.Kendo().TabStrip()
    .Name("year-filtering-tabs")
    .Animation(false)
    .Items(items =>
    {
        items.Add().Text("2007");
        items.Add().Text("2008");
        items.Add().Text("2009");
        items.Add().Text("2010");
        items.Add().Text("2011").Selected(true);
    })
    .HtmlAttributes(new { @class = "filtering-tabs" }))

    <h5 class="example-subtitle">Closing stock prices</h5>
    <span class="metric">throughout <span class="selected-year"></span></span>
    <div id="chart-type-chooser">
        <strong class="example-subtitle radio-group-label">Chart type</strong>

        <ul class="radio-group">
            <li><input type="radio" name="chart-type" value="area" id="chart-type-area" checked><label for="chart-type-area">Area</label></li>
            <li><input type="radio" name="chart-type" value="line" id="chart-type-line"><label for="chart-type-line">Line</label></li>
        </ul>
    </div>

    @(Html.Kendo().Chart<Kendo.Mvc.Examples.Models.StockDataPoint>()
        .Name("yearly-stock-prices")
        .RenderAs(RenderingMode.Canvas)
        .DataSource("stocksDataSource")
        .AutoBind(false)
        .SeriesDefaults(sd => sd
                .Area()
                .Markers(m => m.Visible(false))
                .Opacity(0.8))
        .Series(series =>
        {
            series.Area(s => s.Close);
        })
        .SeriesColors("#70b5dd", "#1083c7", "#1c638d")
        .ValueAxis(va => va
                .Numeric().Line(l => l.Visible(false))
                .Labels(lb => lb
                .Format("${0}")
                .Skip(2)
                .Step(2)
                .Color("#727f8e"))
        )
        .CategoryAxis(ca => ca
                .Categories(model => model.Date)
                .Labels(lb => lb.Format("MMM").Color("#727f8e"))
                .Line(l => l.Visible(false))
                .MajorTicks(mt => mt.Visible(false))
                .MajorGridLines(mgl => mgl.Visible(false))
        )
        .Legend(lg => lg.Visible(false)))

    <script type="text/x-kendo-template" id="company-info-template">
        <dl class="stat first">
            <dt class="example-subtitle">
                #= name # stock price
                <span class="metric">US dollars</span>
            </dt>
            <dd class="eoy-closing"></dd>
        </dl>

        <div class="company-trends">
            <div class="example-subtitle">
                Stock market trends
                <span class="metric">throughout the year</span>
            </div>

            <dl class="stat trend-container highest-container">
                <dt class="example-subtitle">Highest stock price</dt>
                <dd class="highest"></dd>
                <dd class="sparkline">
                    @(Html.Kendo().Sparkline<Kendo.Mvc.Examples.Models.StockDataPoint>()
                        .Name("highest-sparkline")
                        .RenderAs(RenderingMode.Canvas)
                        .Series(series => series
                            .Line(field => field.High).Color("\\#639514"))
                        .SeriesDefaults(sd => sd.Line()
                            .Width(2)
                            .Tooltip(tooltip => tooltip.Visible(false)))
                        .CategoryAxis(categoryAxis=>categoryAxis
                        .Crosshair(crossHair => crossHair.Visible(false)))
                     .ToClientTemplate())
                </dd>

            </dl>

            <dl class="stat trend-container lowest-container">
                <dt class="example-subtitle">Lowest stock price</dt>
                <dd class="lowest"></dd>
                <dd class="sparkline">
                    @(Html.Kendo().Sparkline<Kendo.Mvc.Examples.Models.StockDataPoint>()
                        .Name("lowest-sparkline")
                        .RenderAs(RenderingMode.Canvas)
                        .Series(series => series
                            .Line(field => field.Low).Color("\\#cd1533"))
                        .SeriesDefaults(sd => sd.Line()
                            .Width(2)
                            .Tooltip(tooltip => tooltip.Visible(false)))
                        .CategoryAxis(categoryAxis => categoryAxis
                        .Crosshair(crossHair => crossHair.Visible(false)))
                     .ToClientTemplate())
                </dd>
            </dl>

            <dl class="stat trend-container">
                <dt class="example-subtitle">YoY change</dt>
                <dd class="relative-value"></dd>
                <dd class="sparkline">
                @(Html.Kendo().Sparkline()
                    .Name("relative-value-sparkline")
                    .RenderAs(RenderingMode.Canvas)
                    .SeriesDefaults(sd => sd.Line()
                        .Width(2)
                        .Tooltip(tooltip=>tooltip.Visible(false)))
                    .CategoryAxis(categoryAxis => categoryAxis
                    .Crosshair(crossHair => crossHair.Visible(false)))
                    .ToClientTemplate())
                </dd>
            </dl>
                @(Html.Kendo().Chart()
                .Name("relative-value-pie")
                .RenderAs(RenderingMode.Canvas)
                .SeriesDefaults(sd => sd.Pie()
                    .Overlay(ChartPieSeriesOverlay.None))
                .SeriesColors("\\#70b5dd", "\\#1083c7", "\\#1c638d")
                .Legend(legend=>legend.Visible(false))
                .ToClientTemplate())
        </div>

        <div class="separator"></div>

        <dl class="stat first">
            <dt class="example-subtitle">
                volume of traded stocks
                <span class="metric">traded stocks</span>
            </dt>
            <dd class="volume"></dd>
        </dl>
            @(Html.Kendo().Chart<Kendo.Mvc.Examples.Models.StockDataPoint>()
            .Name("volume-chart")
            .RenderAs(RenderingMode.Canvas)
            .Series(series=>series.Column(model=>model.Volume).Gap(0.7))
            .SeriesDefaults(sd => sd.Column()
                    .Color("\\#1c638d")
                    .Border(border=>border.Width(0))
                    .Overlay(ChartBarSeriesOverlay.None))
                .AxisDefaults(axisDefault=>axisDefault
                    .MajorGridLines(mgl=>mgl.Visible(false))
                    .MajorTicks(mt=>mt.Visible(false)))
                .CategoryAxis(ca => ca
                    .Categories(model => model.Date)
                    .Labels(lb => lb.Format("MMM").Color("\\#727f8e")))
                .Tooltip(tooltip=>tooltip.Visible(false))
                .ValueAxis(valueAxis=>valueAxis.Numeric().Visible(false))
            .Legend(legend => legend.Visible(false))
            .ToClientTemplate())
    </script>
    @(Html.Kendo().TabStrip()
        .Name("company-filtering-tabs")
        .Animation(false)
        .Items(items =>
        {
            items.Add().Text("Google").Selected(true);
            items.Add().Text("Apple");
            items.Add().Text("Amazon");
        })
        .HtmlAttributes(new { @class = "filtering-tabs" }))

    <div class="company-info" id="google"></div>
</div>
<div class="responsive-message"></div>

@(Html.Kendo().DataSource<Kendo.Mvc.Examples.Models.StockDataPoint>()
    .Name("stocksDataSource")
    .Custom(ds => ds
            .Transport(ts => ts
                .Read(read => read
                    .Url("../content/dataviz/dashboards/stock-data-2011.json")
                    .DataType("json")))
            .Group(group => group.Add(field => field.Symbol))
            .Sort(sort => sort.Add(field => field.Date).Ascending())
            .Schema(schema => schema
                    .Model(model =>
                    {
                        model.Field("Open", typeof(decimal)).From("open");
                        model.Field("High", typeof(decimal)).From("high");
                        model.Field("Low", typeof(decimal)).From("low");
                        model.Field("Close", typeof(decimal)).From("close");
                        model.Field("Date", typeof(DateTime)).From("date");
                        model.Field("Symbol", typeof(string)).From("symbol");
                        model.Field("Volume", typeof(long)).From("volume");
                    }))
                )
            )
<script>
    $(document).ready(function () {
        setTimeout(setup, 500);
    });

    function setup() {
        var selectedYear = 2011;

        stocksDataSource.bind('change', function () {
            $("[name=chart-type][value=area]").prop("checked", true);

            var view = this.view(),
                index = $("#company-filtering-tabs").data("kendoTabStrip").select().index();

            // populate detailed stock prices
            populateStockPrices(view[index], index);
        });

        var defaultSeriesColors = ["#70b5dd", "#1083c7", "#1c638d"];

        function populateStockPrices(data, companyIndex) {
            var container = $(".company-info"),
                yearlyStockValues = data.items,
                highest = yearlyStockValues[0].High,
                lowest = yearlyStockValues[0].Low,
                volume = 0,
                metric = "",
                format = function (number) {
                    return kendo.toString(number, "n");
                }

            $.each(yearlyStockValues, function () {
                highest = this.High > highest ? this.High : highest;
                lowest = this.Low < lowest ? this.Low : lowest;
                volume += this.Volume;
            });

            if (volume > 999999999) {
                volume /= 1000000000;
                metric = "billions stocks";
            } else if (volume > 999999) {
                volume /= 1000000;
                metric = "millions stocks";
            }
            function yearlyRelativeValue(stockValues) {
                return stockValues[stockValues.length - 1].Close / stockValues[0].Open * 100;
            }

            var relativeValues = $.map(yearlyStockValues, function (item, index) {
                var value = 100;

                if (index > 0) {
                    value = item.Close * 100 / yearlyStockValues[index - 1].Open;
                }

                return { value: value };
            });

            var companyRelativeGain = $.map(stocksDataSource.view(), function (data, index) {
                return {
                    value: yearlyRelativeValue(data.items) - 100
                };
            });
            var highChart = $("#highest-sparkline").data("kendoSparkline");
            var lowChart = $("#lowest-sparkline").data("kendoSparkline");
            var relativeChart = $("#relative-value-sparkline").data("kendoSparkline");
            var relativePie = $("#relative-value-pie").data("kendoChart");
            var volumeChart = $("#volume-chart").data("kendoChart");

            highChart.setDataSource(yearlyStockValues);
            lowChart.setDataSource(yearlyStockValues);
            relativeChart.setOptions({ dataSource: relativeValues, series: [{ field: "value", type: "line", color: "#4da3d5" }] });
            relativePie.setOptions({ dataSource: companyRelativeGain, series: [{ field: "value", type: "pie" }] });
            volumeChart.setOptions({ dataSource: yearlyStockValues });

            container
                .find(".eoy-closing").text(format(yearlyStockValues[yearlyStockValues.length - 1].Close)).end()
                .find(".highest").text(format(highest)).end()
                .find(".lowest").text(format(lowest)).end()
                .find(".first dt .metric").eq(1).text(metric).end().end()
                .find(".volume").text(format(volume)).end()
                .find(".relative-value").text(format(yearlyRelativeValue(yearlyStockValues) - 100) + "%").end();
        }

        $("[name=chart-type]").on("click", function () {
            var chart = $("#yearly-stock-prices").data("kendoChart"),
                allSeries = chart.options.series,
                newSeriesType = $(this).val();

            chart.options.seriesDefaults.type = newSeriesType;

            for (var series in allSeries) {
                allSeries[series].type = newSeriesType;
                allSeries[series].opacity = newSeriesType == "area" ? .8 : 1;
            }

            chart.redraw();
        });

        var companyInfoTemplate = kendo.template($("#company-info-template").html());

        $(".company-info").each(function () {
            var panel = $(this);
            panel.html(companyInfoTemplate({ name: panel.attr("id") }));
        });

        var yearTabs = $("#year-filtering-tabs").data("kendoTabStrip");
        yearTabs.bind('change', function (e) {
            selectedYear = this.value();

            stocksDataSource.options.transport.read.url = "../content/dataviz/dashboards/stock-data-" + selectedYear + ".json";

            $(".selected-year").text(selectedYear);

            stocksDataSource.read();
        });
        yearTabs.trigger("change");

        var companyTabs = $("#company-filtering-tabs").data("kendoTabStrip");
        companyTabs.bind('change', function (e) {
            var company = this.value().toLowerCase(),
                index = this.select().index(),
                view = stocksDataSource.view();

            if (view.length) {
                $(".company-info").html(companyInfoTemplate({ name: company }));

                populateStockPrices(view[index], index);
            }
        });

        $(companyTabs.element).find(".k-item").each(function (index) {
            var color = defaultSeriesColors[index];

            $(this).css({
                color: color,
                borderColor: color
            });
        }).end();
    }
</script>

<link href="https://fonts.googleapis.com/css?family=Open+Sans+Condensed:700,300" rel="stylesheet">

<style>
    .demo-section {
        padding: 20px 25px;
        margin: 0 auto;
    }

    .example-title,
    .example-subtitle,
    .metric,
    .example-description,
    .stat dd {
        font-family: 'Open Sans Condensed', Verdana, sans-serif;
    }

    .example-title,
    .example-subtitle {
        text-transform: uppercase;
    }

    .example-title {
        color: #2b8abe;
        font-size: 48px;
        font-weight: 300;
    }

        .example-title span,
        .first dd {
            font-weight: 700;
        }

    .example-description {
        font-size: 18px;
        font-weight: 300;
        color: #1a364a;
    }

    .example-subtitle {
        font-size: 13px;
        font-weight: 700;
        margin-bottom: 0;
    }

    .metric {
        display: block;
        text-transform: none;
        font-weight: 300;
        font-size: 12px;
        color: #727f8e;
        margin: 0;
    }

    .example-title,
    .example-description {
        display: inline-block;
        margin: 0;
    }

    #chart-type-chooser {
        float: right;
        margin-right: .2%;
        width: 170px;
        text-align: right;
        line-height: 32px;
        margin-top: -30px;
    }

    .radio-group-label {
        margin-right: 12px;
        color: #727f8e;
    }

    .radio-group {
        margin: 0;
        padding: 0;
        list-style-type: none;
        display: inline-block;
        vertical-align: top;
    }

        .radio-group > li {
            display: inline-block;
            *display: inline;
            zoom: 1;
        }

        .radio-group label {
            width: 32px;
            height: 32px;
            background: #b3bbc5 no-repeat center center;
            display: inline-block;
            border-radius: 16px;
            overflow: hidden;
            font: 0/0;
            color: transparent;
        }

        .radio-group input {
            display: none;
        }

            .radio-group input:checked + label {
                background-color: #2b8abe;
            }

        .radio-group label[for="chart-type-area"],
        .radio-group label[htmlFor="chart-type-area"] {
            background-image: url("../content/dataviz/dashboards/area-chart.png");
        }

        .radio-group label[for="chart-type-line"],
        .radio-group label[htmlFor="chart-type-line"] {
            background-image: url("../content/dataviz/dashboards/line-chart.png");
        }

    .stat .eoy-closing {
        font-size: 110px;
        line-height: 1em;
        letter-spacing: -2px;
        text-indent: -8px;
        color: #454447;
    }

    .stat .volume {
        font-size: 72px;
        color: #454447;
    }

    .filtering-tabs {
        border: 0;
        background: none;
    }

        .filtering-tabs .k-tabstrip-items {
            padding: 0;
        }

        .filtering-tabs .k-item {
            width: 19.8%;
            border: 0;
            margin: 0 .2% 0 0;
            padding: 0 0 4px;
            text-align: center;
            cursor: pointer;
            background: none;
            border-bottom: 4px solid #b3bbc5;
            font: 16px/2em Arial,sans-serif;
            color: #727f8e;
        }

        .filtering-tabs .k-state-hover {
            color: #2e2e2e;
            background: none;
        }

        .filtering-tabs .k-state-active {
            padding: 0;
            color: #2b8abe;
            border-bottom: 8px solid #2b8abe;
        }

        .filtering-tabs .k-link {
            padding: 0;
        }

    #yearly-stock-prices {
        height: 200px;
        margin-top: 20px;
        clear: both;
    }

    #company-filtering-tabs .k-item {
        width: 32.8%;
        margin: 4px .5% 0 0;
    }

    .stat dd {
        margin: 0;
    }

    .stat,
    #relative-value-pie,
    .company-trends {
        margin: 1em 0 0;
        display: inline-block;
        *display: inline;
        zoom: 1;
        vertical-align: top;
    }

    .company-trends {
        margin-left: 27px;
    }

    .trend-container {
        background: transparent none no-repeat 100% 29px;
        width: 120px;
        margin-right: 27px;
    }

    .lowest-container {
        background: transparent url("../content/dataviz/dashboards/lowest.png") no-repeat 100% 37px;
    }

    .highest-container {
        background: transparent url("../content/dataviz/dashboards/highest.png") no-repeat 100% 29px;
    }

    dd.highest,
    dd.lowest,
    dd.relative-value {
        margin: 0;
        font-size: 36px;
        font-weight: 700;
    }

    .lowest {
        color: #cd151e;
    }

    .highest {
        color: #639514;
    }

    .relative-value {
        color: #4da3d5;
    }

    dd.sparkline .k-sparkline {
        height: 40px;
        width: 120px;
        margin-top: -5px;
    }

    .separator {
        height: 1px;
        background: #b3bbc5;
    }

    #relative-value-pie {
        width: 110px;
        height: 100px;
        margin-left: -10px;
    }

    #volume-chart {
        display: inline-block;
        *display: inline;
        zoom: 1;
        width: 615px;
        height: 136px;
        vertical-align: top;
        margin: 1.2em 0 0 4em;
    }

    .k-content.k-state-active {
        border: none;
    }
</style>
